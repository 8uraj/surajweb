(module
 (type $none_=>_none (func))
 (type $i32_=>_none (func (param i32)))
 (type $i32_i32_=>_none (func (param i32 i32)))
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $f32_=>_f32 (func (param f32) (result f32)))
 (type $i32_i32_i32_f32_=>_i32 (func (param i32 i32 i32 f32) (result i32)))
 (type $i32_i32_i32_i32_=>_none (func (param i32 i32 i32 i32)))
 (type $i32_i32_i64_=>_none (func (param i32 i32 i64)))
 (type $i32_i32_=>_f32 (func (param i32 i32) (result f32)))
 (import "env" "abort" (func $~lib/builtins/abort (param i32 i32 i32 i32)))
 (global $assembly/resample/Interpolation.STEP i32 (i32.const 0))
 (global $assembly/resample/Interpolation.LERP i32 (i32.const 1))
 (global $assembly/resample/Interpolation.SLERP i32 (i32.const 2))
 (global $~argumentsLength (mut i32) (i32.const 0))
 (global $~lib/rt/tlsf/ROOT (mut i32) (i32.const 0))
 (global $~lib/rt/tcms/fromSpace (mut i32) (i32.const 0))
 (global $~lib/rt/tcms/white (mut i32) (i32.const 0))
 (global $~lib/rt/tcms/total (mut i32) (i32.const 0))
 (global $~lib/math/rempio2f_y (mut f64) (f64.const 0))
 (global $~lib/rt/tcms/pinSpace (mut i32) (i32.const 0))
 (global $~lib/rt/tcms/toSpace (mut i32) (i32.const 0))
 (global $~lib/rt/__rtti_base i32 (i32.const 1600))
 (memory $0 1)
 (data $0 (i32.const 1036) ",")
 (data $0.1 (i32.const 1048) "\02\00\00\00\1c\00\00\00I\00n\00v\00a\00l\00i\00d\00 \00l\00e\00n\00g\00t\00h")
 (data $1 (i32.const 1084) "<")
 (data $1.1 (i32.const 1096) "\02\00\00\00&\00\00\00~\00l\00i\00b\00/\00s\00t\00a\00t\00i\00c\00a\00r\00r\00a\00y\00.\00t\00s")
 (data $2 (i32.const 1148) "<")
 (data $2.1 (i32.const 1160) "\02\00\00\00(\00\00\00A\00l\00l\00o\00c\00a\00t\00i\00o\00n\00 \00t\00o\00o\00 \00l\00a\00r\00g\00e")
 (data $3 (i32.const 1212) "<")
 (data $3.1 (i32.const 1224) "\02\00\00\00\1e\00\00\00~\00l\00i\00b\00/\00r\00t\00/\00t\00c\00m\00s\00.\00t\00s")
 (data $4 (i32.const 1276) "<")
 (data $4.1 (i32.const 1288) "\02\00\00\00\1e\00\00\00~\00l\00i\00b\00/\00r\00t\00/\00t\00l\00s\00f\00.\00t\00s")
 (data $6 (i32.const 1368) ")\15DNn\83\f9\a2\c0\dd4\f5\d1W\'\fcA\90C<\99\95b\dba\c5\bb\de\abcQ\fe")
 (data $7 (i32.const 1404) "<")
 (data $7.1 (i32.const 1416) "\02\00\00\00*\00\00\00O\00b\00j\00e\00c\00t\00 \00a\00l\00r\00e\00a\00d\00y\00 \00p\00i\00n\00n\00e\00d")
 (data $9 (i32.const 1500) "<")
 (data $9.1 (i32.const 1512) "\02\00\00\00(\00\00\00O\00b\00j\00e\00c\00t\00 \00i\00s\00 \00n\00o\00t\00 \00p\00i\00n\00n\00e\00d")
 (data $11 (i32.const 1600) "\05\00\00\00 \00\00\00 \00\00\00 \00\00\00\00\00\00\00$\19")
 (export "Interpolation.STEP" (global $assembly/resample/Interpolation.STEP))
 (export "Interpolation.LERP" (global $assembly/resample/Interpolation.LERP))
 (export "Interpolation.SLERP" (global $assembly/resample/Interpolation.SLERP))
 (export "resample" (func $assembly/resample/resample@varargs))
 (export "__new" (func $~lib/rt/tcms/__new))
 (export "__pin" (func $~lib/rt/tcms/__pin))
 (export "__unpin" (func $~lib/rt/tcms/__unpin))
 (export "__collect" (func $~lib/rt/tcms/__collect))
 (export "__rtti_base" (global $~lib/rt/__rtti_base))
 (export "memory" (memory $0))
 (export "__setArgumentsLength" (func $~setArgumentsLength))
 (start $~start)
 (func $~lib/rt/tlsf/removeBlock (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $1
  i32.load $0
  i32.const -4
  i32.and
  local.tee $3
  i32.const 256
  i32.lt_u
  if (result i32)
   local.get $3
   i32.const 4
   i32.shr_u
  else
   i32.const 31
   i32.const 1073741820
   local.get $3
   local.get $3
   i32.const 1073741820
   i32.ge_u
   select
   local.tee $3
   i32.clz
   i32.sub
   local.tee $4
   i32.const 7
   i32.sub
   local.set $2
   local.get $3
   local.get $4
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 16
   i32.xor
  end
  local.set $3
  local.get $1
  i32.load $0 offset=8
  local.set $4
  local.get $1
  i32.load $0 offset=4
  local.tee $5
  if
   local.get $5
   local.get $4
   i32.store $0 offset=8
  end
  local.get $4
  if
   local.get $4
   local.get $5
   i32.store $0 offset=4
  end
  local.get $1
  local.get $0
  local.get $2
  i32.const 4
  i32.shl
  local.get $3
  i32.add
  i32.const 2
  i32.shl
  i32.add
  i32.load $0 offset=96
  i32.eq
  if
   local.get $0
   local.get $2
   i32.const 4
   i32.shl
   local.get $3
   i32.add
   i32.const 2
   i32.shl
   i32.add
   local.get $4
   i32.store $0 offset=96
   local.get $4
   i32.eqz
   if
    local.get $0
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    local.tee $1
    i32.load $0 offset=4
    i32.const -2
    local.get $3
    i32.rotl
    i32.and
    local.set $3
    local.get $1
    local.get $3
    i32.store $0 offset=4
    local.get $3
    i32.eqz
    if
     local.get $0
     local.get $0
     i32.load $0
     i32.const -2
     local.get $2
     i32.rotl
     i32.and
     i32.store $0
    end
   end
  end
 )
 (func $~lib/rt/tlsf/insertBlock (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  i32.const 4
  i32.add
  local.get $1
  i32.load $0
  local.tee $3
  i32.const -4
  i32.and
  i32.add
  local.tee $4
  i32.load $0
  local.tee $2
  i32.const 1
  i32.and
  if
   local.get $0
   local.get $4
   call $~lib/rt/tlsf/removeBlock
   local.get $1
   local.get $3
   i32.const 4
   i32.add
   local.get $2
   i32.const -4
   i32.and
   i32.add
   local.tee $3
   i32.store $0
   local.get $1
   i32.const 4
   i32.add
   local.get $1
   i32.load $0
   i32.const -4
   i32.and
   i32.add
   local.tee $4
   i32.load $0
   local.set $2
  end
  local.get $3
  i32.const 2
  i32.and
  if
   local.get $1
   i32.const 4
   i32.sub
   i32.load $0
   local.tee $1
   i32.load $0
   local.set $6
   local.get $0
   local.get $1
   call $~lib/rt/tlsf/removeBlock
   local.get $1
   local.get $6
   i32.const 4
   i32.add
   local.get $3
   i32.const -4
   i32.and
   i32.add
   local.tee $3
   i32.store $0
  end
  local.get $4
  local.get $2
  i32.const 2
  i32.or
  i32.store $0
  local.get $4
  i32.const 4
  i32.sub
  local.get $1
  i32.store $0
  local.get $0
  local.get $3
  i32.const -4
  i32.and
  local.tee $2
  i32.const 256
  i32.lt_u
  if (result i32)
   local.get $2
   i32.const 4
   i32.shr_u
  else
   i32.const 31
   i32.const 1073741820
   local.get $2
   local.get $2
   i32.const 1073741820
   i32.ge_u
   select
   local.tee $2
   i32.clz
   i32.sub
   local.tee $3
   i32.const 7
   i32.sub
   local.set $5
   local.get $2
   local.get $3
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 16
   i32.xor
  end
  local.tee $2
  local.get $5
  i32.const 4
  i32.shl
  i32.add
  i32.const 2
  i32.shl
  i32.add
  i32.load $0 offset=96
  local.set $3
  local.get $1
  i32.const 0
  i32.store $0 offset=4
  local.get $1
  local.get $3
  i32.store $0 offset=8
  local.get $3
  if
   local.get $3
   local.get $1
   i32.store $0 offset=4
  end
  local.get $0
  local.get $5
  i32.const 4
  i32.shl
  local.get $2
  i32.add
  i32.const 2
  i32.shl
  i32.add
  local.get $1
  i32.store $0 offset=96
  local.get $0
  local.get $0
  i32.load $0
  i32.const 1
  local.get $5
  i32.shl
  i32.or
  i32.store $0
  local.get $0
  local.get $5
  i32.const 2
  i32.shl
  i32.add
  local.tee $0
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  local.get $2
  i32.shl
  i32.or
  i32.store $0 offset=4
 )
 (func $~lib/rt/tlsf/addMemory (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load $0 offset=1568
  local.tee $4
  i32.const 0
  local.get $1
  i32.const 19
  i32.add
  i32.const -16
  i32.and
  i32.const 4
  i32.sub
  local.tee $1
  i32.const 16
  i32.sub
  local.get $4
  i32.eq
  select
  if
   local.get $4
   i32.load $0
   local.set $3
   local.get $1
   i32.const 16
   i32.sub
   local.set $1
  end
  local.get $2
  i32.wrap_i64
  i32.const -16
  i32.and
  local.get $1
  i32.sub
  local.tee $4
  i32.const 20
  i32.lt_u
  if
   return
  end
  local.get $1
  local.get $3
  i32.const 2
  i32.and
  local.get $4
  i32.const 8
  i32.sub
  local.tee $3
  i32.const 1
  i32.or
  i32.or
  i32.store $0
  local.get $1
  i32.const 0
  i32.store $0 offset=4
  local.get $1
  i32.const 0
  i32.store $0 offset=8
  local.get $1
  i32.const 4
  i32.add
  local.get $3
  i32.add
  local.tee $3
  i32.const 2
  i32.store $0
  local.get $0
  local.get $3
  i32.store $0 offset=1568
  local.get $0
  local.get $1
  call $~lib/rt/tlsf/insertBlock
 )
 (func $~lib/rt/tlsf/initialize
  (local $0 i32)
  (local $1 i32)
  memory.size $0
  local.tee $1
  i32.const 0
  i32.le_s
  if (result i32)
   i32.const 1
   local.get $1
   i32.sub
   memory.grow $0
   i32.const 0
   i32.lt_s
  else
   i32.const 0
  end
  if
   unreachable
  end
  i32.const 1632
  i32.const 0
  i32.store $0
  i32.const 3200
  i32.const 0
  i32.store $0
  loop $for-loop|0
   local.get $0
   i32.const 23
   i32.lt_u
   if
    local.get $0
    i32.const 2
    i32.shl
    i32.const 1632
    i32.add
    i32.const 0
    i32.store $0 offset=4
    i32.const 0
    local.set $1
    loop $for-loop|1
     local.get $1
     i32.const 16
     i32.lt_u
     if
      local.get $0
      i32.const 4
      i32.shl
      local.get $1
      i32.add
      i32.const 2
      i32.shl
      i32.const 1632
      i32.add
      i32.const 0
      i32.store $0 offset=96
      local.get $1
      i32.const 1
      i32.add
      local.set $1
      br $for-loop|1
     end
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  i32.const 1632
  i32.const 3204
  memory.size $0
  i64.extend_i32_s
  i64.const 16
  i64.shl
  call $~lib/rt/tlsf/addMemory
  i32.const 1632
  global.set $~lib/rt/tlsf/ROOT
 )
 (func $~lib/rt/tlsf/searchBlock (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 256
  i32.lt_u
  if (result i32)
   local.get $1
   i32.const 4
   i32.shr_u
  else
   i32.const 31
   local.get $1
   i32.const 1
   i32.const 27
   local.get $1
   i32.clz
   i32.sub
   i32.shl
   i32.add
   i32.const 1
   i32.sub
   local.get $1
   local.get $1
   i32.const 536870910
   i32.lt_u
   select
   local.tee $1
   i32.clz
   i32.sub
   local.tee $3
   i32.const 7
   i32.sub
   local.set $2
   local.get $1
   local.get $3
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 16
   i32.xor
  end
  local.set $1
  local.get $0
  local.get $2
  i32.const 2
  i32.shl
  i32.add
  i32.load $0 offset=4
  i32.const -1
  local.get $1
  i32.shl
  i32.and
  local.tee $1
  if (result i32)
   local.get $0
   local.get $1
   i32.ctz
   local.get $2
   i32.const 4
   i32.shl
   i32.add
   i32.const 2
   i32.shl
   i32.add
   i32.load $0 offset=96
  else
   local.get $0
   i32.load $0
   i32.const -1
   local.get $2
   i32.const 1
   i32.add
   i32.shl
   i32.and
   local.tee $1
   if (result i32)
    local.get $0
    local.get $0
    local.get $1
    i32.ctz
    local.tee $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0 offset=4
    i32.ctz
    local.get $0
    i32.const 4
    i32.shl
    i32.add
    i32.const 2
    i32.shl
    i32.add
    i32.load $0 offset=96
   else
    i32.const 0
   end
  end
 )
 (func $~lib/rt/tcms/__new (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $0
  i32.const 1073741804
  i32.gt_u
  if
   i32.const 1168
   i32.const 1232
   i32.const 125
   i32.const 30
   call $~lib/builtins/abort
   unreachable
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.set $4
  local.get $0
  i32.const 16
  i32.add
  local.tee $2
  i32.const 1073741820
  i32.gt_u
  if
   i32.const 1168
   i32.const 1296
   i32.const 459
   i32.const 29
   call $~lib/builtins/abort
   unreachable
  end
  local.get $4
  i32.const 12
  local.get $2
  i32.const 19
  i32.add
  i32.const -16
  i32.and
  i32.const 4
  i32.sub
  local.get $2
  i32.const 12
  i32.le_u
  select
  local.tee $5
  call $~lib/rt/tlsf/searchBlock
  local.tee $2
  i32.eqz
  if
   memory.size $0
   local.tee $2
   i32.const 4
   local.get $4
   i32.load $0 offset=1568
   local.get $2
   i32.const 16
   i32.shl
   i32.const 4
   i32.sub
   i32.ne
   i32.shl
   local.get $5
   i32.const 1
   i32.const 27
   local.get $5
   i32.clz
   i32.sub
   i32.shl
   i32.const 1
   i32.sub
   i32.add
   local.get $5
   local.get $5
   i32.const 536870910
   i32.lt_u
   select
   i32.add
   i32.const 65535
   i32.add
   i32.const -65536
   i32.and
   i32.const 16
   i32.shr_u
   local.tee $3
   local.get $2
   local.get $3
   i32.gt_s
   select
   memory.grow $0
   i32.const 0
   i32.lt_s
   if
    local.get $3
    memory.grow $0
    i32.const 0
    i32.lt_s
    if
     unreachable
    end
   end
   local.get $4
   local.get $2
   i32.const 16
   i32.shl
   memory.size $0
   i64.extend_i32_s
   i64.const 16
   i64.shl
   call $~lib/rt/tlsf/addMemory
   local.get $4
   local.get $5
   call $~lib/rt/tlsf/searchBlock
   local.set $2
  end
  local.get $2
  i32.load $0
  drop
  local.get $4
  local.get $2
  call $~lib/rt/tlsf/removeBlock
  local.get $2
  i32.load $0
  local.tee $3
  i32.const -4
  i32.and
  local.get $5
  i32.sub
  local.tee $6
  i32.const 16
  i32.ge_u
  if
   local.get $2
   local.get $5
   local.get $3
   i32.const 2
   i32.and
   i32.or
   i32.store $0
   local.get $2
   i32.const 4
   i32.add
   local.get $5
   i32.add
   local.tee $3
   local.get $6
   i32.const 4
   i32.sub
   i32.const 1
   i32.or
   i32.store $0
   local.get $4
   local.get $3
   call $~lib/rt/tlsf/insertBlock
  else
   local.get $2
   local.get $3
   i32.const -2
   i32.and
   i32.store $0
   local.get $2
   i32.const 4
   i32.add
   local.get $2
   i32.load $0
   i32.const -4
   i32.and
   i32.add
   local.tee $3
   local.get $3
   i32.load $0
   i32.const -3
   i32.and
   i32.store $0
  end
  local.get $2
  local.get $1
  i32.store $0 offset=12
  local.get $2
  local.get $0
  i32.store $0 offset=16
  global.get $~lib/rt/tcms/fromSpace
  local.tee $0
  i32.load $0 offset=8
  local.set $1
  local.get $2
  local.get $0
  global.get $~lib/rt/tcms/white
  i32.or
  i32.store $0 offset=4
  local.get $2
  local.get $1
  i32.store $0 offset=8
  local.get $1
  local.get $2
  local.get $1
  i32.load $0 offset=4
  i32.const 3
  i32.and
  i32.or
  i32.store $0 offset=4
  local.get $0
  local.get $2
  i32.store $0 offset=8
  global.get $~lib/rt/tcms/total
  local.get $2
  i32.load $0
  i32.const -4
  i32.and
  i32.const 4
  i32.add
  i32.add
  global.set $~lib/rt/tcms/total
  local.get $2
  i32.const 20
  i32.add
 )
 (func $~lib/staticarray/StaticArray<f32>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.const 268435455
  i32.gt_u
  if
   i32.const 1056
   i32.const 1104
   i32.const 51
   i32.const 60
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.const 2
  i32.shl
  local.tee $0
  i32.const 4
  call $~lib/rt/tcms/__new
  local.tee $1
  i32.const 0
  local.get $0
  memory.fill $0
  local.get $1
 )
 (func $~lib/math/NativeMathf.acos (param $0 f32) (result f32)
  (local $1 i32)
  (local $2 i32)
  (local $3 f32)
  (local $4 f32)
  local.get $0
  i32.reinterpret_f32
  local.tee $2
  i32.const 2147483647
  i32.and
  local.tee $1
  i32.const 1065353216
  i32.ge_u
  if
   local.get $1
   i32.const 1065353216
   i32.eq
   if
    f32.const 3.141592502593994
    f32.const 0
    local.get $2
    i32.const 0
    i32.lt_s
    select
    return
   end
   f32.const 0
   local.get $0
   local.get $0
   f32.sub
   f32.div
   return
  end
  local.get $1
  i32.const 1056964608
  i32.lt_u
  if
   local.get $1
   i32.const 847249408
   i32.le_u
   if
    f32.const 1.570796251296997
    return
   end
   f32.const 1.570796251296997
   local.get $0
   f32.const 7.549789415861596e-08
   local.get $0
   local.get $0
   local.get $0
   f32.mul
   local.tee $0
   local.get $0
   local.get $0
   f32.const -0.008656363002955914
   f32.mul
   f32.const -0.04274342209100723
   f32.add
   f32.mul
   f32.const 0.16666586697101593
   f32.add
   f32.mul
   local.get $0
   f32.const -0.7066296339035034
   f32.mul
   f32.const 1
   f32.add
   f32.div
   f32.mul
   f32.sub
   f32.sub
   f32.sub
   return
  end
  local.get $2
  i32.const 0
  i32.lt_s
  if
   f32.const 1.570796251296997
   local.get $0
   f32.const 0.5
   f32.mul
   f32.const 0.5
   f32.add
   local.tee $0
   f32.sqrt
   local.tee $3
   local.get $0
   local.get $0
   local.get $0
   f32.const -0.008656363002955914
   f32.mul
   f32.const -0.04274342209100723
   f32.add
   f32.mul
   f32.const 0.16666586697101593
   f32.add
   f32.mul
   local.get $0
   f32.const -0.7066296339035034
   f32.mul
   f32.const 1
   f32.add
   f32.div
   local.get $3
   f32.mul
   f32.const -7.549789415861596e-08
   f32.add
   f32.add
   f32.sub
   f32.const 2
   f32.mul
   return
  end
  f32.const 0.5
  local.get $0
  f32.const 0.5
  f32.mul
  f32.sub
  local.tee $3
  f32.sqrt
  local.tee $4
  i32.reinterpret_f32
  i32.const -4096
  i32.and
  f32.reinterpret_i32
  local.tee $0
  local.get $3
  local.get $3
  local.get $3
  f32.const -0.008656363002955914
  f32.mul
  f32.const -0.04274342209100723
  f32.add
  f32.mul
  f32.const 0.16666586697101593
  f32.add
  f32.mul
  local.get $3
  f32.const -0.7066296339035034
  f32.mul
  f32.const 1
  f32.add
  f32.div
  local.get $4
  f32.mul
  local.get $3
  local.get $0
  local.get $0
  f32.mul
  f32.sub
  local.get $4
  local.get $0
  f32.add
  f32.div
  f32.add
  f32.add
  f32.const 2
  f32.mul
 )
 (func $~lib/math/NativeMathf.sin (param $0 f32) (result f32)
  (local $1 f64)
  (local $2 f64)
  (local $3 i32)
  (local $4 f64)
  (local $5 i64)
  (local $6 i32)
  (local $7 i32)
  (local $8 i64)
  (local $9 i64)
  local.get $0
  i32.reinterpret_f32
  local.tee $3
  i32.const 31
  i32.shr_u
  local.set $6
  block $folding-inner0
   local.get $3
   i32.const 2147483647
   i32.and
   local.tee $3
   i32.const 1061752794
   i32.le_u
   if
    local.get $3
    i32.const 964689920
    i32.lt_u
    if
     local.get $0
     return
    end
    local.get $0
    f64.promote_f32
    local.tee $2
    local.get $2
    f64.mul
    local.tee $1
    local.get $2
    f64.mul
    local.set $4
    br $folding-inner0
   end
   local.get $3
   i32.const 1081824209
   i32.le_u
   if
    local.get $3
    i32.const 1075235811
    i32.le_u
    if
     local.get $6
     if (result f32)
      local.get $0
      f64.promote_f32
      f64.const 1.5707963267948966
      f64.add
      local.tee $1
      local.get $1
      f64.mul
      local.tee $1
      local.get $1
      f64.mul
      local.set $2
      local.get $1
      f64.const -0.499999997251031
      f64.mul
      f64.const 1
      f64.add
      local.get $2
      f64.const 0.04166662332373906
      f64.mul
      f64.add
      local.get $2
      local.get $1
      f64.mul
      local.get $1
      f64.const 2.439044879627741e-05
      f64.mul
      f64.const -0.001388676377460993
      f64.add
      f64.mul
      f64.add
      f32.demote_f64
      f32.neg
     else
      local.get $0
      f64.promote_f32
      f64.const -1.5707963267948966
      f64.add
      local.tee $1
      local.get $1
      f64.mul
      local.tee $1
      local.get $1
      f64.mul
      local.set $2
      local.get $1
      f64.const -0.499999997251031
      f64.mul
      f64.const 1
      f64.add
      local.get $2
      f64.const 0.04166662332373906
      f64.mul
      f64.add
      local.get $2
      local.get $1
      f64.mul
      local.get $1
      f64.const 2.439044879627741e-05
      f64.mul
      f64.const -0.001388676377460993
      f64.add
      f64.mul
      f64.add
      f32.demote_f64
     end
     return
    end
    local.get $0
    f64.promote_f32
    local.tee $1
    f64.const 3.141592653589793
    f64.add
    local.get $1
    f64.const -3.141592653589793
    f64.add
    local.get $6
    select
    f64.neg
    local.tee $2
    local.get $2
    f64.mul
    local.tee $1
    local.get $2
    f64.mul
    local.set $4
    br $folding-inner0
   end
   local.get $3
   i32.const 1088565717
   i32.le_u
   if
    local.get $3
    i32.const 1085271519
    i32.le_u
    if
     local.get $6
     if (result f32)
      local.get $0
      f64.promote_f32
      f64.const 4.71238898038469
      f64.add
      local.tee $1
      local.get $1
      f64.mul
      local.tee $1
      local.get $1
      f64.mul
      local.set $2
      local.get $1
      f64.const -0.499999997251031
      f64.mul
      f64.const 1
      f64.add
      local.get $2
      f64.const 0.04166662332373906
      f64.mul
      f64.add
      local.get $2
      local.get $1
      f64.mul
      local.get $1
      f64.const 2.439044879627741e-05
      f64.mul
      f64.const -0.001388676377460993
      f64.add
      f64.mul
      f64.add
      f32.demote_f64
     else
      local.get $0
      f64.promote_f32
      f64.const -4.71238898038469
      f64.add
      local.tee $1
      local.get $1
      f64.mul
      local.tee $1
      local.get $1
      f64.mul
      local.set $2
      local.get $1
      f64.const -0.499999997251031
      f64.mul
      f64.const 1
      f64.add
      local.get $2
      f64.const 0.04166662332373906
      f64.mul
      f64.add
      local.get $2
      local.get $1
      f64.mul
      local.get $1
      f64.const 2.439044879627741e-05
      f64.mul
      f64.const -0.001388676377460993
      f64.add
      f64.mul
      f64.add
      f32.demote_f64
      f32.neg
     end
     return
    end
    local.get $0
    f64.promote_f32
    local.tee $1
    f64.const 6.283185307179586
    f64.add
    local.get $1
    f64.const -6.283185307179586
    f64.add
    local.get $6
    select
    local.tee $2
    local.get $2
    f64.mul
    local.tee $1
    local.get $2
    f64.mul
    local.set $4
    br $folding-inner0
   end
   local.get $3
   i32.const 2139095040
   i32.ge_u
   if
    local.get $0
    local.get $0
    f32.sub
    return
   end
   block $~lib/math/rempio2f|inlined.0 (result i32)
    local.get $3
    i32.const 1305022427
    i32.lt_u
    if
     local.get $0
     f64.promote_f32
     local.tee $1
     f64.const 0.6366197723675814
     f64.mul
     f64.nearest
     local.set $2
     local.get $1
     local.get $2
     f64.const 1.5707963109016418
     f64.mul
     f64.sub
     local.get $2
     f64.const 1.5893254773528196e-08
     f64.mul
     f64.sub
     global.set $~lib/math/rempio2f_y
     local.get $2
     i32.trunc_sat_f64_s
     br $~lib/math/rempio2f|inlined.0
    end
    local.get $3
    i32.const 23
    i32.shr_s
    i32.const 152
    i32.sub
    local.tee $7
    i32.const 63
    i32.and
    i64.extend_i32_s
    local.set $8
    local.get $7
    i32.const 6
    i32.shr_s
    i32.const 3
    i32.shl
    i32.const 1368
    i32.add
    local.tee $7
    i64.load $0 offset=8
    local.set $5
    f64.const 8.515303950216386e-20
    local.get $0
    f64.promote_f32
    f64.copysign
    local.get $3
    i32.const 8388607
    i32.and
    i32.const 8388608
    i32.or
    i64.extend_i32_s
    local.tee $9
    local.get $7
    i64.load $0
    local.get $8
    i64.shl
    local.get $5
    i64.const 64
    local.get $8
    i64.sub
    i64.shr_u
    i64.or
    i64.mul
    local.get $8
    i64.const 32
    i64.gt_u
    if (result i64)
     local.get $5
     local.get $8
     i64.const 32
     i64.sub
     i64.shl
     local.get $7
     i64.load $0 offset=16
     i64.const 96
     local.get $8
     i64.sub
     i64.shr_u
     i64.or
    else
     local.get $5
     i64.const 32
     local.get $8
     i64.sub
     i64.shr_u
    end
    local.get $9
    i64.mul
    i64.const 32
    i64.shr_u
    i64.add
    local.tee $5
    i64.const 2
    i64.shl
    local.tee $8
    f64.convert_i64_s
    f64.mul
    global.set $~lib/math/rempio2f_y
    i32.const 0
    local.get $5
    i64.const 62
    i64.shr_u
    local.get $8
    i64.const 63
    i64.shr_u
    i64.add
    i32.wrap_i64
    local.tee $3
    i32.sub
    local.get $3
    local.get $6
    select
   end
   local.set $3
   global.get $~lib/math/rempio2f_y
   local.set $1
   local.get $3
   i32.const 1
   i32.and
   if (result f32)
    local.get $1
    local.get $1
    f64.mul
    local.tee $1
    local.get $1
    f64.mul
    local.set $2
    local.get $1
    f64.const -0.499999997251031
    f64.mul
    f64.const 1
    f64.add
    local.get $2
    f64.const 0.04166662332373906
    f64.mul
    f64.add
    local.get $2
    local.get $1
    f64.mul
    local.get $1
    f64.const 2.439044879627741e-05
    f64.mul
    f64.const -0.001388676377460993
    f64.add
    f64.mul
    f64.add
    f32.demote_f64
   else
    local.get $1
    local.get $1
    local.get $1
    f64.mul
    local.tee $2
    local.get $1
    f64.mul
    local.tee $1
    local.get $2
    f64.const 0.008333329385889463
    f64.mul
    f64.const -0.16666666641626524
    f64.add
    f64.mul
    f64.add
    local.get $1
    local.get $2
    local.get $2
    f64.mul
    f64.mul
    local.get $2
    f64.const 2.718311493989822e-06
    f64.mul
    f64.const -1.9839334836096632e-04
    f64.add
    f64.mul
    f64.add
    f32.demote_f64
   end
   local.tee $0
   f32.neg
   local.get $0
   local.get $3
   i32.const 2
   i32.and
   select
   return
  end
  local.get $2
  local.get $4
  local.get $1
  f64.const 0.008333329385889463
  f64.mul
  f64.const -0.16666666641626524
  f64.add
  f64.mul
  f64.add
  local.get $4
  local.get $1
  local.get $1
  f64.mul
  f64.mul
  local.get $1
  f64.const 2.718311493989822e-06
  f64.mul
  f64.const -1.9839334836096632e-04
  f64.add
  f64.mul
  f64.add
  f32.demote_f64
 )
 (func $assembly/resample/getAngle (param $0 i32) (param $1 i32) (result f32)
  (local $2 f32)
  local.get $0
  f32.load $0
  local.get $1
  f32.load $0
  f32.mul
  local.get $0
  f32.load $0 offset=4
  local.get $1
  f32.load $0 offset=4
  f32.mul
  f32.add
  local.get $0
  f32.load $0 offset=8
  local.get $1
  f32.load $0 offset=8
  f32.mul
  f32.add
  local.get $0
  f32.load $0 offset=12
  local.get $1
  f32.load $0 offset=12
  f32.mul
  f32.add
  local.tee $2
  local.get $2
  f32.add
  local.get $2
  f32.mul
  f32.const -1
  f32.add
  call $~lib/math/NativeMathf.acos
 )
 (func $assembly/resample/resample (param $0 i32) (param $1 i32) (param $2 i32) (param $3 f32) (result i32)
  (local $4 i32)
  (local $5 f32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 f32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 f32)
  (local $14 i32)
  (local $15 f32)
  (local $16 f32)
  (local $17 f32)
  (local $18 f32)
  (local $19 f32)
  (local $20 f32)
  (local $21 f32)
  (local $22 f32)
  (local $23 f32)
  (local $24 i32)
  (local $25 i32)
  local.get $1
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  i32.const 2
  i32.shr_u
  local.get $0
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  i32.const 2
  i32.shr_u
  i32.div_s
  local.tee $4
  call $~lib/staticarray/StaticArray<f32>#constructor
  local.set $6
  local.get $4
  call $~lib/staticarray/StaticArray<f32>#constructor
  local.set $24
  local.get $4
  call $~lib/staticarray/StaticArray<f32>#constructor
  local.set $12
  local.get $4
  call $~lib/staticarray/StaticArray<f32>#constructor
  local.set $10
  local.get $0
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $14
  i32.const 1
  local.set $4
  i32.const 1
  local.set $11
  loop $for-loop|0
   local.get $11
   local.get $14
   i32.lt_u
   if
    local.get $0
    local.get $11
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.tee $5
    local.get $0
    local.get $4
    i32.const 1
    i32.sub
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.tee $9
    f32.sub
    local.get $0
    local.get $11
    i32.const 1
    i32.add
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.tee $13
    local.get $9
    f32.sub
    f32.div
    local.set $9
    local.get $5
    local.get $13
    f32.ne
    if (result i32)
     local.get $11
     i32.const 1
     i32.ne
     if (result i32)
      i32.const 1
     else
      local.get $5
      local.get $0
      f32.load $0
      f32.ne
     end
    else
     i32.const 0
    end
    if (result i32)
     local.get $4
     i32.const 1
     i32.sub
     local.set $8
     i32.const 0
     local.set $7
     local.get $10
     i32.const 20
     i32.sub
     i32.load $0 offset=16
     i32.const 2
     i32.shr_u
     local.set $25
     loop $for-loop|04
      local.get $7
      local.get $25
      i32.lt_u
      if
       local.get $10
       local.get $7
       i32.const 2
       i32.shl
       i32.add
       local.get $1
       local.get $8
       local.get $25
       i32.mul
       local.get $7
       i32.add
       i32.const 2
       i32.shl
       i32.add
       f32.load $0
       f32.store $0
       local.get $7
       i32.const 1
       i32.add
       local.set $7
       br $for-loop|04
      end
     end
     i32.const 0
     local.set $7
     local.get $24
     i32.const 20
     i32.sub
     i32.load $0 offset=16
     i32.const 2
     i32.shr_u
     local.set $8
     loop $for-loop|05
      local.get $7
      local.get $8
      i32.lt_u
      if
       local.get $24
       local.get $7
       i32.const 2
       i32.shl
       i32.add
       local.get $1
       local.get $8
       local.get $11
       i32.mul
       local.get $7
       i32.add
       i32.const 2
       i32.shl
       i32.add
       f32.load $0
       f32.store $0
       local.get $7
       i32.const 1
       i32.add
       local.set $7
       br $for-loop|05
      end
     end
     local.get $11
     i32.const 1
     i32.add
     local.set $8
     i32.const 0
     local.set $7
     local.get $12
     i32.const 20
     i32.sub
     i32.load $0 offset=16
     i32.const 2
     i32.shr_u
     local.set $25
     loop $for-loop|06
      local.get $7
      local.get $25
      i32.lt_u
      if
       local.get $12
       local.get $7
       i32.const 2
       i32.shl
       i32.add
       local.get $1
       local.get $8
       local.get $25
       i32.mul
       local.get $7
       i32.add
       i32.const 2
       i32.shl
       i32.add
       f32.load $0
       f32.store $0
       local.get $7
       i32.const 1
       i32.add
       local.set $7
       br $for-loop|06
      end
     end
     local.get $2
     i32.const 2
     i32.eq
     if (result i32)
      local.get $10
      f32.load $0
      local.tee $20
      local.get $12
      f32.load $0
      local.tee $13
      f32.mul
      local.get $10
      f32.load $0 offset=4
      local.tee $21
      local.get $12
      f32.load $0 offset=4
      local.tee $15
      f32.mul
      f32.add
      local.get $10
      f32.load $0 offset=8
      local.tee $22
      local.get $12
      f32.load $0 offset=8
      local.tee $16
      f32.mul
      f32.add
      local.get $10
      f32.load $0 offset=12
      local.tee $23
      local.get $12
      f32.load $0 offset=12
      local.tee $17
      f32.mul
      f32.add
      local.tee $5
      f32.const 0
      f32.lt
      if
       local.get $13
       f32.neg
       local.set $13
       local.get $15
       f32.neg
       local.set $15
       local.get $16
       f32.neg
       local.set $16
       local.get $17
       f32.neg
       local.set $17
       local.get $5
       f32.neg
       local.set $5
      end
      f64.const 1
      local.get $5
      f64.promote_f32
      f64.sub
      f64.const 1e-06
      f64.gt
      if
       local.get $5
       call $~lib/math/NativeMathf.acos
       local.tee $18
       call $~lib/math/NativeMathf.sin
       local.set $19
       f32.const 1
       local.get $9
       f32.sub
       local.get $18
       f32.mul
       call $~lib/math/NativeMathf.sin
       local.get $19
       f32.div
       local.set $5
       local.get $9
       local.get $18
       f32.mul
       call $~lib/math/NativeMathf.sin
       local.get $19
       f32.div
       local.set $9
      else
       f32.const 1
       local.get $9
       f32.sub
       local.set $5
      end
      local.get $6
      local.get $5
      local.get $20
      f32.mul
      local.get $9
      local.get $13
      f32.mul
      f32.add
      f32.store $0
      local.get $6
      local.get $5
      local.get $21
      f32.mul
      local.get $9
      local.get $15
      f32.mul
      f32.add
      f32.store $0 offset=4
      local.get $6
      local.get $5
      local.get $22
      f32.mul
      local.get $9
      local.get $16
      f32.mul
      f32.add
      f32.store $0 offset=8
      local.get $6
      local.get $5
      local.get $23
      f32.mul
      local.get $9
      local.get $17
      f32.mul
      f32.add
      f32.store $0 offset=12
      local.get $10
      local.get $24
      call $assembly/resample/getAngle
      local.get $24
      local.get $12
      call $assembly/resample/getAngle
      f32.add
      local.set $5
      block $__inlined_func$assembly/resample/eq (result i32)
       i32.const 0
       local.set $8
       i32.const 0
       local.get $24
       i32.const 20
       i32.sub
       i32.load $0 offset=16
       i32.const 2
       i32.shr_u
       local.get $6
       i32.const 20
       i32.sub
       i32.load $0 offset=16
       i32.const 2
       i32.shr_u
       i32.ne
       br_if $__inlined_func$assembly/resample/eq
       drop
       local.get $24
       i32.const 20
       i32.sub
       i32.load $0 offset=16
       i32.const 2
       i32.shr_u
       local.set $7
       loop $for-loop|00
        local.get $7
        local.get $8
        i32.gt_u
        if
         i32.const 0
         local.get $24
         local.get $8
         i32.const 2
         i32.shl
         local.tee $25
         i32.add
         f32.load $0
         local.get $6
         local.get $25
         i32.add
         f32.load $0
         f32.sub
         f32.abs
         local.get $3
         f32.gt
         br_if $__inlined_func$assembly/resample/eq
         drop
         local.get $8
         i32.const 1
         i32.add
         local.set $8
         br $for-loop|00
        end
       end
       i32.const 1
      end
      i32.eqz
      local.get $5
      f64.promote_f32
      f64.const 2.220446049250313e-16
      f64.add
      f64.const 3.141592653589793
      f64.ge
      i32.or
     else
      local.get $2
      i32.const 1
      i32.eq
      if (result i32)
       i32.const 0
       local.set $7
       local.get $10
       i32.const 20
       i32.sub
       i32.load $0 offset=16
       i32.const 2
       i32.shr_u
       local.set $8
       loop $for-loop|07
        local.get $7
        local.get $8
        i32.lt_u
        if
         local.get $7
         i32.const 2
         i32.shl
         local.tee $25
         local.get $6
         i32.add
         local.get $10
         local.get $25
         i32.add
         f32.load $0
         f32.const 1
         local.get $9
         f32.sub
         f32.mul
         local.get $12
         local.get $25
         i32.add
         f32.load $0
         local.get $9
         f32.mul
         f32.add
         f32.store $0
         local.get $7
         i32.const 1
         i32.add
         local.set $7
         br $for-loop|07
        end
       end
       block $__inlined_func$assembly/resample/eq0 (result i32)
        i32.const 0
        local.set $7
        i32.const 0
        local.get $24
        i32.const 20
        i32.sub
        i32.load $0 offset=16
        i32.const 2
        i32.shr_u
        local.get $6
        i32.const 20
        i32.sub
        i32.load $0 offset=16
        i32.const 2
        i32.shr_u
        i32.ne
        br_if $__inlined_func$assembly/resample/eq0
        drop
        local.get $24
        i32.const 20
        i32.sub
        i32.load $0 offset=16
        i32.const 2
        i32.shr_u
        local.set $8
        loop $for-loop|01
         local.get $7
         local.get $8
         i32.lt_u
         if
          i32.const 0
          local.get $24
          local.get $7
          i32.const 2
          i32.shl
          local.tee $25
          i32.add
          f32.load $0
          local.get $6
          local.get $25
          i32.add
          f32.load $0
          f32.sub
          f32.abs
          local.get $3
          f32.gt
          br_if $__inlined_func$assembly/resample/eq0
          drop
          local.get $7
          i32.const 1
          i32.add
          local.set $7
          br $for-loop|01
         end
        end
        i32.const 1
       end
       i32.eqz
      else
       local.get $2
       if (result i32)
        i32.const 1
       else
        block $__inlined_func$assembly/resample/eq1 (result i32)
         i32.const 0
         local.set $7
         i32.const 0
         local.get $24
         i32.const 20
         i32.sub
         i32.load $0 offset=16
         i32.const 2
         i32.shr_u
         local.get $10
         i32.const 20
         i32.sub
         i32.load $0 offset=16
         i32.const 2
         i32.shr_u
         i32.ne
         br_if $__inlined_func$assembly/resample/eq1
         drop
         local.get $24
         i32.const 20
         i32.sub
         i32.load $0 offset=16
         i32.const 2
         i32.shr_u
         local.set $8
         loop $for-loop|02
          local.get $7
          local.get $8
          i32.lt_u
          if
           i32.const 0
           local.get $24
           local.get $7
           i32.const 2
           i32.shl
           local.tee $25
           i32.add
           f32.load $0
           local.get $10
           local.get $25
           i32.add
           f32.load $0
           f32.sub
           f32.abs
           f32.const 0
           f32.gt
           br_if $__inlined_func$assembly/resample/eq1
           drop
           local.get $7
           i32.const 1
           i32.add
           local.set $7
           br $for-loop|02
          end
         end
         i32.const 1
        end
        if (result i32)
         block $__inlined_func$assembly/resample/eq2 (result i32)
          i32.const 0
          local.set $7
          i32.const 0
          local.get $24
          i32.const 20
          i32.sub
          i32.load $0 offset=16
          i32.const 2
          i32.shr_u
          local.get $12
          i32.const 20
          i32.sub
          i32.load $0 offset=16
          i32.const 2
          i32.shr_u
          i32.ne
          br_if $__inlined_func$assembly/resample/eq2
          drop
          local.get $24
          i32.const 20
          i32.sub
          i32.load $0 offset=16
          i32.const 2
          i32.shr_u
          local.set $8
          loop $for-loop|03
           local.get $7
           local.get $8
           i32.lt_u
           if
            i32.const 0
            local.get $24
            local.get $7
            i32.const 2
            i32.shl
            local.tee $25
            i32.add
            f32.load $0
            local.get $12
            local.get $25
            i32.add
            f32.load $0
            f32.sub
            f32.abs
            f32.const 0
            f32.gt
            br_if $__inlined_func$assembly/resample/eq2
            drop
            local.get $7
            i32.const 1
            i32.add
            local.set $7
            br $for-loop|03
           end
          end
          i32.const 1
         end
        else
         i32.const 0
        end
       end
       i32.eqz
      end
     end
    else
     i32.const 0
    end
    if
     local.get $4
     local.get $11
     i32.ne
     if
      local.get $0
      local.get $4
      i32.const 2
      i32.shl
      i32.add
      local.get $0
      local.get $11
      i32.const 2
      i32.shl
      i32.add
      f32.load $0
      f32.store $0
      i32.const 0
      local.set $7
      i32.const 0
      local.set $8
      local.get $6
      i32.const 20
      i32.sub
      i32.load $0 offset=16
      i32.const 2
      i32.shr_u
      local.set $25
      loop $for-loop|08
       local.get $8
       local.get $25
       i32.lt_u
       if
        local.get $6
        local.get $8
        i32.const 2
        i32.shl
        i32.add
        local.get $1
        local.get $11
        local.get $25
        i32.mul
        local.get $8
        i32.add
        i32.const 2
        i32.shl
        i32.add
        f32.load $0
        f32.store $0
        local.get $8
        i32.const 1
        i32.add
        local.set $8
        br $for-loop|08
       end
      end
      local.get $6
      i32.const 20
      i32.sub
      i32.load $0 offset=16
      i32.const 2
      i32.shr_u
      local.set $8
      loop $for-loop|09
       local.get $7
       local.get $8
       i32.lt_u
       if
        local.get $1
        local.get $4
        local.get $8
        i32.mul
        local.get $7
        i32.add
        i32.const 2
        i32.shl
        i32.add
        local.get $6
        local.get $7
        i32.const 2
        i32.shl
        i32.add
        f32.load $0
        f32.store $0
        local.get $7
        i32.const 1
        i32.add
        local.set $7
        br $for-loop|09
       end
      end
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
    end
    local.get $11
    i32.const 1
    i32.add
    local.set $11
    br $for-loop|0
   end
  end
  local.get $14
  if (result i32)
   local.get $0
   local.get $4
   i32.const 2
   i32.shl
   i32.add
   local.get $0
   local.get $14
   i32.const 2
   i32.shl
   i32.add
   f32.load $0
   f32.store $0
   i32.const 0
   local.set $0
   i32.const 0
   local.set $2
   local.get $6
   i32.const 20
   i32.sub
   i32.load $0 offset=16
   i32.const 2
   i32.shr_u
   local.set $7
   loop $for-loop|010
    local.get $2
    local.get $7
    i32.lt_u
    if
     local.get $6
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     local.get $1
     local.get $7
     local.get $14
     i32.mul
     local.get $2
     i32.add
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.store $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|010
    end
   end
   local.get $6
   i32.const 20
   i32.sub
   i32.load $0 offset=16
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|011
    local.get $0
    local.get $2
    i32.lt_u
    if
     local.get $1
     local.get $2
     local.get $4
     i32.mul
     local.get $0
     i32.add
     i32.const 2
     i32.shl
     i32.add
     local.get $6
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|011
    end
   end
   local.get $4
   i32.const 1
   i32.add
  else
   local.get $4
  end
 )
 (func $assembly/resample/resample@varargs (param $0 i32) (param $1 i32) (param $2 i32) (param $3 f32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 3
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   f32.const 9.999999747378752e-05
   local.set $3
  end
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  call $assembly/resample/resample
 )
 (func $~lib/rt/tcms/__pin (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  if
   local.get $0
   i32.const 20
   i32.sub
   local.tee $1
   i32.load $0 offset=4
   i32.const 3
   i32.and
   i32.const 3
   i32.eq
   if
    i32.const 1424
    i32.const 1232
    i32.const 181
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
   block $__inlined_func$~lib/rt/tcms/Object#unlink
    local.get $1
    i32.load $0 offset=4
    i32.const -4
    i32.and
    local.tee $2
    i32.eqz
    if
     local.get $1
     i32.load $0 offset=8
     drop
     br $__inlined_func$~lib/rt/tcms/Object#unlink
    end
    local.get $2
    local.get $1
    i32.load $0 offset=8
    local.tee $3
    i32.store $0 offset=8
    local.get $3
    local.get $2
    local.get $3
    i32.load $0 offset=4
    i32.const 3
    i32.and
    i32.or
    i32.store $0 offset=4
   end
   global.get $~lib/rt/tcms/pinSpace
   local.tee $2
   i32.load $0 offset=8
   local.set $3
   local.get $1
   local.get $2
   i32.const 3
   i32.or
   i32.store $0 offset=4
   local.get $1
   local.get $3
   i32.store $0 offset=8
   local.get $3
   local.get $1
   local.get $3
   i32.load $0 offset=4
   i32.const 3
   i32.and
   i32.or
   i32.store $0 offset=4
   local.get $2
   local.get $1
   i32.store $0 offset=8
  end
  local.get $0
 )
 (func $~lib/rt/tcms/__unpin (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.eqz
  if
   return
  end
  local.get $0
  i32.const 20
  i32.sub
  local.tee $0
  i32.load $0 offset=4
  i32.const 3
  i32.and
  i32.const 3
  i32.ne
  if
   i32.const 1520
   i32.const 1232
   i32.const 195
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  block $__inlined_func$~lib/rt/tcms/Object#unlink
   local.get $0
   i32.load $0 offset=4
   i32.const -4
   i32.and
   local.tee $1
   i32.eqz
   if
    local.get $0
    i32.load $0 offset=8
    drop
    br $__inlined_func$~lib/rt/tcms/Object#unlink
   end
   local.get $1
   local.get $0
   i32.load $0 offset=8
   local.tee $2
   i32.store $0 offset=8
   local.get $2
   local.get $1
   local.get $2
   i32.load $0 offset=4
   i32.const 3
   i32.and
   i32.or
   i32.store $0 offset=4
  end
  global.get $~lib/rt/tcms/fromSpace
  local.tee $1
  i32.load $0 offset=8
  local.set $2
  local.get $0
  local.get $1
  global.get $~lib/rt/tcms/white
  i32.or
  i32.store $0 offset=4
  local.get $0
  local.get $2
  i32.store $0 offset=8
  local.get $2
  local.get $0
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.and
  i32.or
  i32.store $0 offset=4
  local.get $1
  local.get $0
  i32.store $0 offset=8
 )
 (func $~lib/rt/tcms/__collect
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  global.get $~lib/rt/tcms/white
  i32.const 1040
  i32.load $0
  i32.const 3
  i32.and
  i32.eq
  if
   block $__inlined_func$~lib/rt/tcms/Object#unlink
    i32.const 1040
    i32.load $0
    i32.const -4
    i32.and
    local.tee $0
    i32.eqz
    if
     i32.const 1044
     i32.load $0
     drop
     br $__inlined_func$~lib/rt/tcms/Object#unlink
    end
    local.get $0
    i32.const 1044
    i32.load $0
    local.tee $1
    i32.store $0 offset=8
    local.get $1
    local.get $0
    local.get $1
    i32.load $0 offset=4
    i32.const 3
    i32.and
    i32.or
    i32.store $0 offset=4
   end
   global.get $~lib/rt/tcms/toSpace
   local.tee $0
   i32.load $0 offset=8
   local.set $1
   i32.const 1040
   local.get $0
   global.get $~lib/rt/tcms/white
   i32.eqz
   i32.or
   i32.store $0
   i32.const 1044
   local.get $1
   i32.store $0
   local.get $1
   local.get $1
   i32.load $0 offset=4
   i32.const 3
   i32.and
   i32.const 1036
   i32.or
   i32.store $0 offset=4
   local.get $0
   i32.const 1036
   i32.store $0 offset=8
  end
  global.get $~lib/rt/tcms/white
  i32.const 1152
  i32.load $0
  i32.const 3
  i32.and
  i32.eq
  if
   block $__inlined_func$~lib/rt/tcms/Object#unlink1
    i32.const 1152
    i32.load $0
    i32.const -4
    i32.and
    local.tee $0
    i32.eqz
    if
     i32.const 1156
     i32.load $0
     drop
     br $__inlined_func$~lib/rt/tcms/Object#unlink1
    end
    local.get $0
    i32.const 1156
    i32.load $0
    local.tee $1
    i32.store $0 offset=8
    local.get $1
    local.get $0
    local.get $1
    i32.load $0 offset=4
    i32.const 3
    i32.and
    i32.or
    i32.store $0 offset=4
   end
   global.get $~lib/rt/tcms/toSpace
   local.tee $0
   i32.load $0 offset=8
   local.set $1
   i32.const 1152
   local.get $0
   global.get $~lib/rt/tcms/white
   i32.eqz
   i32.or
   i32.store $0
   i32.const 1156
   local.get $1
   i32.store $0
   local.get $1
   local.get $1
   i32.load $0 offset=4
   i32.const 3
   i32.and
   i32.const 1148
   i32.or
   i32.store $0 offset=4
   local.get $0
   i32.const 1148
   i32.store $0 offset=8
  end
  global.get $~lib/rt/tcms/white
  i32.const 1408
  i32.load $0
  i32.const 3
  i32.and
  i32.eq
  if
   block $__inlined_func$~lib/rt/tcms/Object#unlink2
    i32.const 1408
    i32.load $0
    i32.const -4
    i32.and
    local.tee $0
    i32.eqz
    if
     i32.const 1412
     i32.load $0
     drop
     br $__inlined_func$~lib/rt/tcms/Object#unlink2
    end
    local.get $0
    i32.const 1412
    i32.load $0
    local.tee $1
    i32.store $0 offset=8
    local.get $1
    local.get $0
    local.get $1
    i32.load $0 offset=4
    i32.const 3
    i32.and
    i32.or
    i32.store $0 offset=4
   end
   global.get $~lib/rt/tcms/toSpace
   local.tee $0
   i32.load $0 offset=8
   local.set $1
   i32.const 1408
   local.get $0
   global.get $~lib/rt/tcms/white
   i32.eqz
   i32.or
   i32.store $0
   i32.const 1412
   local.get $1
   i32.store $0
   local.get $1
   local.get $1
   i32.load $0 offset=4
   i32.const 3
   i32.and
   i32.const 1404
   i32.or
   i32.store $0 offset=4
   local.get $0
   i32.const 1404
   i32.store $0 offset=8
  end
  global.get $~lib/rt/tcms/white
  i32.const 1504
  i32.load $0
  i32.const 3
  i32.and
  i32.eq
  if
   block $__inlined_func$~lib/rt/tcms/Object#unlink3
    i32.const 1504
    i32.load $0
    i32.const -4
    i32.and
    local.tee $0
    i32.eqz
    if
     i32.const 1508
     i32.load $0
     drop
     br $__inlined_func$~lib/rt/tcms/Object#unlink3
    end
    local.get $0
    i32.const 1508
    i32.load $0
    local.tee $1
    i32.store $0 offset=8
    local.get $1
    local.get $0
    local.get $1
    i32.load $0 offset=4
    i32.const 3
    i32.and
    i32.or
    i32.store $0 offset=4
   end
   global.get $~lib/rt/tcms/toSpace
   local.tee $0
   i32.load $0 offset=8
   local.set $1
   i32.const 1504
   local.get $0
   global.get $~lib/rt/tcms/white
   i32.eqz
   i32.or
   i32.store $0
   i32.const 1508
   local.get $1
   i32.store $0
   local.get $1
   local.get $1
   i32.load $0 offset=4
   i32.const 3
   i32.and
   i32.const 1500
   i32.or
   i32.store $0 offset=4
   local.get $0
   i32.const 1500
   i32.store $0 offset=8
  end
  global.get $~lib/rt/tcms/pinSpace
  local.tee $1
  i32.load $0 offset=4
  i32.const -4
  i32.and
  local.set $0
  loop $while-continue|0
   local.get $0
   local.get $1
   i32.ne
   if
    local.get $0
    i32.load $0 offset=4
    drop
    local.get $0
    i32.const 20
    i32.add
    call $~lib/rt/__visit_members
    local.get $0
    i32.load $0 offset=4
    i32.const -4
    i32.and
    local.set $0
    br $while-continue|0
   end
  end
  global.get $~lib/rt/tcms/white
  i32.eqz
  local.set $2
  global.get $~lib/rt/tcms/toSpace
  local.tee $3
  i32.load $0 offset=4
  i32.const -4
  i32.and
  local.set $0
  loop $while-continue|1
   local.get $0
   local.get $3
   i32.ne
   if
    local.get $0
    i32.load $0 offset=4
    drop
    local.get $0
    i32.const 20
    i32.add
    call $~lib/rt/__visit_members
    local.get $0
    i32.load $0 offset=4
    i32.const -4
    i32.and
    local.set $0
    br $while-continue|1
   end
  end
  global.get $~lib/rt/tcms/fromSpace
  local.tee $4
  i32.load $0 offset=4
  i32.const -4
  i32.and
  local.set $0
  loop $while-continue|2
   local.get $0
   local.get $4
   i32.ne
   if
    local.get $0
    i32.load $0 offset=4
    i32.const -4
    i32.and
    local.set $1
    local.get $0
    i32.const 1624
    i32.lt_u
    if
     local.get $0
     i32.const 0
     i32.store $0 offset=4
     local.get $0
     i32.const 0
     i32.store $0 offset=8
    else
     global.get $~lib/rt/tcms/total
     local.get $0
     i32.load $0
     i32.const -4
     i32.and
     i32.const 4
     i32.add
     i32.sub
     global.set $~lib/rt/tcms/total
     local.get $0
     i32.const 4
     i32.add
     local.tee $5
     i32.const 1624
     i32.ge_u
     if
      global.get $~lib/rt/tlsf/ROOT
      i32.eqz
      if
       call $~lib/rt/tlsf/initialize
      end
      local.get $5
      i32.const 4
      i32.sub
      local.set $0
      local.get $5
      i32.const 15
      i32.and
      i32.const 1
      local.get $5
      select
      i32.eqz
      if
       local.get $0
       i32.load $0
       drop
      end
      local.get $0
      local.get $0
      i32.load $0
      i32.const 1
      i32.or
      i32.store $0
      global.get $~lib/rt/tlsf/ROOT
      local.get $0
      call $~lib/rt/tlsf/insertBlock
     end
    end
    local.get $1
    local.set $0
    br $while-continue|2
   end
  end
  local.get $4
  local.get $4
  i32.store $0 offset=4
  local.get $4
  local.get $4
  i32.store $0 offset=8
  local.get $3
  global.set $~lib/rt/tcms/fromSpace
  local.get $4
  global.set $~lib/rt/tcms/toSpace
  local.get $2
  global.set $~lib/rt/tcms/white
 )
 (func $~lib/rt/__visit_members (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  block $invalid
   block $~lib/staticarray/StaticArray<f32>
    block $~lib/arraybuffer/ArrayBufferView
     block $~lib/string/String
      block $~lib/arraybuffer/ArrayBuffer
       block $~lib/object/Object
        local.get $0
        i32.const 8
        i32.sub
        i32.load $0
        br_table $~lib/object/Object $~lib/arraybuffer/ArrayBuffer $~lib/string/String $~lib/arraybuffer/ArrayBufferView $~lib/staticarray/StaticArray<f32> $invalid
       end
       return
      end
      return
     end
     return
    end
    local.get $0
    i32.load $0
    local.tee $0
    if
     global.get $~lib/rt/tcms/white
     local.get $0
     i32.const 20
     i32.sub
     local.tee $0
     i32.load $0 offset=4
     i32.const 3
     i32.and
     i32.eq
     if
      block $__inlined_func$~lib/rt/tcms/Object#unlink
       local.get $0
       i32.load $0 offset=4
       i32.const -4
       i32.and
       local.tee $1
       i32.eqz
       if
        local.get $0
        i32.load $0 offset=8
        drop
        br $__inlined_func$~lib/rt/tcms/Object#unlink
       end
       local.get $1
       local.get $0
       i32.load $0 offset=8
       local.tee $2
       i32.store $0 offset=8
       local.get $2
       local.get $1
       local.get $2
       i32.load $0 offset=4
       i32.const 3
       i32.and
       i32.or
       i32.store $0 offset=4
      end
      global.get $~lib/rt/tcms/toSpace
      local.tee $1
      i32.load $0 offset=8
      local.set $2
      local.get $0
      local.get $1
      global.get $~lib/rt/tcms/white
      i32.eqz
      i32.or
      i32.store $0 offset=4
      local.get $0
      local.get $2
      i32.store $0 offset=8
      local.get $2
      local.get $0
      local.get $2
      i32.load $0 offset=4
      i32.const 3
      i32.and
      i32.or
      i32.store $0 offset=4
      local.get $1
      local.get $0
      i32.store $0 offset=8
     end
    end
    return
   end
   return
  end
  unreachable
 )
 (func $~setArgumentsLength (param $0 i32)
  local.get $0
  global.set $~argumentsLength
 )
 (func $~start
  i32.const 1348
  i32.const 1344
  i32.store $0
  i32.const 1352
  i32.const 1344
  i32.store $0
  i32.const 1344
  global.set $~lib/rt/tcms/fromSpace
  i32.const 1476
  i32.const 1472
  i32.store $0
  i32.const 1480
  i32.const 1472
  i32.store $0
  i32.const 1472
  global.set $~lib/rt/tcms/pinSpace
  i32.const 1572
  i32.const 1568
  i32.store $0
  i32.const 1576
  i32.const 1568
  i32.store $0
  i32.const 1568
  global.set $~lib/rt/tcms/toSpace
 )
)
