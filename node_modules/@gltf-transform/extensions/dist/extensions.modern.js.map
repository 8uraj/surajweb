{"version":3,"file":"extensions.modern.js","sources":["../src/constants.ts","../src/ext-mesh-gpu-instancing/instanced-mesh.ts","../src/ext-mesh-gpu-instancing/mesh-gpu-instancing.ts","../src/ext-meshopt-compression/constants.ts","../src/ext-meshopt-compression/encoder.ts","../src/ext-meshopt-compression/meshopt-compression.ts","../src/ext-meshopt-compression/decoder.ts","../src/ext-texture-avif/texture-avif.ts","../src/ext-texture-webp/texture-webp.ts","../src/khr-draco-mesh-compression/decoder.ts","../src/khr-draco-mesh-compression/encoder.ts","../src/khr-draco-mesh-compression/draco-mesh-compression.ts","../src/khr-lights-punctual/light.ts","../src/khr-lights-punctual/lights-punctual.ts","../src/khr-materials-anisotropy/anisotropy.ts","../src/khr-materials-anisotropy/materials-anisotropy.ts","../src/khr-materials-clearcoat/clearcoat.ts","../src/khr-materials-clearcoat/materials-clearcoat.ts","../src/khr-materials-emissive-strength/emissive-strength.ts","../src/khr-materials-emissive-strength/materials-emissive-strength.ts","../src/khr-materials-ior/ior.ts","../src/khr-materials-ior/materials-ior.ts","../src/khr-materials-iridescence/iridescence.ts","../src/khr-materials-iridescence/materials-iridescence.ts","../src/khr-materials-pbr-specular-glossiness/pbr-specular-glossiness.ts","../src/khr-materials-pbr-specular-glossiness/materials-pbr-specular-glossiness.ts","../src/khr-materials-sheen/sheen.ts","../src/khr-materials-sheen/materials-sheen.ts","../src/khr-materials-specular/specular.ts","../src/khr-materials-specular/materials-specular.ts","../src/khr-materials-transmission/transmission.ts","../src/khr-materials-transmission/materials-transmission.ts","../src/khr-materials-unlit/unlit.ts","../src/khr-materials-unlit/materials-unlit.ts","../src/khr-materials-variants/mapping.ts","../src/khr-materials-variants/mapping-list.ts","../src/khr-materials-variants/variant.ts","../src/khr-materials-variants/materials-variants.ts","../src/khr-materials-volume/volume.ts","../src/khr-materials-volume/materials-volume.ts","../src/khr-mesh-quantization/mesh-quantization.ts","../src/khr-texture-basisu/texture-basisu.ts","../src/khr-texture-transform/transform.ts","../src/khr-texture-transform/texture-transform.ts","../src/khr-xmp-json-ld/packet.ts","../src/khr-xmp-json-ld/xmp.ts","../src/extensions.ts"],"sourcesContent":["export const EXT_MESH_GPU_INSTANCING = 'EXT_mesh_gpu_instancing';\nexport const EXT_MESHOPT_COMPRESSION = 'EXT_meshopt_compression';\nexport const EXT_TEXTURE_WEBP = 'EXT_texture_webp';\nexport const EXT_TEXTURE_AVIF = 'EXT_texture_avif';\nexport const KHR_DRACO_MESH_COMPRESSION = 'KHR_draco_mesh_compression';\nexport const KHR_LIGHTS_PUNCTUAL = 'KHR_lights_punctual';\nexport const KHR_MATERIALS_ANISOTROPY = 'KHR_materials_anisotropy';\nexport const KHR_MATERIALS_CLEARCOAT = 'KHR_materials_clearcoat';\nexport const KHR_MATERIALS_EMISSIVE_STRENGTH = 'KHR_materials_emissive_strength';\nexport const KHR_MATERIALS_IOR = 'KHR_materials_ior';\nexport const KHR_MATERIALS_IRIDESCENCE = 'KHR_materials_iridescence';\nexport const KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS = 'KHR_materials_pbrSpecularGlossiness';\nexport const KHR_MATERIALS_SHEEN = 'KHR_materials_sheen';\nexport const KHR_MATERIALS_SPECULAR = 'KHR_materials_specular';\nexport const KHR_MATERIALS_TRANSMISSION = 'KHR_materials_transmission';\nexport const KHR_MATERIALS_UNLIT = 'KHR_materials_unlit';\nexport const KHR_MATERIALS_VOLUME = 'KHR_materials_volume';\nexport const KHR_MATERIALS_VARIANTS = 'KHR_materials_variants';\nexport const KHR_MESH_QUANTIZATION = 'KHR_mesh_quantization';\nexport const KHR_TEXTURE_BASISU = 'KHR_texture_basisu';\nexport const KHR_TEXTURE_TRANSFORM = 'KHR_texture_transform';\nexport const KHR_XMP_JSON_LD = 'KHR_xmp_json_ld';\n","import { Accessor, ExtensionProperty, IProperty, Nullable, PropertyType } from '@gltf-transform/core';\nimport { EXT_MESH_GPU_INSTANCING } from '../constants.js';\n\ninterface IInstancedMesh extends IProperty {\n\tattributes: { [key: string]: Accessor };\n}\n\n// See BufferViewUsage in `writer-context.ts`.\nexport const INSTANCE_ATTRIBUTE = 'INSTANCE_ATTRIBUTE';\n\n/**\n * Defines GPU instances of a {@link Mesh} under one {@link Node}. See {@link EXTMeshGPUInstancing}.\n */\nexport class InstancedMesh extends ExtensionProperty<IInstancedMesh> {\n\tpublic static EXTENSION_NAME = EXT_MESH_GPU_INSTANCING;\n\tpublic declare extensionName: typeof EXT_MESH_GPU_INSTANCING;\n\tpublic declare propertyType: 'InstancedMesh';\n\tpublic declare parentTypes: [PropertyType.NODE];\n\n\tprotected init(): void {\n\t\tthis.extensionName = EXT_MESH_GPU_INSTANCING;\n\t\tthis.propertyType = 'InstancedMesh';\n\t\tthis.parentTypes = [PropertyType.NODE];\n\t}\n\n\tprotected getDefaults(): Nullable<IInstancedMesh> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, { attributes: {} });\n\t}\n\n\t/** Returns an instance attribute as an {@link Accessor}. */\n\tpublic getAttribute(semantic: string): Accessor | null {\n\t\treturn this.getRefMap('attributes', semantic);\n\t}\n\n\t/**\n\t * Sets an instance attribute to an {@link Accessor}. All attributes must have the same\n\t * instance count.\n\t */\n\tpublic setAttribute(semantic: string, accessor: Accessor | null): this {\n\t\treturn this.setRefMap('attributes', semantic, accessor, { usage: INSTANCE_ATTRIBUTE });\n\t}\n\n\t/**\n\t * Lists all instance attributes {@link Accessor}s associated with the InstancedMesh. Order\n\t * will be consistent with the order returned by {@link .listSemantics}().\n\t */\n\tpublic listAttributes(): Accessor[] {\n\t\treturn this.listRefMapValues('attributes');\n\t}\n\n\t/**\n\t * Lists all instance attribute semantics associated with the primitive. Order will be\n\t * consistent with the order returned by {@link .listAttributes}().\n\t */\n\tpublic listSemantics(): string[] {\n\t\treturn this.listRefMapKeys('attributes');\n\t}\n}\n","import { Extension, PropertyType, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { EXT_MESH_GPU_INSTANCING } from '../constants.js';\nimport { InstancedMesh, INSTANCE_ATTRIBUTE } from './instanced-mesh.js';\n\nconst NAME = EXT_MESH_GPU_INSTANCING;\n\ninterface InstancedMeshDef {\n\tattributes: {\n\t\t[name: string]: number;\n\t};\n}\n\n/**\n * [`EXT_mesh_gpu_instancing`](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_mesh_gpu_instancing/)\n * prepares mesh data for efficient GPU instancing.\n *\n * GPU instancing allows engines to render many copies of a single mesh at once using a small number\n * of draw calls. Instancing is particularly useful for things like trees, grass, road signs, etc.\n * Keep in mind that predefined batches, as used in this extension, may prevent frustum culling\n * within a batch. Dividing batches into collocated cells may be preferable to using a single large\n * batch.\n *\n * > _**NOTICE:** While this extension stores mesh data optimized for GPU instancing, it\n * > is important to note that (1) GPU instancing and other optimizations are possible — and\n * > encouraged — even without this extension, and (2) other common meanings of the term\n * > \"instancing\" exist, distinct from this extension. See\n * > [Appendix: Motivation and Purpose](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_mesh_gpu_instancing#appendix-motivation-and-purpose)\n * > of the `EXT_mesh_gpu_instancing` specification._\n *\n * Properties:\n * - {@link InstancedMesh}\n *\n * ### Example\n *\n * The `EXTMeshGPUInstancing` class provides a single {@link ExtensionProperty} type, `InstancedMesh`,\n * which may be attached to any {@link Node} instance. For example:\n *\n * ```typescript\n * import { EXTMeshGPUInstancing } from '@gltf-transform/extensions';\n *\n * // Create standard mesh, node, and scene hierarchy.\n * // ...\n *\n * // Assign positions for each instance.\n * const batchPositions = doc.createAccessor('instance_positions')\n * \t.setArray(new Float32Array([\n * \t\t0, 0, 0,\n * \t\t1, 0, 0,\n * \t\t2, 0, 0,\n * \t]))\n * \t.setType(Accessor.Type.VEC3)\n * \t.setBuffer(buffer);\n *\n * // Assign IDs for each instance.\n * const batchIDs = doc.createAccessor('instance_ids')\n * \t.setArray(new Uint8Array([0, 1, 2]))\n * \t.setType(Accessor.Type.SCALAR)\n * \t.setBuffer(buffer);\n *\n * // Create an Extension attached to the Document.\n * const batchExtension = document.createExtension(EXTMeshGPUInstancing)\n * \t.setRequired(true);\n * const batch = batchExtension.createInstancedMesh()\n * \t.setAttribute('TRANSLATION', batchPositions)\n * \t.setAttribute('_ID', batchIDs);\n *\n * node\n * \t.setMesh(mesh)\n * \t.setExtension('EXT_mesh_gpu_instancing', batch);\n * ```\n *\n * Standard instance attributes are `TRANSLATION`, `ROTATION`, and `SCALE`, and support the accessor\n * types allowed by the extension specification. Custom instance attributes are allowed, and should\n * be prefixed with an underscore (`_*`).\n */\nexport class EXTMeshGPUInstancing extends Extension {\n\tpublic readonly extensionName = NAME;\n\t/** @hidden */\n\tpublic readonly provideTypes = [PropertyType.NODE];\n\t/** @hidden */\n\tpublic readonly prewriteTypes = [PropertyType.ACCESSOR];\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new InstancedMesh property for use on a {@link Node}. */\n\tpublic createInstancedMesh(): InstancedMesh {\n\t\treturn new InstancedMesh(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tconst nodeDefs = jsonDoc.json.nodes || [];\n\t\tnodeDefs.forEach((nodeDef, nodeIndex) => {\n\t\t\tif (!nodeDef.extensions || !nodeDef.extensions[NAME]) return;\n\n\t\t\tconst instancedMeshDef = nodeDef.extensions[NAME] as InstancedMeshDef;\n\t\t\tconst instancedMesh = this.createInstancedMesh();\n\n\t\t\tfor (const semantic in instancedMeshDef.attributes) {\n\t\t\t\tinstancedMesh.setAttribute(semantic, context.accessors[instancedMeshDef.attributes[semantic]]);\n\t\t\t}\n\n\t\t\tcontext.nodes[nodeIndex].setExtension(NAME, instancedMesh);\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic prewrite(context: WriterContext): this {\n\t\t// Set usage for instance attribute accessors, so they are stored in separate buffer\n\t\t// views grouped by parent reference.\n\t\tcontext.accessorUsageGroupedByParent.add(INSTANCE_ATTRIBUTE);\n\t\tfor (const prop of this.properties) {\n\t\t\tfor (const attribute of (prop as InstancedMesh).listAttributes()) {\n\t\t\t\tcontext.addAccessorToUsageGroup(attribute, INSTANCE_ATTRIBUTE);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listNodes()\n\t\t\t.forEach((node) => {\n\t\t\t\tconst instancedMesh = node.getExtension<InstancedMesh>(NAME);\n\t\t\t\tif (instancedMesh) {\n\t\t\t\t\tconst nodeIndex = context.nodeIndexMap.get(node)!;\n\t\t\t\t\tconst nodeDef = jsonDoc.json.nodes![nodeIndex];\n\n\t\t\t\t\tconst instancedMeshDef = { attributes: {} } as InstancedMeshDef;\n\n\t\t\t\t\tinstancedMesh.listSemantics().forEach((semantic) => {\n\t\t\t\t\t\tconst attribute = instancedMesh.getAttribute(semantic)!;\n\t\t\t\t\t\tinstancedMeshDef.attributes[semantic] = context.accessorIndexMap.get(attribute)!;\n\t\t\t\t\t});\n\n\t\t\t\t\tnodeDef.extensions = nodeDef.extensions || {};\n\t\t\t\t\tnodeDef.extensions[NAME] = instancedMeshDef;\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import type { GLTF, TypedArray } from '@gltf-transform/core';\n\nexport enum EncoderMethod {\n\tQUANTIZE = 'quantize',\n\tFILTER = 'filter',\n}\n\nexport interface MeshoptBufferExtension {\n\tfallback?: boolean;\n}\n\nexport enum MeshoptMode {\n\tATTRIBUTES = 'ATTRIBUTES',\n\tTRIANGLES = 'TRIANGLES',\n\tINDICES = 'INDICES',\n}\n\nexport enum MeshoptFilter {\n\t/** No filter — quantize only. */\n\tNONE = 'NONE',\n\t/** Four 8- or 16-bit normalized values. */\n\tOCTAHEDRAL = 'OCTAHEDRAL',\n\t/** Four 16-bit normalized values. */\n\tQUATERNION = 'QUATERNION',\n\t/** K single-precision floating point values. */\n\tEXPONENTIAL = 'EXPONENTIAL',\n}\n\nexport interface MeshoptBufferViewExtension {\n\tbuffer: number;\n\tbyteOffset: number;\n\tbyteLength: number;\n\tbyteStride: number;\n\tcount: number;\n\tmode: MeshoptMode;\n\tfilter?: MeshoptFilter;\n}\n\n/**\n * When using filters, the accessor definition written to the file will not necessarily have the\n * same properties as the input accessor. For example, octahedral encoding requires int8 or int16\n * output, so float32 input must be ignored.\n */\nexport interface PreparedAccessor {\n\tarray: TypedArray;\n\tbyteStride: number;\n\tnormalized: boolean;\n\tcomponentType: GLTF.AccessorComponentType;\n\tmin?: number[];\n\tmax?: number[];\n}\n","import { PreparedAccessor, MeshoptFilter, MeshoptMode } from './constants.js';\nimport {\n\tAccessor,\n\tAnimationChannel,\n\tAnimationSampler,\n\tBufferUtils,\n\tDocument,\n\tGLTF,\n\tMathUtils,\n\tPrimitive,\n\tPropertyType,\n\tRoot,\n\tTypedArray,\n\tTypedArrayConstructor,\n\tWriterContext,\n} from '@gltf-transform/core';\nimport type { MeshoptEncoder } from 'meshoptimizer';\n\nconst { BYTE, SHORT, FLOAT } = Accessor.ComponentType;\nconst { encodeNormalizedInt, decodeNormalizedInt } = MathUtils;\n\n/** Pre-processes array with required filters or padding. */\nexport function prepareAccessor(\n\taccessor: Accessor,\n\tencoder: typeof MeshoptEncoder,\n\tmode: MeshoptMode,\n\tfilterOptions: { filter: MeshoptFilter; bits?: number },\n): PreparedAccessor {\n\tconst { filter, bits } = filterOptions as { filter: MeshoptFilter; bits: number };\n\tconst result: PreparedAccessor = {\n\t\tarray: accessor.getArray()!,\n\t\tbyteStride: accessor.getElementSize() * accessor.getComponentSize(),\n\t\tcomponentType: accessor.getComponentType(),\n\t\tnormalized: accessor.getNormalized(),\n\t};\n\n\tif (mode !== MeshoptMode.ATTRIBUTES) return result;\n\n\tif (filter !== MeshoptFilter.NONE) {\n\t\tlet array = accessor.getNormalized() ? decodeNormalizedIntArray(accessor) : new Float32Array(result.array);\n\n\t\tswitch (filter) {\n\t\t\tcase MeshoptFilter.EXPONENTIAL: // → K single-precision floating point values.\n\t\t\t\tresult.byteStride = accessor.getElementSize() * 4;\n\t\t\t\tresult.componentType = FLOAT;\n\t\t\t\tresult.normalized = false;\n\t\t\t\tresult.array = encoder.encodeFilterExp(array, accessor.getCount(), result.byteStride, bits);\n\t\t\t\tbreak;\n\n\t\t\tcase MeshoptFilter.OCTAHEDRAL: // → four 8- or 16-bit normalized values.\n\t\t\t\tresult.byteStride = bits > 8 ? 8 : 4;\n\t\t\t\tresult.componentType = bits > 8 ? SHORT : BYTE;\n\t\t\t\tresult.normalized = true;\n\t\t\t\tarray = accessor.getElementSize() === 3 ? padNormals(array) : array;\n\t\t\t\tresult.array = encoder.encodeFilterOct(array, accessor.getCount(), result.byteStride, bits);\n\t\t\t\tbreak;\n\n\t\t\tcase MeshoptFilter.QUATERNION: // → four 16-bit normalized values.\n\t\t\t\tresult.byteStride = 8;\n\t\t\t\tresult.componentType = SHORT;\n\t\t\t\tresult.normalized = true;\n\t\t\t\tresult.array = encoder.encodeFilterQuat(array, accessor.getCount(), result.byteStride, bits);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid filter.');\n\t\t}\n\n\t\tresult.min = accessor.getMin([]);\n\t\tresult.max = accessor.getMax([]);\n\t\tif (accessor.getNormalized()) {\n\t\t\tresult.min = result.min.map((v) => decodeNormalizedInt(v, accessor.getComponentType()));\n\t\t\tresult.max = result.max.map((v) => decodeNormalizedInt(v, accessor.getComponentType()));\n\t\t}\n\t\tif (result.normalized) {\n\t\t\tresult.min = result.min.map((v) => encodeNormalizedInt(v, result.componentType));\n\t\t\tresult.max = result.max.map((v) => encodeNormalizedInt(v, result.componentType));\n\t\t}\n\t} else if (result.byteStride % 4) {\n\t\tresult.array = padArrayElements(result.array, accessor.getElementSize());\n\t\tresult.byteStride = result.array.byteLength / accessor.getCount();\n\t}\n\n\treturn result;\n}\n\nfunction decodeNormalizedIntArray(attribute: Accessor): Float32Array {\n\tconst componentType = attribute.getComponentType();\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = new Float32Array(srcArray.length);\n\tfor (let i = 0; i < srcArray.length; i++) {\n\t\tdstArray[i] = decodeNormalizedInt(srcArray[i], componentType);\n\t}\n\treturn dstArray;\n}\n\n/** Pads array to 4 byte alignment, required for Meshopt ATTRIBUTE buffer views. */\nexport function padArrayElements<T extends TypedArray>(srcArray: T, elementSize: number): T {\n\tconst byteStride = BufferUtils.padNumber(srcArray.BYTES_PER_ELEMENT * elementSize);\n\tconst elementStride = byteStride / srcArray.BYTES_PER_ELEMENT;\n\tconst elementCount = srcArray.length / elementSize;\n\n\tconst dstArray = new (srcArray.constructor as TypedArrayConstructor)(elementCount * elementStride) as T;\n\n\tfor (let i = 0; i * elementSize < srcArray.length; i++) {\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tdstArray[i * elementStride + j] = srcArray[i * elementSize + j];\n\t\t}\n\t}\n\n\treturn dstArray;\n}\n\n/** Pad normals with a .w component for octahedral encoding. */\nfunction padNormals(srcArray: Float32Array): Float32Array {\n\tconst dstArray = new Float32Array((srcArray.length * 4) / 3);\n\tfor (let i = 0, il = srcArray.length / 3; i < il; i++) {\n\t\tdstArray[i * 4] = srcArray[i * 3];\n\t\tdstArray[i * 4 + 1] = srcArray[i * 3 + 1];\n\t\tdstArray[i * 4 + 2] = srcArray[i * 3 + 2];\n\t}\n\treturn dstArray;\n}\n\nexport function getMeshoptMode(accessor: Accessor, usage: string): MeshoptMode {\n\tif (usage === WriterContext.BufferViewUsage.ELEMENT_ARRAY_BUFFER) {\n\t\tconst isTriangles = accessor.listParents().some((parent) => {\n\t\t\treturn parent instanceof Primitive && parent.getMode() === Primitive.Mode.TRIANGLES;\n\t\t});\n\t\treturn isTriangles ? MeshoptMode.TRIANGLES : MeshoptMode.INDICES;\n\t}\n\n\treturn MeshoptMode.ATTRIBUTES;\n}\n\nexport function getMeshoptFilter(accessor: Accessor, doc: Document): { filter: MeshoptFilter; bits?: number } {\n\tconst refs = doc\n\t\t.getGraph()\n\t\t.listParentEdges(accessor)\n\t\t.filter((edge) => !(edge.getParent() instanceof Root));\n\n\tfor (const ref of refs) {\n\t\tconst refName = ref.getName();\n\t\tconst refKey = (ref.getAttributes().key || '') as string;\n\t\tconst isDelta = ref.getParent().propertyType === PropertyType.PRIMITIVE_TARGET;\n\n\t\t// Indices.\n\t\tif (refName === 'indices') return { filter: MeshoptFilter.NONE };\n\n\t\t// Attributes.\n\t\t//\n\t\t// NOTES:\n\t\t// - Vertex attributes should be filtered IFF they are _not_ quantized in\n\t\t//   'packages/cli/src/transforms/meshopt.ts'.\n\t\t// - POSITION and TEXCOORD_0 could use exponential filtering, but this produces broken\n\t\t//   output in some cases (e.g. Matilda.glb), for unknown reasons. gltfpack uses manual\n\t\t//   quantization for these attributes.\n\t\t// - NORMAL and TANGENT attributes use Octahedral filters, but deltas in morphs do not.\n\t\t// - When specifying bit depth for vertex attributes, check the defaults in `quantize.ts`\n\t\t//\t and overrides in `meshopt.ts`. Don't store deltas at higher precision than base.\n\t\tif (refName === 'attributes') {\n\t\t\tif (refKey === 'POSITION') return { filter: MeshoptFilter.NONE };\n\t\t\tif (refKey === 'TEXCOORD_0') return { filter: MeshoptFilter.NONE };\n\t\t\tif (refKey.startsWith('JOINTS_')) return { filter: MeshoptFilter.NONE };\n\t\t\tif (refKey.startsWith('WEIGHTS_')) return { filter: MeshoptFilter.NONE };\n\t\t\tif (refKey === 'NORMAL' || refKey === 'TANGENT') {\n\t\t\t\treturn isDelta ? { filter: MeshoptFilter.NONE } : { filter: MeshoptFilter.OCTAHEDRAL, bits: 8 };\n\t\t\t}\n\t\t}\n\n\t\t// Animation.\n\t\tif (refName === 'output') {\n\t\t\tconst targetPath = getTargetPath(accessor);\n\t\t\tif (targetPath === 'rotation') return { filter: MeshoptFilter.QUATERNION, bits: 16 };\n\t\t\tif (targetPath === 'translation') return { filter: MeshoptFilter.EXPONENTIAL, bits: 12 };\n\t\t\tif (targetPath === 'scale') return { filter: MeshoptFilter.EXPONENTIAL, bits: 12 };\n\t\t\treturn { filter: MeshoptFilter.NONE };\n\t\t}\n\n\t\t// See: https://github.com/donmccurdy/glTF-Transform/issues/489\n\t\tif (refName === 'input') return { filter: MeshoptFilter.NONE };\n\n\t\tif (refName === 'inverseBindMatrices') return { filter: MeshoptFilter.NONE };\n\t}\n\n\treturn { filter: MeshoptFilter.NONE };\n}\n\nexport function getTargetPath(accessor: Accessor): GLTF.AnimationChannelTargetPath | null {\n\tfor (const sampler of accessor.listParents()) {\n\t\tif (!(sampler instanceof AnimationSampler)) continue;\n\t\tfor (const channel of sampler.listParents()) {\n\t\t\tif (!(channel instanceof AnimationChannel)) continue;\n\t\t\treturn channel.getTargetPath();\n\t\t}\n\t}\n\treturn null;\n}\n","import {\n\tAccessor,\n\tBuffer,\n\tBufferUtils,\n\tExtension,\n\tGLB_BUFFER,\n\tGLTF,\n\tPropertyType,\n\tReaderContext,\n\tWriterContext,\n} from '@gltf-transform/core';\nimport { EncoderMethod, MeshoptBufferViewExtension, MeshoptFilter } from './constants.js';\nimport { EXT_MESHOPT_COMPRESSION } from '../constants.js';\nimport { getMeshoptFilter, getMeshoptMode, getTargetPath, prepareAccessor } from './encoder.js';\nimport { isFallbackBuffer } from './decoder.js';\nimport type { MeshoptEncoder, MeshoptDecoder } from 'meshoptimizer';\n\nconst NAME = EXT_MESHOPT_COMPRESSION;\n\ninterface EncoderOptions {\n\tmethod?: EncoderMethod;\n}\n\nconst DEFAULT_ENCODER_OPTIONS: Required<EncoderOptions> = {\n\tmethod: EncoderMethod.QUANTIZE,\n};\n\ntype MeshoptBufferView = { extensions: { [NAME]: MeshoptBufferViewExtension } };\ntype EncodedBufferView = GLTF.IBufferView & MeshoptBufferView;\n\n/**\n * [`EXT_meshopt_compression`](https://github.com/KhronosGroup/gltf/blob/main/extensions/2.0/Vendor/EXT_meshopt_compression/)\n * provides compression and fast decoding for geometry, morph targets, and animations.\n *\n * Meshopt compression (based on the [meshoptimizer](https://github.com/zeux/meshoptimizer)\n * library) offers a lightweight decoder with very fast runtime decompression, and is\n * appropriate for models of any size. Meshopt can reduce the transmission sizes of geometry,\n * morph targets, animation, and other numeric data stored in buffer views. When textures are\n * large, other complementary compression methods should be used as well.\n *\n * For the full benefits of meshopt compression, **apply gzip, brotli, or another lossless\n * compression method** to the resulting .glb, .gltf, or .bin files. Meshopt specifically\n * pre-optimizes assets for this purpose — without this secondary compression, the size\n * reduction is considerably less.\n *\n * Be aware that decompression happens before uploading to the GPU. While Meshopt decoding is\n * considerably faster than Draco decoding, neither compression method will improve runtime\n * performance directly. To improve framerate, you'll need to simplify the geometry by reducing\n * vertex count or draw calls — not just compress it. Finally, be aware that Meshopt compression is\n * lossy: repeatedly compressing and decompressing a model in a pipeline will lose precision, so\n * compression should generally be the last stage of an art workflow, and uncompressed original\n * files should be kept.\n *\n * The meshoptimizer library ([github](https://github.com/zeux/meshoptimizer/tree/master/js),\n * [npm](https://www.npmjs.com/package/meshoptimizer)) is a required dependency for reading or\n * writing files, and must be provided by the application. Compression may alternatively be applied\n * with the [gltfpack](https://github.com/zeux/meshoptimizer/tree/master/gltf) tool.\n *\n * ### Example\n *\n * ```typescript\n * import { NodeIO } from '@gltf-transform/core';\n * import { reorder, quantize } from '@gltf-transform/functions';\n * import { EXTMeshoptCompression } from '@gltf-transform/extensions';\n * import { MeshoptDecoder, MeshoptEncoder } from 'meshoptimizer';\n *\n * await MeshoptDecoder.ready;\n * await MeshoptEncoder.ready;\n *\n * const io = new NodeIO()\n *\t.registerExtensions([EXTMeshoptCompression])\n *\t.registerDependencies({\n *\t\t'meshopt.decoder': MeshoptDecoder,\n *\t\t'meshopt.encoder': MeshoptEncoder,\n *\t});\n *\n * // Read and decode.\n * const document = await io.read('compressed.glb');\n *\n * // Write and encode. (Medium, -c)\n * await document.transform(\n * \treorder({encoder: MeshoptEncoder}),\n * \tquantize()\n * );\n * document.createExtension(EXTMeshoptCompression)\n * \t.setRequired(true)\n * \t.setEncoderOptions({ method: EXTMeshoptCompression.EncoderMethod.QUANTIZE });\n * await io.write('compressed-medium.glb', document);\n *\n * // Write and encode. (High, -cc)\n * await document.transform(\n * \treorder({encoder: MeshoptEncoder}),\n * \tquantize({pattern: /^(POSITION|TEXCOORD|JOINTS|WEIGHTS)(_\\d+)?$/}),\n * );\n * document.createExtension(EXTMeshoptCompression)\n * \t.setRequired(true)\n * \t.setEncoderOptions({ method: EXTMeshoptCompression.EncoderMethod.FILTER });\n * await io.write('compressed-high.glb', document);\n * ```\n */\nexport class EXTMeshoptCompression extends Extension {\n\tpublic readonly extensionName = NAME;\n\t/** @hidden */\n\tpublic readonly prereadTypes = [PropertyType.BUFFER, PropertyType.PRIMITIVE];\n\t/** @hidden */\n\tpublic readonly prewriteTypes = [PropertyType.BUFFER, PropertyType.ACCESSOR];\n\t/** @hidden */\n\tpublic readonly readDependencies = ['meshopt.decoder'];\n\t/** @hidden */\n\tpublic readonly writeDependencies = ['meshopt.encoder'];\n\n\tpublic static readonly EXTENSION_NAME = NAME;\n\tpublic static readonly EncoderMethod = EncoderMethod;\n\n\tprivate _decoder: typeof MeshoptDecoder | null = null;\n\tprivate _decoderFallbackBufferMap = new Map<Buffer, Buffer>();\n\tprivate _encoder: typeof MeshoptEncoder | null = null;\n\tprivate _encoderOptions: Required<EncoderOptions> = DEFAULT_ENCODER_OPTIONS;\n\tprivate _encoderFallbackBuffer: Buffer | null = null;\n\tprivate _encoderBufferViews: { [key: string]: EncodedBufferView } = {};\n\tprivate _encoderBufferViewData: { [key: string]: Uint8Array[] } = {};\n\tprivate _encoderBufferViewAccessors: { [key: string]: GLTF.IAccessor[] } = {};\n\n\t/** @hidden */\n\tpublic install(key: string, dependency: unknown): this {\n\t\tif (key === 'meshopt.decoder') {\n\t\t\tthis._decoder = dependency as typeof MeshoptDecoder;\n\t\t}\n\t\tif (key === 'meshopt.encoder') {\n\t\t\tthis._encoder = dependency as typeof MeshoptEncoder;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Configures Meshopt options for quality/compression tuning. The two methods rely on different\n\t * pre-processing before compression, and should be compared on the basis of (a) quality/loss\n\t * and (b) final asset size after _also_ applying a lossless compression such as gzip or brotli.\n\t *\n\t * - QUANTIZE: Default. Pre-process with {@link quantize quantize()} (lossy to specified\n\t * \tprecision) before applying lossless Meshopt compression. Offers a considerable compression\n\t * \tratio with or without further supercompression. Equivalent to `gltfpack -c`.\n\t * - FILTER: Pre-process with lossy filters to improve compression, before applying lossless\n\t *\tMeshopt compression. While output may initially be larger than with the QUANTIZE method,\n\t *\tthis method will benefit more from supercompression (e.g. gzip or brotli). Equivalent to\n\t * \t`gltfpack -cc`.\n\t *\n\t * Output with the FILTER method will generally be smaller after supercompression (e.g. gzip or\n\t * brotli) is applied, but may be larger than QUANTIZE output without it. Decoding is very fast\n\t * with both methods.\n\t *\n\t * Example:\n\t *\n\t * ```ts\n\t * import { EXTMeshoptCompression } from '@gltf-transform/extensions';\n\t *\n\t * doc.createExtension(EXTMeshoptCompression)\n\t * \t.setRequired(true)\n\t * \t.setEncoderOptions({\n\t * \t\tmethod: EXTMeshoptCompression.EncoderMethod.QUANTIZE\n\t * \t});\n\t * ```\n\t */\n\tpublic setEncoderOptions(options: EncoderOptions): this {\n\t\tthis._encoderOptions = { ...DEFAULT_ENCODER_OPTIONS, ...options };\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Decoding.\n\t */\n\n\t/** @internal Checks preconditions, decodes buffer views, and creates decoded primitives. */\n\tpublic preread(context: ReaderContext, propertyType: PropertyType): this {\n\t\tif (!this._decoder) {\n\t\t\tif (!this.isRequired()) return this;\n\t\t\tthrow new Error(`[${NAME}] Please install extension dependency, \"meshopt.decoder\".`);\n\t\t}\n\t\tif (!this._decoder.supported) {\n\t\t\tif (!this.isRequired()) return this;\n\t\t\tthrow new Error(`[${NAME}]: Missing WASM support.`);\n\t\t}\n\n\t\tif (propertyType === PropertyType.BUFFER) {\n\t\t\tthis._prereadBuffers(context);\n\t\t} else if (propertyType === PropertyType.PRIMITIVE) {\n\t\t\tthis._prereadPrimitives(context);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/** @internal Decode buffer views. */\n\tprivate _prereadBuffers(context: ReaderContext): void {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tconst viewDefs = jsonDoc.json.bufferViews || [];\n\t\tviewDefs.forEach((viewDef, index) => {\n\t\t\tif (!viewDef.extensions || !viewDef.extensions[NAME]) return;\n\n\t\t\tconst meshoptDef = viewDef.extensions[NAME] as MeshoptBufferViewExtension;\n\t\t\tconst byteOffset = meshoptDef.byteOffset || 0;\n\t\t\tconst byteLength = meshoptDef.byteLength || 0;\n\t\t\tconst count = meshoptDef.count;\n\t\t\tconst stride = meshoptDef.byteStride;\n\t\t\tconst result = new Uint8Array(count * stride);\n\n\t\t\tconst bufferDef = jsonDoc.json.buffers![meshoptDef.buffer];\n\t\t\t// TODO(cleanup): Should be encapsulated in writer-context.ts.\n\t\t\tconst resource = bufferDef.uri ? jsonDoc.resources[bufferDef.uri] : jsonDoc.resources[GLB_BUFFER];\n\t\t\tconst source = BufferUtils.toView(resource, byteOffset, byteLength);\n\n\t\t\tthis._decoder!.decodeGltfBuffer(result, count, stride, source, meshoptDef.mode, meshoptDef.filter);\n\n\t\t\tcontext.bufferViews[index] = result;\n\t\t});\n\t}\n\n\t/**\n\t * Mark fallback buffers and replacements.\n\t *\n\t * Note: Alignment with primitives is arbitrary; this just needs to happen\n\t * after Buffers have been parsed.\n\t * @internal\n\t */\n\tprivate _prereadPrimitives(context: ReaderContext): void {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst viewDefs = jsonDoc.json.bufferViews || [];\n\n\t\t//\n\t\tviewDefs.forEach((viewDef) => {\n\t\t\tif (!viewDef.extensions || !viewDef.extensions[NAME]) return;\n\n\t\t\tconst meshoptDef = viewDef.extensions[NAME] as MeshoptBufferViewExtension;\n\n\t\t\tconst buffer = context.buffers[meshoptDef.buffer];\n\t\t\tconst fallbackBuffer = context.buffers[viewDef.buffer];\n\t\t\tconst fallbackBufferDef = jsonDoc.json.buffers![viewDef.buffer];\n\t\t\tif (isFallbackBuffer(fallbackBufferDef)) {\n\t\t\t\tthis._decoderFallbackBufferMap.set(fallbackBuffer, buffer);\n\t\t\t}\n\t\t});\n\t}\n\n\t/** @hidden Removes Fallback buffers, if extension is required. */\n\tpublic read(_context: ReaderContext): this {\n\t\tif (!this.isRequired()) return this;\n\n\t\t// Replace fallback buffers.\n\t\tfor (const [fallbackBuffer, buffer] of this._decoderFallbackBufferMap) {\n\t\t\tfor (const parent of fallbackBuffer.listParents()) {\n\t\t\t\tif (parent instanceof Accessor) {\n\t\t\t\t\tparent.swap(fallbackBuffer, buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfallbackBuffer.dispose();\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Encoding.\n\t */\n\n\t/** @internal Claims accessors that can be compressed and writes compressed buffer views. */\n\tpublic prewrite(context: WriterContext, propertyType: PropertyType): this {\n\t\tif (propertyType === PropertyType.ACCESSOR) {\n\t\t\tthis._prewriteAccessors(context);\n\t\t} else if (propertyType === PropertyType.BUFFER) {\n\t\t\tthis._prewriteBuffers(context);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/** @internal Claims accessors that can be compressed. */\n\tprivate _prewriteAccessors(context: WriterContext): void {\n\t\tconst json = context.jsonDoc.json;\n\t\tconst encoder = this._encoder!;\n\t\tconst options = this._encoderOptions;\n\n\t\tconst fallbackBuffer = this.document.createBuffer(); // Disposed on write.\n\t\tconst fallbackBufferIndex = this.document.getRoot().listBuffers().indexOf(fallbackBuffer);\n\n\t\tthis._encoderFallbackBuffer = fallbackBuffer;\n\t\tthis._encoderBufferViews = {};\n\t\tthis._encoderBufferViewData = {};\n\t\tthis._encoderBufferViewAccessors = {};\n\n\t\tfor (const accessor of this.document.getRoot().listAccessors()) {\n\t\t\t// See: https://github.com/donmccurdy/glTF-Transform/pull/323#issuecomment-898791251\n\t\t\t// Example: https://skfb.ly/6qAD8\n\t\t\tif (getTargetPath(accessor) === 'weights') continue;\n\n\t\t\t// See: https://github.com/donmccurdy/glTF-Transform/issues/289\n\t\t\tif (accessor.getSparse()) continue;\n\n\t\t\tconst usage = context.getAccessorUsage(accessor);\n\t\t\tconst mode = getMeshoptMode(accessor, usage);\n\t\t\tconst filter =\n\t\t\t\toptions.method === EncoderMethod.FILTER\n\t\t\t\t\t? getMeshoptFilter(accessor, this.document)\n\t\t\t\t\t: { filter: MeshoptFilter.NONE };\n\t\t\tconst preparedAccessor = prepareAccessor(accessor, encoder, mode, filter);\n\t\t\tconst { array, byteStride } = preparedAccessor;\n\n\t\t\tconst buffer = accessor.getBuffer();\n\t\t\tif (!buffer) throw new Error(`${NAME}: Missing buffer for accessor.`);\n\t\t\tconst bufferIndex = this.document.getRoot().listBuffers().indexOf(buffer);\n\n\t\t\t// Buffer view grouping key.\n\t\t\tconst key = [usage, mode, filter.filter, byteStride, bufferIndex].join(':');\n\n\t\t\tlet bufferView = this._encoderBufferViews[key];\n\t\t\tlet bufferViewData = this._encoderBufferViewData[key];\n\t\t\tlet bufferViewAccessors = this._encoderBufferViewAccessors[key];\n\n\t\t\t// Write new buffer view, if needed.\n\t\t\tif (!bufferView || !bufferViewData) {\n\t\t\t\tbufferViewAccessors = this._encoderBufferViewAccessors[key] = [];\n\t\t\t\tbufferViewData = this._encoderBufferViewData[key] = [];\n\t\t\t\tbufferView = this._encoderBufferViews[key] = {\n\t\t\t\t\tbuffer: fallbackBufferIndex,\n\t\t\t\t\ttarget: WriterContext.USAGE_TO_TARGET[usage],\n\t\t\t\t\tbyteOffset: 0,\n\t\t\t\t\tbyteLength: 0,\n\t\t\t\t\tbyteStride: usage === WriterContext.BufferViewUsage.ARRAY_BUFFER ? byteStride : undefined,\n\t\t\t\t\textensions: {\n\t\t\t\t\t\t[NAME]: {\n\t\t\t\t\t\t\tbuffer: bufferIndex,\n\t\t\t\t\t\t\tbyteOffset: 0,\n\t\t\t\t\t\t\tbyteLength: 0,\n\t\t\t\t\t\t\tmode: mode,\n\t\t\t\t\t\t\tfilter: filter.filter !== MeshoptFilter.NONE ? filter.filter : undefined,\n\t\t\t\t\t\t\tbyteStride: byteStride,\n\t\t\t\t\t\t\tcount: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Write accessor.\n\t\t\tconst accessorDef = context.createAccessorDef(accessor);\n\t\t\taccessorDef.componentType = preparedAccessor.componentType;\n\t\t\taccessorDef.normalized = preparedAccessor.normalized;\n\t\t\taccessorDef.byteOffset = bufferView.byteLength;\n\t\t\tif (accessorDef.min && preparedAccessor.min) accessorDef.min = preparedAccessor.min;\n\t\t\tif (accessorDef.max && preparedAccessor.max) accessorDef.max = preparedAccessor.max;\n\t\t\tcontext.accessorIndexMap.set(accessor, json.accessors!.length);\n\t\t\tjson.accessors!.push(accessorDef);\n\t\t\tbufferViewAccessors.push(accessorDef);\n\n\t\t\t// Update buffer view.\n\t\t\tbufferViewData.push(new Uint8Array(array.buffer, array.byteOffset, array.byteLength));\n\t\t\tbufferView.byteLength += array.byteLength;\n\t\t\tbufferView.extensions.EXT_meshopt_compression.count += accessor.getCount();\n\t\t}\n\t}\n\n\t/** @internal Writes compressed buffer views. */\n\tprivate _prewriteBuffers(context: WriterContext): void {\n\t\tconst encoder = this._encoder!;\n\n\t\tfor (const key in this._encoderBufferViews) {\n\t\t\tconst bufferView = this._encoderBufferViews[key];\n\t\t\tconst bufferViewData = this._encoderBufferViewData[key];\n\t\t\tconst buffer = this.document.getRoot().listBuffers()[bufferView.extensions[NAME].buffer];\n\t\t\tconst otherBufferViews = context.otherBufferViews.get(buffer) || [];\n\n\t\t\tconst { count, byteStride, mode } = bufferView.extensions[NAME];\n\t\t\tconst srcArray = BufferUtils.concat(bufferViewData);\n\t\t\tconst dstArray = encoder.encodeGltfBuffer(srcArray, count, byteStride, mode);\n\t\t\tconst compressedData = BufferUtils.pad(dstArray);\n\n\t\t\tbufferView.extensions[NAME].byteLength = dstArray.byteLength;\n\n\t\t\tbufferViewData.length = 0;\n\t\t\tbufferViewData.push(compressedData);\n\t\t\totherBufferViews.push(compressedData);\n\t\t\tcontext.otherBufferViews.set(buffer, otherBufferViews);\n\t\t}\n\t}\n\n\t/** @hidden Puts encoded data into glTF output. */\n\tpublic write(context: WriterContext): this {\n\t\tlet fallbackBufferByteOffset = 0;\n\n\t\t// Write final encoded buffer view properties.\n\t\tfor (const key in this._encoderBufferViews) {\n\t\t\tconst bufferView = this._encoderBufferViews[key];\n\t\t\tconst bufferViewData = this._encoderBufferViewData[key][0];\n\t\t\tconst bufferViewIndex = context.otherBufferViewsIndexMap.get(bufferViewData)!;\n\n\t\t\tconst bufferViewAccessors = this._encoderBufferViewAccessors[key];\n\t\t\tfor (const accessorDef of bufferViewAccessors) {\n\t\t\t\taccessorDef.bufferView = bufferViewIndex;\n\t\t\t}\n\n\t\t\tconst finalBufferViewDef = context.jsonDoc.json.bufferViews![bufferViewIndex];\n\t\t\tconst compressedByteOffset = finalBufferViewDef.byteOffset || 0;\n\n\t\t\tObject.assign(finalBufferViewDef, bufferView);\n\t\t\tfinalBufferViewDef.byteOffset = fallbackBufferByteOffset;\n\t\t\tconst bufferViewExtensionDef = finalBufferViewDef.extensions![NAME] as MeshoptBufferViewExtension;\n\t\t\tbufferViewExtensionDef.byteOffset = compressedByteOffset;\n\n\t\t\tfallbackBufferByteOffset += BufferUtils.padNumber(bufferView.byteLength);\n\t\t}\n\n\t\t// Write final fallback buffer.\n\t\tconst fallbackBuffer = this._encoderFallbackBuffer!;\n\t\tconst fallbackBufferIndex = context.bufferIndexMap.get(fallbackBuffer)!;\n\t\tconst fallbackBufferDef = context.jsonDoc.json.buffers![fallbackBufferIndex];\n\t\tfallbackBufferDef.byteLength = fallbackBufferByteOffset;\n\t\tfallbackBufferDef.extensions = { [NAME]: { fallback: true } };\n\t\tfallbackBuffer.dispose();\n\n\t\treturn this;\n\t}\n}\n","import { EXT_MESHOPT_COMPRESSION } from '../constants.js';\nimport type { GLTF } from '@gltf-transform/core';\nimport type { MeshoptBufferExtension } from './constants.js';\n\n/**\n * Returns true for a fallback buffer, else false.\n *\n *   - All references to the fallback buffer must come from bufferViews that\n *     have a EXT_meshopt_compression extension specified.\n *   - No references to the fallback buffer may come from\n *     EXT_meshopt_compression extension JSON.\n */\nexport function isFallbackBuffer(bufferDef: GLTF.IBuffer): boolean {\n\tif (!bufferDef.extensions || !bufferDef.extensions[EXT_MESHOPT_COMPRESSION]) return false;\n\tconst fallbackDef = bufferDef.extensions[EXT_MESHOPT_COMPRESSION] as MeshoptBufferExtension;\n\treturn !!fallbackDef.fallback;\n}\n","import {\n\tExtension,\n\tImageUtils,\n\tImageUtilsFormat,\n\tPropertyType,\n\tReaderContext,\n\tWriterContext,\n\tvec2,\n\tBufferUtils,\n} from '@gltf-transform/core';\nimport { EXT_TEXTURE_AVIF } from '../constants.js';\n\nconst NAME = EXT_TEXTURE_AVIF;\n\nclass AVIFImageUtils implements ImageUtilsFormat {\n\tmatch(array: Uint8Array): boolean {\n\t\treturn array.length >= 12 && BufferUtils.decodeText(array.slice(4, 12)) === 'ftypavif';\n\t}\n\t/**\n\t * Probes size of AVIF or HEIC image. Assumes a single static image, without\n\t * orientation or other metadata that would affect dimensions.\n\t */\n\tgetSize(array: Uint8Array): vec2 | null {\n\t\tif (!this.match(array)) return null;\n\n\t\t// References:\n\t\t// - https://stackoverflow.com/questions/66222773/how-to-get-image-dimensions-from-an-avif-file\n\t\t// - https://github.com/nodeca/probe-image-size/blob/master/lib/parse_sync/avif.js\n\n\t\tconst view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n\n\t\tlet box = unbox(view, 0);\n\t\tif (!box) return null;\n\n\t\tlet offset = box.end;\n\t\twhile ((box = unbox(view, offset))) {\n\t\t\tif (box.type === 'meta') {\n\t\t\t\toffset = box.start + 4; // version + flags\n\t\t\t} else if (box.type === 'iprp' || box.type === 'ipco') {\n\t\t\t\toffset = box.start;\n\t\t\t} else if (box.type === 'ispe') {\n\t\t\t\treturn [view.getUint32(box.start + 4), view.getUint32(box.start + 8)];\n\t\t\t} else if (box.type === 'mdat') {\n\t\t\t\tbreak; // mdat should be last, unlikely to find metadata past here.\n\t\t\t} else {\n\t\t\t\toffset = box.end;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\tgetChannels(_buffer: Uint8Array): number {\n\t\treturn 4;\n\t}\n}\n\n/**\n * [`EXT_texture_avif`](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_texture_avif/)\n * enables AVIF images for any material texture.\n *\n * AVIF offers greatly reduced transmission size, but\n * [requires browser support](https://caniuse.com/avif). Like PNG and JPEG, an AVIF image is\n * *fully decompressed* when uploaded to the GPU, which increases upload time and GPU memory cost.\n * For seamless uploads and minimal GPU memory cost, it is necessary to use a GPU texture format\n * like Basis Universal, with the `KHR_texture_basisu` extension.\n *\n * Defining no {@link ExtensionProperty} types, this {@link Extension} is simply attached to the\n * {@link Document}, and affects the entire Document by allowing use of the `image/avif` MIME type\n * and passing AVIF image data to the {@link Texture.setImage} method. Without the Extension, the\n * same MIME types and image data would yield an invalid glTF document, under the stricter core glTF\n * specification.\n *\n * Properties:\n * - N/A\n *\n * ### Example\n *\n * ```typescript\n * import { TextureAVIF } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const avifExtension = document.createExtension(TextureAVIF)\n * \t.setRequired(true);\n * document.createTexture('MyAVIFTexture')\n * \t.setMimeType('image/avif')\n * \t.setImage(fs.readFileSync('my-texture.avif'));\n * ```\n *\n * AVIF conversion is not done automatically when adding the extension as shown above — you must\n * convert the image data first, then pass the `.avif` payload to {@link Texture.setImage}.\n *\n * When the `EXT_texture_avif` extension is added to a file by glTF-Transform, the extension should\n * always be required. This tool does not support writing assets that \"fall back\" to optional PNG or\n * JPEG image data.\n */\nexport class EXTTextureAVIF extends Extension {\n\tpublic readonly extensionName = NAME;\n\t/** @hidden */\n\tpublic readonly prereadTypes = [PropertyType.TEXTURE];\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** @hidden */\n\tpublic static register(): void {\n\t\tImageUtils.registerFormat('image/avif', new AVIFImageUtils());\n\t}\n\n\t/** @hidden */\n\tpublic preread(context: ReaderContext): this {\n\t\tconst textureDefs = context.jsonDoc.json.textures || [];\n\t\ttextureDefs.forEach((textureDef) => {\n\t\t\tif (textureDef.extensions && textureDef.extensions[NAME]) {\n\t\t\t\ttextureDef.source = (textureDef.extensions[NAME] as { source: number }).source;\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tpublic read(context: ReaderContext): this {\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listTextures()\n\t\t\t.forEach((texture) => {\n\t\t\t\tif (texture.getMimeType() === 'image/avif') {\n\t\t\t\t\tconst imageIndex = context.imageIndexMap.get(texture);\n\t\t\t\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\t\t\t\ttextureDefs.forEach((textureDef) => {\n\t\t\t\t\t\tif (textureDef.source === imageIndex) {\n\t\t\t\t\t\t\ttextureDef.extensions = textureDef.extensions || {};\n\t\t\t\t\t\t\ttextureDef.extensions[NAME] = { source: textureDef.source };\n\t\t\t\t\t\t\tdelete textureDef.source;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n\ninterface IBox {\n\ttype: string;\n\tstart: number;\n\tend: number;\n}\n\nfunction unbox(data: DataView, offset: number): IBox | null {\n\tif (data.byteLength < 4 + offset) return null;\n\n\t// size includes first 4 bytes (length)\n\tconst size = data.getUint32(offset);\n\tif (data.byteLength < size + offset || size < 8) return null;\n\n\treturn {\n\t\ttype: BufferUtils.decodeText(new Uint8Array(data.buffer, data.byteOffset + offset + 4, 4)),\n\t\tstart: offset + 8,\n\t\tend: offset + size,\n\t};\n}\n","import {\n\tBufferUtils,\n\tExtension,\n\tImageUtils,\n\tImageUtilsFormat,\n\tPropertyType,\n\tReaderContext,\n\tWriterContext,\n\tvec2,\n} from '@gltf-transform/core';\nimport { EXT_TEXTURE_WEBP } from '../constants.js';\n\nconst NAME = EXT_TEXTURE_WEBP;\n\nclass WEBPImageUtils implements ImageUtilsFormat {\n\tmatch(array: Uint8Array): boolean {\n\t\treturn array.length >= 12 && array[8] === 87 && array[9] === 69 && array[10] === 66 && array[11] === 80;\n\t}\n\tgetSize(array: Uint8Array): vec2 | null {\n\t\t// Reference: http://tools.ietf.org/html/rfc6386\n\t\tconst RIFF = BufferUtils.decodeText(array.slice(0, 4));\n\t\tconst WEBP = BufferUtils.decodeText(array.slice(8, 12));\n\t\tif (RIFF !== 'RIFF' || WEBP !== 'WEBP') return null;\n\n\t\tconst view = new DataView(array.buffer, array.byteOffset);\n\n\t\t// Reference: https://wiki.tcl-lang.org/page/Reading+WEBP+image+dimensions\n\t\tlet offset = 12;\n\t\twhile (offset < view.byteLength) {\n\t\t\tconst chunkId = BufferUtils.decodeText(\n\t\t\t\tnew Uint8Array([\n\t\t\t\t\tview.getUint8(offset),\n\t\t\t\t\tview.getUint8(offset + 1),\n\t\t\t\t\tview.getUint8(offset + 2),\n\t\t\t\t\tview.getUint8(offset + 3),\n\t\t\t\t]),\n\t\t\t);\n\t\t\tconst chunkByteLength = view.getUint32(offset + 4, true);\n\t\t\tif (chunkId === 'VP8 ') {\n\t\t\t\tconst width = view.getInt16(offset + 14, true) & 0x3fff;\n\t\t\t\tconst height = view.getInt16(offset + 16, true) & 0x3fff;\n\t\t\t\treturn [width, height];\n\t\t\t} else if (chunkId === 'VP8L') {\n\t\t\t\tconst b0 = view.getUint8(offset + 9);\n\t\t\t\tconst b1 = view.getUint8(offset + 10);\n\t\t\t\tconst b2 = view.getUint8(offset + 11);\n\t\t\t\tconst b3 = view.getUint8(offset + 12);\n\t\t\t\tconst width = 1 + (((b1 & 0x3f) << 8) | b0);\n\t\t\t\tconst height = 1 + (((b3 & 0xf) << 10) | (b2 << 2) | ((b1 & 0xc0) >> 6));\n\t\t\t\treturn [width, height];\n\t\t\t}\n\t\t\toffset += 8 + chunkByteLength + (chunkByteLength % 2);\n\t\t}\n\n\t\treturn null;\n\t}\n\tgetChannels(_buffer: Uint8Array): number {\n\t\treturn 4;\n\t}\n}\n\n/**\n * [`EXT_texture_webp`](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_texture_webp/)\n * enables WebP images for any material texture.\n *\n * WebP offers greatly reduced transmission size, but\n * [requires browser support](https://caniuse.com/webp). Like PNG and JPEG, a WebP image is\n * *fully decompressed* when uploaded to the GPU, which increases upload time and GPU memory cost.\n * For seamless uploads and minimal GPU memory cost, it is necessary to use a GPU texture format\n * like Basis Universal, with the `KHR_texture_basisu` extension.\n *\n * Defining no {@link ExtensionProperty} types, this {@link Extension} is simply attached to the\n * {@link Document}, and affects the entire Document by allowing use of the `image/webp` MIME type\n * and passing WebP image data to the {@link Texture.setImage} method. Without the Extension, the\n * same MIME types and image data would yield an invalid glTF document, under the stricter core glTF\n * specification.\n *\n * Properties:\n * - N/A\n *\n * ### Example\n *\n * ```typescript\n * import { EXTTextureWebP } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const webpExtension = document.createExtension(EXTTextureWebP)\n * \t.setRequired(true);\n * document.createTexture('MyWebPTexture')\n * \t.setMimeType('image/webp')\n * \t.setImage(fs.readFileSync('my-texture.webp'));\n * ```\n *\n * WebP conversion is not done automatically when adding the extension as shown above — you must\n * convert the image data first, then pass the `.webp` payload to {@link Texture.setImage}.\n *\n * When the `EXT_texture_webp` extension is added to a file by glTF-Transform, the extension should\n * always be required. This tool does not support writing assets that \"fall back\" to optional PNG or\n * JPEG image data.\n */\nexport class EXTTextureWebP extends Extension {\n\tpublic readonly extensionName = NAME;\n\t/** @hidden */\n\tpublic readonly prereadTypes = [PropertyType.TEXTURE];\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** @hidden */\n\tpublic static register(): void {\n\t\tImageUtils.registerFormat('image/webp', new WEBPImageUtils());\n\t}\n\n\t/** @hidden */\n\tpublic preread(context: ReaderContext): this {\n\t\tconst textureDefs = context.jsonDoc.json.textures || [];\n\t\ttextureDefs.forEach((textureDef) => {\n\t\t\tif (textureDef.extensions && textureDef.extensions[NAME]) {\n\t\t\t\ttextureDef.source = (textureDef.extensions[NAME] as { source: number }).source;\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tpublic read(context: ReaderContext): this {\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listTextures()\n\t\t\t.forEach((texture) => {\n\t\t\t\tif (texture.getMimeType() === 'image/webp') {\n\t\t\t\t\tconst imageIndex = context.imageIndexMap.get(texture);\n\t\t\t\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\t\t\t\ttextureDefs.forEach((textureDef) => {\n\t\t\t\t\t\tif (textureDef.source === imageIndex) {\n\t\t\t\t\t\t\ttextureDef.extensions = textureDef.extensions || {};\n\t\t\t\t\t\t\ttextureDef.extensions[NAME] = { source: textureDef.source };\n\t\t\t\t\t\t\tdelete textureDef.source;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { Accessor, GLTF, TypedArray, TypedArrayConstructor } from '@gltf-transform/core';\nimport { KHR_DRACO_MESH_COMPRESSION } from '../constants.js';\nimport type { Attribute, DataType, Decoder, DecoderModule, Mesh } from 'draco3dgltf';\n\nconst NAME = KHR_DRACO_MESH_COMPRESSION;\n\nexport let decoderModule: DecoderModule;\n\n// Initialized when decoder module loads.\nlet COMPONENT_ARRAY: { [key: number]: TypedArrayConstructor };\nlet DATA_TYPE: { [key: number]: DataType };\n\nexport function decodeGeometry(decoder: Decoder, data: Uint8Array): Mesh {\n\tconst buffer = new decoderModule.DecoderBuffer();\n\ttry {\n\t\tbuffer.Init(data as unknown as Int8Array, data.length);\n\n\t\tconst geometryType = decoder.GetEncodedGeometryType(buffer);\n\t\tif (geometryType !== decoderModule.TRIANGULAR_MESH) {\n\t\t\tthrow new Error(`[${NAME}] Unknown geometry type.`);\n\t\t}\n\n\t\tconst dracoMesh = new decoderModule.Mesh();\n\t\tconst status = decoder.DecodeBufferToMesh(buffer, dracoMesh);\n\n\t\tif (!status.ok() || dracoMesh.ptr === 0) {\n\t\t\tthrow new Error(`[${NAME}] Decoding failure.`);\n\t\t}\n\n\t\treturn dracoMesh;\n\t} finally {\n\t\tdecoderModule.destroy(buffer);\n\t}\n}\n\nexport function decodeIndex(decoder: Decoder, mesh: Mesh): Uint16Array | Uint32Array {\n\tconst numFaces = mesh.num_faces();\n\tconst numIndices = numFaces * 3;\n\n\tlet ptr: number;\n\tlet indices: Uint16Array | Uint32Array;\n\n\tif (mesh.num_points() <= 65534) {\n\t\tconst byteLength = numIndices * Uint16Array.BYTES_PER_ELEMENT;\n\t\tptr = decoderModule._malloc(byteLength);\n\t\tdecoder.GetTrianglesUInt16Array(mesh, byteLength, ptr);\n\t\tindices = new Uint16Array(decoderModule.HEAPU16.buffer, ptr, numIndices).slice();\n\t} else {\n\t\tconst byteLength = numIndices * Uint32Array.BYTES_PER_ELEMENT;\n\t\tptr = decoderModule._malloc(byteLength);\n\t\tdecoder.GetTrianglesUInt32Array(mesh, byteLength, ptr);\n\t\tindices = new Uint32Array(decoderModule.HEAPU32.buffer, ptr, numIndices).slice();\n\t}\n\n\tdecoderModule._free(ptr);\n\n\treturn indices;\n}\n\nexport function decodeAttribute(\n\tdecoder: Decoder,\n\tmesh: Mesh,\n\tattribute: Attribute,\n\taccessorDef: GLTF.IAccessor\n): TypedArray {\n\tconst dataType = DATA_TYPE[accessorDef.componentType];\n\tconst ArrayCtor = COMPONENT_ARRAY[accessorDef.componentType];\n\tconst numComponents = attribute.num_components();\n\tconst numPoints = mesh.num_points();\n\tconst numValues = numPoints * numComponents;\n\tconst byteLength: number = numValues * ArrayCtor.BYTES_PER_ELEMENT;\n\n\tconst ptr = decoderModule._malloc(byteLength);\n\tdecoder.GetAttributeDataArrayForAllPoints(mesh, attribute, dataType, byteLength, ptr);\n\tconst array: TypedArray = new ArrayCtor(decoderModule.HEAPF32.buffer, ptr, numValues).slice();\n\tdecoderModule._free(ptr);\n\n\treturn array;\n}\n\nexport function initDecoderModule(_decoderModule: DecoderModule): void {\n\tdecoderModule = _decoderModule;\n\n\tCOMPONENT_ARRAY = {\n\t\t[Accessor.ComponentType.FLOAT]: Float32Array,\n\t\t[Accessor.ComponentType.UNSIGNED_INT]: Uint32Array,\n\t\t[Accessor.ComponentType.UNSIGNED_SHORT]: Uint16Array,\n\t\t[Accessor.ComponentType.UNSIGNED_BYTE]: Uint8Array,\n\t\t[Accessor.ComponentType.SHORT]: Int16Array,\n\t\t[Accessor.ComponentType.BYTE]: Int8Array,\n\t};\n\n\tDATA_TYPE = {\n\t\t[Accessor.ComponentType.FLOAT]: decoderModule.DT_FLOAT32,\n\t\t[Accessor.ComponentType.UNSIGNED_INT]: decoderModule.DT_UINT32,\n\t\t[Accessor.ComponentType.UNSIGNED_SHORT]: decoderModule.DT_UINT16,\n\t\t[Accessor.ComponentType.UNSIGNED_BYTE]: decoderModule.DT_UINT8,\n\t\t[Accessor.ComponentType.SHORT]: decoderModule.DT_INT16,\n\t\t[Accessor.ComponentType.BYTE]: decoderModule.DT_INT8,\n\t};\n}\n","import { Accessor, bbox, GLTF, Primitive, TypedArray } from '@gltf-transform/core';\nimport type { EncoderModule, Mesh, MeshBuilder } from 'draco3dgltf';\n\nexport let encoderModule: EncoderModule;\n\nexport enum EncoderMethod {\n\tEDGEBREAKER = 1,\n\tSEQUENTIAL = 0,\n}\n\nenum AttributeEnum {\n\tPOSITION = 'POSITION',\n\tNORMAL = 'NORMAL',\n\tCOLOR = 'COLOR',\n\tTEX_COORD = 'TEX_COORD',\n\tGENERIC = 'GENERIC',\n}\n\nconst DEFAULT_QUANTIZATION_BITS = {\n\t[AttributeEnum.POSITION]: 14,\n\t[AttributeEnum.NORMAL]: 10,\n\t[AttributeEnum.COLOR]: 8,\n\t[AttributeEnum.TEX_COORD]: 12,\n\t[AttributeEnum.GENERIC]: 12,\n};\n\nexport interface EncodedPrimitive {\n\tnumVertices: number;\n\tnumIndices: number;\n\tdata: Uint8Array;\n\tattributeIDs: { [key: string]: number };\n}\n\nexport interface EncoderOptions {\n\tdecodeSpeed?: number;\n\tencodeSpeed?: number;\n\tmethod?: EncoderMethod;\n\tquantizationBits?: { [key: string]: number };\n\tquantizationVolume?: 'mesh' | 'scene' | bbox;\n}\n\nconst DEFAULT_ENCODER_OPTIONS: EncoderOptions = {\n\tdecodeSpeed: 5,\n\tencodeSpeed: 5,\n\tmethod: EncoderMethod.EDGEBREAKER,\n\tquantizationBits: DEFAULT_QUANTIZATION_BITS,\n\tquantizationVolume: 'mesh',\n};\n\nexport function initEncoderModule(_encoderModule: EncoderModule): void {\n\tencoderModule = _encoderModule;\n}\n\n/**\n * References:\n * - https://github.com/mrdoob/three.js/blob/dev/examples/js/exporters/DRACOExporter.js\n * - https://github.com/CesiumGS/gltf-pipeline/blob/master/lib/compressDracoMeshes.js\n */\nexport function encodeGeometry(prim: Primitive, _options: EncoderOptions = DEFAULT_ENCODER_OPTIONS): EncodedPrimitive {\n\tconst options = { ...DEFAULT_ENCODER_OPTIONS, ..._options } as Required<EncoderOptions>;\n\toptions.quantizationBits = { ...DEFAULT_QUANTIZATION_BITS, ..._options.quantizationBits };\n\n\tconst builder = new encoderModule.MeshBuilder();\n\tconst mesh = new encoderModule.Mesh();\n\n\tconst encoder = new encoderModule.ExpertEncoder(mesh);\n\n\tconst attributeIDs: { [key: string]: number } = {};\n\tconst dracoBuffer = new encoderModule.DracoInt8Array();\n\n\tconst hasMorphTargets = prim.listTargets().length > 0;\n\tlet hasSparseAttributes = false;\n\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\n\t\tif (attribute.getSparse()) {\n\t\t\thasSparseAttributes = true;\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst attributeEnum = getAttributeEnum(semantic);\n\t\tconst attributeID: number = addAttribute(\n\t\t\tbuilder,\n\t\t\tattribute.getComponentType(),\n\t\t\tmesh,\n\t\t\tencoderModule[attributeEnum],\n\t\t\tattribute.getCount(),\n\t\t\tattribute.getElementSize(),\n\t\t\tattribute.getArray()!,\n\t\t);\n\n\t\tif (attributeID === -1) throw new Error(`Error compressing \"${semantic}\" attribute.`);\n\n\t\tattributeIDs[semantic] = attributeID;\n\t\tif (options.quantizationVolume === 'mesh' || semantic !== 'POSITION') {\n\t\t\tencoder.SetAttributeQuantization(attributeID, options.quantizationBits[attributeEnum]);\n\t\t} else if (typeof options.quantizationVolume === 'object') {\n\t\t\tconst { quantizationVolume } = options;\n\t\t\tconst range = Math.max(\n\t\t\t\tquantizationVolume.max[0] - quantizationVolume.min[0],\n\t\t\t\tquantizationVolume.max[1] - quantizationVolume.min[1],\n\t\t\t\tquantizationVolume.max[2] - quantizationVolume.min[2],\n\t\t\t);\n\t\t\tencoder.SetAttributeExplicitQuantization(\n\t\t\t\tattributeID,\n\t\t\t\toptions.quantizationBits[attributeEnum],\n\t\t\t\tattribute.getElementSize(),\n\t\t\t\tquantizationVolume.min,\n\t\t\t\trange,\n\t\t\t);\n\t\t} else {\n\t\t\tthrow new Error('Invalid quantization volume state.');\n\t\t}\n\t}\n\n\tconst indices = prim.getIndices();\n\tif (!indices) throw new EncodingError('Primitive must have indices.');\n\n\tbuilder.AddFacesToMesh(mesh, indices.getCount() / 3, indices.getArray() as unknown as Uint32Array);\n\n\tencoder.SetSpeedOptions(options.encodeSpeed, options.decodeSpeed);\n\tencoder.SetTrackEncodedProperties(true);\n\n\t// TODO(cleanup): Use edgebreaker without deduplication if possible.\n\t// See https://github.com/google/draco/issues/929.\n\tif (options.method === EncoderMethod.SEQUENTIAL || hasMorphTargets || hasSparseAttributes) {\n\t\tencoder.SetEncodingMethod(encoderModule.MESH_SEQUENTIAL_ENCODING);\n\t} else {\n\t\tencoder.SetEncodingMethod(encoderModule.MESH_EDGEBREAKER_ENCODING);\n\t}\n\n\t// Encode, preserving vertex order for primitives with morph targets and sparse accessors.\n\tconst byteLength = encoder.EncodeToDracoBuffer(!(hasMorphTargets || hasSparseAttributes), dracoBuffer);\n\tif (byteLength <= 0) throw new EncodingError('Error applying Draco compression.');\n\n\tconst data = new Uint8Array(byteLength);\n\tfor (let i = 0; i < byteLength; ++i) {\n\t\tdata[i] = dracoBuffer.GetValue(i);\n\t}\n\n\tconst numVertices = encoder.GetNumberOfEncodedPoints();\n\tconst numIndices = encoder.GetNumberOfEncodedFaces() * 3;\n\n\tencoderModule.destroy(dracoBuffer);\n\tencoderModule.destroy(mesh);\n\tencoderModule.destroy(builder);\n\tencoderModule.destroy(encoder);\n\n\treturn { numVertices, numIndices, data, attributeIDs };\n}\n\nfunction getAttributeEnum(semantic: string): AttributeEnum {\n\tif (semantic === 'POSITION') {\n\t\treturn AttributeEnum.POSITION;\n\t} else if (semantic === 'NORMAL') {\n\t\treturn AttributeEnum.NORMAL;\n\t} else if (semantic.startsWith('COLOR_')) {\n\t\treturn AttributeEnum.COLOR;\n\t} else if (semantic.startsWith('TEXCOORD_')) {\n\t\treturn AttributeEnum.TEX_COORD;\n\t}\n\treturn AttributeEnum.GENERIC;\n}\n\nfunction addAttribute(\n\tbuilder: MeshBuilder,\n\tcomponentType: GLTF.AccessorComponentType,\n\tmesh: Mesh,\n\tattribute: number,\n\tcount: number,\n\titemSize: number,\n\tarray: TypedArray,\n): number {\n\tswitch (componentType) {\n\t\tcase Accessor.ComponentType.UNSIGNED_BYTE:\n\t\t\treturn builder.AddUInt8Attribute(mesh, attribute, count, itemSize, array);\n\t\tcase Accessor.ComponentType.BYTE:\n\t\t\treturn builder.AddInt8Attribute(mesh, attribute, count, itemSize, array);\n\t\tcase Accessor.ComponentType.UNSIGNED_SHORT:\n\t\t\treturn builder.AddUInt16Attribute(mesh, attribute, count, itemSize, array);\n\t\tcase Accessor.ComponentType.SHORT:\n\t\t\treturn builder.AddInt16Attribute(mesh, attribute, count, itemSize, array);\n\t\tcase Accessor.ComponentType.UNSIGNED_INT:\n\t\t\treturn builder.AddUInt32Attribute(mesh, attribute, count, itemSize, array);\n\t\tcase Accessor.ComponentType.FLOAT:\n\t\t\treturn builder.AddFloatAttribute(mesh, attribute, count, itemSize, array);\n\t\tdefault:\n\t\t\tthrow new Error(`Unexpected component type, \"${componentType}\".`);\n\t}\n}\n\nexport class EncodingError extends Error {}\n","import {\n\tAccessor,\n\tbbox,\n\tgetBounds,\n\tBufferUtils,\n\tDocument,\n\tExtension,\n\tGLB_BUFFER,\n\tPrimitive,\n\tPropertyType,\n\tReaderContext,\n\tWriterContext,\n} from '@gltf-transform/core';\nimport { decodeAttribute, decodeGeometry, decodeIndex, initDecoderModule } from './decoder.js';\nimport {\n\tEncodedPrimitive,\n\tencodeGeometry,\n\tEncoderMethod,\n\tEncoderOptions,\n\tEncodingError,\n\tinitEncoderModule,\n} from './encoder.js';\nimport { KHR_DRACO_MESH_COMPRESSION } from '../constants.js';\nimport type { Decoder, DecoderModule, EncoderModule, Mesh } from 'draco3dgltf';\n\nconst NAME = KHR_DRACO_MESH_COMPRESSION;\n\ninterface DracoPrimitiveExtension {\n\tbufferView: number;\n\tattributes: {\n\t\t[name: string]: number;\n\t};\n}\n\ninterface DracoWriterContext {\n\tprimitiveHashMap: Map<Primitive, string>;\n\tprimitiveEncodingMap: Map<string, EncodedPrimitive>;\n}\n\n/**\n * [`KHR_draco_mesh_compression`](https://github.com/KhronosGroup/gltf/blob/main/extensions/2.0/Khronos/KHR_draco_mesh_compression/)\n * provides advanced compression for mesh geometry.\n *\n * For models where geometry is a significant factor (>1 MB), Draco can reduce filesize by ~95%\n * in many cases. When animation or textures are large, other complementary compression methods\n * should be used as well. For geometry <1MB, the size of the WASM decoder library may outweigh\n * size savings.\n *\n * Be aware that decompression happens before uploading to the GPU — this will add some latency to\n * the parsing process, and means that compressing geometry with  Draco does _not_ affect runtime\n * performance. To improve framerate, you'll need to simplify the geometry by reducing vertex count\n * or draw calls — not just compress it. Finally, be aware that Draco compression is lossy:\n * repeatedly compressing and decompressing a model in a pipeline will lose precision, so\n * compression should generally be the last stage of an art workflow, and uncompressed original\n * files should be kept.\n *\n * A decoder or encoder from the `draco3dgltf` npm module for Node.js (or\n * [elsewhere for web](https://stackoverflow.com/a/66978236/1314762)) is required for reading and writing,\n * and must be provided by the application.\n *\n * ### Encoding options\n *\n * Two compression methods are available: 'edgebreaker' and 'sequential'. The\n * edgebreaker method will give higher compression in general, but changes the\n * order of the model's vertices. To preserve index order, use sequential\n * compression. When a mesh uses morph targets, or a high decoding speed is\n * selected, sequential compression will automatically be chosen.\n *\n * Both speed options affect the encoder's choice of algorithms. For example, a\n * requirement for fast decoding may prevent the encoder from using the best\n * compression methods even if the encoding speed is set to 0. In general, the\n * faster of the two options limits the choice of features that can be used by the\n * encoder. Setting --decodeSpeed to be faster than the --encodeSpeed may allow\n * the encoder to choose the optimal method out of the available features for the\n * given --decodeSpeed.\n *\n * ### Example\n *\n * ```typescript\n * import { NodeIO } from '@gltf-transform/core';\n * import { KHRDracoMeshCompression } from '@gltf-transform/extensions';\n *\n * import draco3d from 'draco3dgltf';\n *\n * // ...\n *\n * const io = new NodeIO()\n *\t.registerExtensions([KHRDracoMeshCompression])\n *\t.registerDependencies({\n *\t\t'draco3d.decoder': await draco3d.createDecoderModule(), // Optional.\n *\t\t'draco3d.encoder': await draco3d.createEncoderModule(), // Optional.\n *\t});\n *\n * // Read and decode.\n * const document = await io.read('compressed.glb');\n *\n * // Write and encode.\n * document.createExtension(KHRDracoMeshCompression)\n * \t.setRequired(true)\n * \t.setEncoderOptions({\n * \t\tmethod: KHRDracoMeshCompression.EncoderMethod.EDGEBREAKER,\n * \t\tencodeSpeed: 5,\n * \t\tdecodeSpeed: 5,\n * \t});\n * await io.write('compressed.glb', document);\n * ```\n */\nexport class KHRDracoMeshCompression extends Extension {\n\tpublic readonly extensionName = NAME;\n\t/** @hidden */\n\tpublic readonly prereadTypes = [PropertyType.PRIMITIVE];\n\t/** @hidden */\n\tpublic readonly prewriteTypes = [PropertyType.ACCESSOR];\n\t/** @hidden */\n\tpublic readonly readDependencies = ['draco3d.decoder'];\n\t/** @hidden */\n\tpublic readonly writeDependencies = ['draco3d.encoder'];\n\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/**\n\t * Compression method. `EncoderMethod.EDGEBREAKER` usually provides a higher compression ratio,\n\t * while `EncoderMethod.SEQUENTIAL` better preserves original verter order.\n\t */\n\tpublic static readonly EncoderMethod = EncoderMethod;\n\n\tprivate _decoderModule: DecoderModule | null = null;\n\tprivate _encoderModule: EncoderModule | null = null;\n\tprivate _encoderOptions: EncoderOptions = {};\n\n\t/** @hidden */\n\tpublic install(key: string, dependency: unknown): this {\n\t\tif (key === 'draco3d.decoder') {\n\t\t\tthis._decoderModule = dependency as DecoderModule;\n\t\t\tinitDecoderModule(this._decoderModule);\n\t\t}\n\t\tif (key === 'draco3d.encoder') {\n\t\t\tthis._encoderModule = dependency as EncoderModule;\n\t\t\tinitEncoderModule(this._encoderModule);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets Draco compression options. Compression does not take effect until the Document is\n\t * written with an I/O class.\n\t *\n\t * Defaults:\n\t * ```\n\t * decodeSpeed?: number = 5;\n\t * encodeSpeed?: number = 5;\n\t * method?: EncoderMethod = EncoderMethod.EDGEBREAKER;\n\t * quantizationBits?: {[ATTRIBUTE_NAME]: bits};\n\t * quantizationVolume?: 'mesh' | 'scene' | bbox = 'mesh';\n\t * ```\n\t */\n\tpublic setEncoderOptions(options: EncoderOptions): this {\n\t\tthis._encoderOptions = options;\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic preread(context: ReaderContext): this {\n\t\tif (!this._decoderModule) {\n\t\t\tthrow new Error(`[${NAME}] Please install extension dependency, \"draco3d.decoder\".`);\n\t\t}\n\n\t\tconst logger = this.document.getLogger();\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst dracoMeshes: Map<number, [Decoder, Mesh]> = new Map();\n\n\t\ttry {\n\t\t\tconst meshDefs = jsonDoc.json.meshes || [];\n\t\t\tfor (const meshDef of meshDefs) {\n\t\t\t\tfor (const primDef of meshDef.primitives) {\n\t\t\t\t\tif (!primDef.extensions || !primDef.extensions[NAME]) continue;\n\n\t\t\t\t\tconst dracoDef = primDef.extensions[NAME] as DracoPrimitiveExtension;\n\t\t\t\t\tlet [decoder, dracoMesh] = dracoMeshes.get(dracoDef.bufferView) || [];\n\n\t\t\t\t\tif (!dracoMesh || !decoder) {\n\t\t\t\t\t\tconst bufferViewDef = jsonDoc.json.bufferViews![dracoDef.bufferView];\n\t\t\t\t\t\tconst bufferDef = jsonDoc.json.buffers![bufferViewDef.buffer];\n\t\t\t\t\t\t// TODO(cleanup): Should be encapsulated in writer-context.ts.\n\t\t\t\t\t\tconst resource = bufferDef.uri\n\t\t\t\t\t\t\t? jsonDoc.resources[bufferDef.uri]\n\t\t\t\t\t\t\t: jsonDoc.resources[GLB_BUFFER];\n\n\t\t\t\t\t\tconst byteOffset = bufferViewDef.byteOffset || 0;\n\t\t\t\t\t\tconst byteLength = bufferViewDef.byteLength;\n\t\t\t\t\t\tconst compressedData = BufferUtils.toView(resource, byteOffset, byteLength);\n\n\t\t\t\t\t\tdecoder = new this._decoderModule.Decoder();\n\t\t\t\t\t\tdracoMesh = decodeGeometry(decoder, compressedData);\n\t\t\t\t\t\tdracoMeshes.set(dracoDef.bufferView, [decoder, dracoMesh]);\n\t\t\t\t\t\tlogger.debug(`[${NAME}] Decompressed ${compressedData.byteLength} bytes.`);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Attributes.\n\t\t\t\t\tfor (const semantic in primDef.attributes) {\n\t\t\t\t\t\tconst accessorDef = context.jsonDoc.json.accessors![primDef.attributes[semantic]];\n\t\t\t\t\t\tconst dracoAttribute = decoder.GetAttributeByUniqueId(dracoMesh, dracoDef.attributes[semantic]);\n\t\t\t\t\t\tconst attributeArray = decodeAttribute(decoder, dracoMesh, dracoAttribute, accessorDef);\n\t\t\t\t\t\tcontext.accessors[primDef.attributes[semantic]].setArray(attributeArray);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Indices. Optional, see https://github.com/google/draco/issues/720.\n\t\t\t\t\tif (primDef.indices !== undefined) {\n\t\t\t\t\t\tcontext.accessors[primDef.indices].setArray(decodeIndex(decoder, dracoMesh));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tfor (const [decoder, dracoMesh] of Array.from(dracoMeshes.values())) {\n\t\t\t\tthis._decoderModule.destroy(decoder);\n\t\t\t\tthis._decoderModule.destroy(dracoMesh);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic read(_context: ReaderContext): this {\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic prewrite(context: WriterContext, _propertyType: PropertyType): this {\n\t\tif (!this._encoderModule) {\n\t\t\tthrow new Error(`[${NAME}] Please install extension dependency, \"draco3d.encoder\".`);\n\t\t}\n\n\t\tconst logger = this.document.getLogger();\n\t\tlogger.debug(`[${NAME}] Compression options: ${JSON.stringify(this._encoderOptions)}`);\n\n\t\tconst primitiveHashMap = listDracoPrimitives(this.document);\n\t\tconst primitiveEncodingMap = new Map<string, EncodedPrimitive>();\n\n\t\tlet quantizationVolume: bbox | 'mesh' = 'mesh';\n\t\tif (this._encoderOptions.quantizationVolume === 'scene') {\n\t\t\tif (this.document.getRoot().listScenes().length !== 1) {\n\t\t\t\tlogger.warn(`[${NAME}]: quantizationVolume=scene requires exactly 1 scene.`);\n\t\t\t} else {\n\t\t\t\tquantizationVolume = getBounds(this.document.getRoot().listScenes().pop()!);\n\t\t\t}\n\t\t}\n\n\t\tfor (const prim of Array.from(primitiveHashMap.keys())) {\n\t\t\tconst primHash = primitiveHashMap.get(prim);\n\t\t\tif (!primHash) throw new Error('Unexpected primitive.');\n\n\t\t\t// Reuse an existing EncodedPrimitive, if possible.\n\t\t\tif (primitiveEncodingMap.has(primHash)) {\n\t\t\t\tprimitiveEncodingMap.set(primHash, primitiveEncodingMap.get(primHash)!);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst indices = prim.getIndices()!; // Condition for listDracoPrimitives().\n\t\t\tconst accessorDefs = context.jsonDoc.json.accessors!;\n\n\t\t\t// Create a new EncodedPrimitive.\n\t\t\tlet encodedPrim: EncodedPrimitive;\n\t\t\ttry {\n\t\t\t\tencodedPrim = encodeGeometry(prim, { ...this._encoderOptions, quantizationVolume });\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof EncodingError) {\n\t\t\t\t\tlogger.warn(`[${NAME}]: ${e.message} Skipping primitive compression.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\tprimitiveEncodingMap.set(primHash, encodedPrim);\n\n\t\t\t// Create indices definition, update count.\n\t\t\tconst indicesDef = context.createAccessorDef(indices);\n\t\t\tindicesDef.count = encodedPrim.numIndices;\n\t\t\tcontext.accessorIndexMap.set(indices, accessorDefs.length);\n\t\t\taccessorDefs.push(indicesDef);\n\n\t\t\t// Create attribute definitions, update count.\n\t\t\tfor (const semantic of prim.listSemantics()) {\n\t\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\t\tif (encodedPrim.attributeIDs[semantic] === undefined) continue; // sparse\n\n\t\t\t\tconst attributeDef = context.createAccessorDef(attribute);\n\t\t\t\tattributeDef.count = encodedPrim.numVertices;\n\t\t\t\tcontext.accessorIndexMap.set(attribute, accessorDefs.length);\n\t\t\t\taccessorDefs.push(attributeDef);\n\t\t\t}\n\n\t\t\t// Map compressed buffer view to a Buffer.\n\t\t\tconst buffer = prim.getAttribute('POSITION')!.getBuffer() || this.document.getRoot().listBuffers()[0];\n\t\t\tif (!context.otherBufferViews.has(buffer)) context.otherBufferViews.set(buffer, []);\n\t\t\tcontext.otherBufferViews.get(buffer)!.push(encodedPrim.data);\n\t\t}\n\n\t\tlogger.debug(`[${NAME}] Compressed ${primitiveHashMap.size} primitives.`);\n\n\t\tcontext.extensionData[NAME] = {\n\t\t\tprimitiveHashMap,\n\t\t\tprimitiveEncodingMap,\n\t\t} as DracoWriterContext;\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst dracoContext: DracoWriterContext = context.extensionData[NAME] as DracoWriterContext;\n\n\t\tfor (const mesh of this.document.getRoot().listMeshes()) {\n\t\t\tconst meshDef = context.jsonDoc.json.meshes![context.meshIndexMap.get(mesh)!];\n\t\t\tfor (let i = 0; i < mesh.listPrimitives().length; i++) {\n\t\t\t\tconst prim = mesh.listPrimitives()[i];\n\t\t\t\tconst primDef = meshDef.primitives[i];\n\n\t\t\t\tconst primHash = dracoContext.primitiveHashMap.get(prim);\n\t\t\t\tif (!primHash) continue;\n\n\t\t\t\tconst encodedPrim = dracoContext.primitiveEncodingMap.get(primHash)!;\n\t\t\t\tif (!encodedPrim) continue;\n\n\t\t\t\tprimDef.extensions = primDef.extensions || {};\n\t\t\t\tprimDef.extensions[NAME] = {\n\t\t\t\t\tbufferView: context.otherBufferViewsIndexMap.get(encodedPrim.data),\n\t\t\t\t\tattributes: encodedPrim.attributeIDs,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// Omit the extension if nothing was compressed.\n\t\tif (!dracoContext.primitiveHashMap.size) {\n\t\t\tconst json = context.jsonDoc.json;\n\t\t\tjson.extensionsUsed = (json.extensionsUsed || []).filter((name) => name !== NAME);\n\t\t\tjson.extensionsRequired = (json.extensionsRequired || []).filter((name) => name !== NAME);\n\t\t}\n\n\t\treturn this;\n\t}\n}\n\n/**\n * Returns a list of Primitives compatible with Draco compression. If any required preconditions\n * fail, and would break assumptions required for compression, this function will throw an error.\n */\nfunction listDracoPrimitives(doc: Document): Map<Primitive, string> {\n\tconst logger = doc.getLogger();\n\tconst included = new Set<Primitive>();\n\tconst excluded = new Set<Primitive>();\n\n\t// Support compressing only indexed, mode=TRIANGLES primitives.\n\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tif (!prim.getIndices()) {\n\t\t\t\texcluded.add(prim);\n\t\t\t\tlogger.warn(`[${NAME}] Skipping Draco compression on non-indexed primitive.`);\n\t\t\t} else if (prim.getMode() !== Primitive.Mode.TRIANGLES) {\n\t\t\t\texcluded.add(prim);\n\t\t\t\tlogger.warn(`[${NAME}] Skipping Draco compression on non-TRIANGLES primitive.`);\n\t\t\t} else {\n\t\t\t\tincluded.add(prim);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Create an Accessor->index mapping.\n\tconst accessors = doc.getRoot().listAccessors();\n\tconst accessorIndices = new Map<Accessor, number>();\n\tfor (let i = 0; i < accessors.length; i++) accessorIndices.set(accessors[i], i);\n\n\t// For each compressed Primitive, create a hash key identifying its accessors. Map each\n\t// compressed Primitive and Accessor to this hash key.\n\tconst includedAccessors = new Map<Accessor, string>();\n\tconst includedHashKeys = new Set<string>();\n\tconst primToHashKey = new Map<Primitive, string>();\n\tfor (const prim of Array.from(included)) {\n\t\tlet hashKey = createHashKey(prim, accessorIndices);\n\n\t\t// If accessors of an identical primitive have already been checked, we're done.\n\t\tif (includedHashKeys.has(hashKey)) {\n\t\t\tprimToHashKey.set(prim, hashKey);\n\t\t\tcontinue;\n\t\t}\n\n\t\t// If any accessors are already in use, but the same hashKey hasn't been written, then we\n\t\t// need to create copies of these accessors for the current encoded primitive. We can't\n\t\t// reuse the same compressed accessor for two encoded primitives, because Draco might\n\t\t// change the vertex count, change the vertex order, or cause other conflicts.\n\t\tif (includedAccessors.has(prim.getIndices()!)) {\n\t\t\tconst indices = prim.getIndices()!; // Condition for 'included' list.\n\t\t\tconst dstIndices = indices.clone();\n\t\t\taccessorIndices.set(dstIndices, doc.getRoot().listAccessors().length - 1);\n\t\t\tprim.swap(indices, dstIndices); // TODO(cleanup): I/O should not modify Document.\n\t\t}\n\t\tfor (const attribute of prim.listAttributes()) {\n\t\t\tif (includedAccessors.has(attribute)) {\n\t\t\t\tconst dstAttribute = attribute.clone();\n\t\t\t\taccessorIndices.set(dstAttribute, doc.getRoot().listAccessors().length - 1);\n\t\t\t\tprim.swap(attribute, dstAttribute); // TODO(cleanup): I/O should not modify Document.\n\t\t\t}\n\t\t}\n\n\t\t// With conflicts resolved, compute the hash key again.\n\t\thashKey = createHashKey(prim, accessorIndices);\n\n\t\t// Commit the primitive and its accessors to the hash key.\n\t\tincludedHashKeys.add(hashKey);\n\t\tprimToHashKey.set(prim, hashKey);\n\t\tincludedAccessors.set(prim.getIndices()!, hashKey);\n\t\tfor (const attribute of prim.listAttributes()) {\n\t\t\tincludedAccessors.set(attribute, hashKey);\n\t\t}\n\t}\n\n\t// For each compressed Accessor, ensure that it isn't used except by a Primitive.\n\tfor (const accessor of Array.from(includedAccessors.keys())) {\n\t\tconst parentTypes = new Set(accessor.listParents().map((prop) => prop.propertyType));\n\t\tif (parentTypes.size !== 2 || !parentTypes.has(PropertyType.PRIMITIVE) || !parentTypes.has(PropertyType.ROOT)) {\n\t\t\tthrow new Error(`[${NAME}] Compressed accessors must only be used as indices or vertex attributes.`);\n\t\t}\n\t}\n\n\t// For each compressed Primitive, ensure that Accessors are mapped only to the same hash key.\n\tfor (const prim of Array.from(included)) {\n\t\tconst hashKey = primToHashKey.get(prim);\n\t\tconst indices = prim.getIndices()!; // Condition for 'included' list.\n\t\tif (\n\t\t\tincludedAccessors.get(indices) !== hashKey ||\n\t\t\tprim.listAttributes().some((attr) => includedAccessors.get(attr) !== hashKey)\n\t\t) {\n\t\t\tthrow new Error(`[${NAME}] Draco primitives must share all, or no, accessors.`);\n\t\t}\n\t}\n\n\t// For each excluded Primitive, ensure that no Accessors are compressed.\n\tfor (const prim of Array.from(excluded)) {\n\t\tconst indices = prim.getIndices()!; // Condition for 'included' list.\n\t\tif (includedAccessors.has(indices) || prim.listAttributes().some((attr) => includedAccessors.has(attr))) {\n\t\t\tthrow new Error(`[${NAME}] Accessor cannot be shared by compressed and uncompressed primitives.`);\n\t\t}\n\t}\n\n\treturn primToHashKey;\n}\n\nfunction createHashKey(prim: Primitive, indexMap: Map<Accessor, number>): string {\n\tconst hashElements = [];\n\tconst indices = prim.getIndices()!; // Condition for 'included' list.\n\n\thashElements.push(indexMap.get(indices));\n\tfor (const attribute of prim.listAttributes()) {\n\t\thashElements.push(indexMap.get(attribute));\n\t}\n\n\treturn hashElements.sort().join('|');\n}\n","import { ExtensionProperty, IProperty, Nullable, PropertyType, vec3 } from '@gltf-transform/core';\nimport { ColorUtils } from '@gltf-transform/core';\nimport { KHR_LIGHTS_PUNCTUAL } from '../constants.js';\n\ninterface ILight extends IProperty {\n\tcolor: vec3;\n\tintensity: number;\n\ttype: PunctualLightType;\n\trange: number | null;\n\tinnerConeAngle: number;\n\touterConeAngle: number;\n}\n\ntype PunctualLightType = 'point' | 'spot' | 'directional';\n\n/**\n * Defines a light attached to a {@link Node}. See {@link KHRLightsPunctual}.\n */\nexport class Light extends ExtensionProperty<ILight> {\n\tpublic static EXTENSION_NAME = KHR_LIGHTS_PUNCTUAL;\n\tpublic declare extensionName: typeof KHR_LIGHTS_PUNCTUAL;\n\tpublic declare propertyType: 'Light';\n\tpublic declare parentTypes: [PropertyType.NODE];\n\n\t/**********************************************************************************************\n\t * CONSTANTS.\n\t */\n\n\tpublic static Type: Record<string, PunctualLightType> = {\n\t\tPOINT: 'point',\n\t\tSPOT: 'spot',\n\t\tDIRECTIONAL: 'directional',\n\t};\n\n\t/**********************************************************************************************\n\t * INSTANCE.\n\t */\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_LIGHTS_PUNCTUAL;\n\t\tthis.propertyType = 'Light';\n\t\tthis.parentTypes = [PropertyType.NODE];\n\t}\n\n\tprotected getDefaults(): Nullable<ILight> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, {\n\t\t\tcolor: [1, 1, 1] as vec3,\n\t\t\tintensity: 1,\n\t\t\ttype: Light.Type.POINT,\n\t\t\trange: null,\n\t\t\tinnerConeAngle: 0,\n\t\t\touterConeAngle: Math.PI / 4,\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * COLOR.\n\t */\n\n\t/** Light color; Linear-sRGB components. */\n\tpublic getColor(): vec3 {\n\t\treturn this.get('color');\n\t}\n\n\t/** Light color; Linear-sRGB components. */\n\tpublic setColor(color: vec3): this {\n\t\treturn this.set('color', color);\n\t}\n\n\t/**\n\t * Light color; sRGB hexadecimal color.\n\t * @deprecated Will be removed in v4. Use {@link ColorUtils.hexToFactor} / {@link ColorUtils.factorToHex} instead.\n\t */\n\tpublic getColorHex(): number {\n\t\treturn ColorUtils.factorToHex(this.getColor());\n\t}\n\n\t/**\n\t * Light color; sRGB hexadecimal color.\n\t * @deprecated Will be removed in v4. Use {@link ColorUtils.hexToFactor} / {@link ColorUtils.factorToHex} instead.\n\t */\n\tpublic setColorHex(hex: number): this {\n\t\tconst color = this.getColor().slice() as vec3;\n\t\tColorUtils.hexToFactor(hex, color);\n\t\treturn this.setColor(color);\n\t}\n\n\t/**********************************************************************************************\n\t * INTENSITY.\n\t */\n\n\t/**\n\t * Brightness of light. Units depend on the type of light: point and spot lights use luminous\n\t * intensity in candela (lm/sr) while directional lights use illuminance in lux (lm/m2).\n\t */\n\tpublic getIntensity(): number {\n\t\treturn this.get('intensity');\n\t}\n\n\t/**\n\t * Brightness of light. Units depend on the type of light: point and spot lights use luminous\n\t * intensity in candela (lm/sr) while directional lights use illuminance in lux (lm/m2).\n\t */\n\tpublic setIntensity(intensity: number): this {\n\t\treturn this.set('intensity', intensity);\n\t}\n\n\t/**********************************************************************************************\n\t * TYPE.\n\t */\n\n\t/** Type. */\n\tpublic getType(): PunctualLightType {\n\t\treturn this.get('type');\n\t}\n\n\t/** Type. */\n\tpublic setType(type: PunctualLightType): this {\n\t\treturn this.set('type', type);\n\t}\n\n\t/**********************************************************************************************\n\t * RANGE.\n\t */\n\n\t/**\n\t * Hint defining a distance cutoff at which the light's intensity may be considered to have\n\t * reached zero. Supported only for point and spot lights. Must be > 0. When undefined, range\n\t * is assumed to be infinite.\n\t */\n\tpublic getRange(): number | null {\n\t\treturn this.get('range');\n\t}\n\n\t/**\n\t * Hint defining a distance cutoff at which the light's intensity may be considered to have\n\t * reached zero. Supported only for point and spot lights. Must be > 0. When undefined, range\n\t * is assumed to be infinite.\n\t */\n\tpublic setRange(range: number | null): this {\n\t\treturn this.set('range', range);\n\t}\n\n\t/**********************************************************************************************\n\t * SPOT LIGHT PROPERTIES\n\t */\n\n\t/**\n\t * Angle, in radians, from centre of spotlight where falloff begins. Must be >= 0 and\n\t * < outerConeAngle.\n\t */\n\tpublic getInnerConeAngle(): number {\n\t\treturn this.get('innerConeAngle');\n\t}\n\n\t/**\n\t * Angle, in radians, from centre of spotlight where falloff begins. Must be >= 0 and\n\t * < outerConeAngle.\n\t */\n\tpublic setInnerConeAngle(angle: number): this {\n\t\treturn this.set('innerConeAngle', angle);\n\t}\n\n\t/**\n\t * Angle, in radians, from centre of spotlight where falloff ends. Must be > innerConeAngle and\n\t * <= PI / 2.0.\n\t */\n\tpublic getOuterConeAngle(): number {\n\t\treturn this.get('outerConeAngle');\n\t}\n\n\t/**\n\t * Angle, in radians, from centre of spotlight where falloff ends. Must be > innerConeAngle and\n\t * <= PI / 2.0.\n\t */\n\tpublic setOuterConeAngle(angle: number): this {\n\t\treturn this.set('outerConeAngle', angle);\n\t}\n}\n","import { Extension, MathUtils, ReaderContext, WriterContext, vec3 } from '@gltf-transform/core';\nimport { KHR_LIGHTS_PUNCTUAL } from '../constants.js';\nimport { Light } from './light.js';\n\nconst NAME = KHR_LIGHTS_PUNCTUAL;\n\ninterface LightsPunctualRootDef {\n\tlights?: LightDef[];\n}\n\ninterface LightsPunctualNodeDef {\n\tlight: number;\n}\n\ninterface LightDef {\n\tname?: string;\n\tcolor?: vec3;\n\tintensity?: number;\n\trange?: number;\n\ttype: 'spot' | 'point' | 'directional';\n\tspot?: {\n\t\tinnerConeAngle?: number;\n\t\touterConeAngle?: number;\n\t};\n}\n\n/**\n * [`KHR_lights_punctual`](https://github.com/KhronosGroup/gltf/blob/main/extensions/2.0/Khronos/KHR_lights_punctual/) defines three \"punctual\" light types: directional, point and\n * spot.\n *\n * Punctual lights are parameterized, infinitely small points that emit light in\n * well-defined directions and intensities. Lights are referenced by nodes and inherit the transform\n * of that node.\n *\n * Properties:\n * - {@link Light}\n *\n * ### Example\n *\n * ```typescript\n * import { KHRLightsPunctual, Light, LightType } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const lightsExtension = document.createExtension(KHRLightsPunctual);\n *\n * // Create a Light property.\n * const light = lightsExtension.createLight()\n *\t.setType(LightType.POINT)\n *\t.setIntensity(2.0)\n *\t.setColor([1.0, 0.0, 0.0]);\n *\n * // Attach the property to a Material.\n * node.setExtension('KHR_lights_punctual', light);\n * ```\n */\nexport class KHRLightsPunctual extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new punctual Light property for use on a {@link Node}. */\n\tpublic createLight(name = ''): Light {\n\t\treturn new Light(this.document.getGraph(), name);\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tif (!jsonDoc.json.extensions || !jsonDoc.json.extensions[NAME]) return this;\n\n\t\tconst rootDef = jsonDoc.json.extensions[NAME] as LightsPunctualRootDef;\n\t\tconst lightDefs = rootDef.lights || ([] as LightDef[]);\n\t\tconst lights = lightDefs.map((lightDef) => {\n\t\t\tconst light = this.createLight()\n\t\t\t\t.setName(lightDef.name || '')\n\t\t\t\t.setType(lightDef.type);\n\n\t\t\tif (lightDef.color !== undefined) light.setColor(lightDef.color);\n\t\t\tif (lightDef.intensity !== undefined) light.setIntensity(lightDef.intensity);\n\t\t\tif (lightDef.range !== undefined) light.setRange(lightDef.range);\n\n\t\t\tif (lightDef.spot?.innerConeAngle !== undefined) {\n\t\t\t\tlight.setInnerConeAngle(lightDef.spot.innerConeAngle);\n\t\t\t}\n\t\t\tif (lightDef.spot?.outerConeAngle !== undefined) {\n\t\t\t\tlight.setOuterConeAngle(lightDef.spot.outerConeAngle);\n\t\t\t}\n\n\t\t\treturn light;\n\t\t});\n\n\t\tjsonDoc.json.nodes!.forEach((nodeDef, nodeIndex) => {\n\t\t\tif (!nodeDef.extensions || !nodeDef.extensions[NAME]) return;\n\t\t\tconst lightNodeDef = nodeDef.extensions[NAME] as LightsPunctualNodeDef;\n\t\t\tcontext.nodes[nodeIndex].setExtension(NAME, lights[lightNodeDef.light]);\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tif (this.properties.size === 0) return this;\n\n\t\tconst lightDefs = [];\n\t\tconst lightIndexMap = new Map<Light, number>();\n\n\t\tfor (const property of this.properties) {\n\t\t\tconst light = property as Light;\n\t\t\tconst lightDef = { type: light.getType() } as LightDef;\n\n\t\t\tif (!MathUtils.eq(light.getColor(), [1, 1, 1])) lightDef.color = light.getColor();\n\t\t\tif (light.getIntensity() !== 1) lightDef.intensity = light.getIntensity();\n\t\t\tif (light.getRange() != null) lightDef.range = light.getRange()!;\n\n\t\t\tif (light.getName()) lightDef.name = light.getName();\n\n\t\t\tif (light.getType() === Light.Type.SPOT) {\n\t\t\t\tlightDef.spot = {\n\t\t\t\t\tinnerConeAngle: light.getInnerConeAngle(),\n\t\t\t\t\touterConeAngle: light.getOuterConeAngle(),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tlightDefs.push(lightDef);\n\t\t\tlightIndexMap.set(light, lightDefs.length - 1);\n\t\t}\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listNodes()\n\t\t\t.forEach((node) => {\n\t\t\t\tconst light = node.getExtension<Light>(NAME);\n\t\t\t\tif (light) {\n\t\t\t\t\tconst nodeIndex = context.nodeIndexMap.get(node)!;\n\t\t\t\t\tconst nodeDef = jsonDoc.json.nodes![nodeIndex];\n\t\t\t\t\tnodeDef.extensions = nodeDef.extensions || {};\n\t\t\t\t\tnodeDef.extensions[NAME] = { light: lightIndexMap.get(light) };\n\t\t\t\t}\n\t\t\t});\n\n\t\tjsonDoc.json.extensions = jsonDoc.json.extensions || {};\n\t\tjsonDoc.json.extensions[NAME] = { lights: lightDefs };\n\n\t\treturn this;\n\t}\n}\n","import {\n\tExtensionProperty,\n\tIProperty,\n\tNullable,\n\tPropertyType,\n\tTexture,\n\tTextureChannel,\n\tTextureInfo,\n} from '@gltf-transform/core';\nimport { KHR_MATERIALS_ANISOTROPY } from '../constants.js';\n\ninterface IAnisotropy extends IProperty {\n\tanisotropyStrength: number;\n\tanisotropyRotation: number;\n\tanisotropyTexture: Texture;\n\tanisotropyTextureInfo: TextureInfo;\n}\n\nconst { R, G, B } = TextureChannel;\n\n/**\n * Defines anisotropy (directionally-dependent reflections) on a PBR {@link Material}. See\n * {@link KHRMaterialsAnisotropy}.\n */\nexport class Anisotropy extends ExtensionProperty<IAnisotropy> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_ANISOTROPY;\n\tpublic declare extensionName: typeof KHR_MATERIALS_ANISOTROPY;\n\tpublic declare propertyType: 'Anisotropy';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_ANISOTROPY;\n\t\tthis.propertyType = 'Anisotropy';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n\n\tprotected getDefaults(): Nullable<IAnisotropy> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, {\n\t\t\tanisotropyStrength: 0.0,\n\t\t\tanisotropyRotation: 0.0,\n\t\t\tanisotropyTexture: null,\n\t\t\tanisotropyTextureInfo: new TextureInfo(this.graph, 'anisotropyTextureInfo'),\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Anisotropy strength.\n\t */\n\n\t/** Anisotropy strength. */\n\tpublic getAnisotropyStrength(): number {\n\t\treturn this.get('anisotropyStrength');\n\t}\n\n\t/** Anisotropy strength. */\n\tpublic setAnisotropyStrength(strength: number): this {\n\t\treturn this.set('anisotropyStrength', strength);\n\t}\n\n\t/**********************************************************************************************\n\t * Anisotropy rotation.\n\t */\n\n\t/** Anisotropy rotation; linear multiplier. */\n\tpublic getAnisotropyRotation(): number {\n\t\treturn this.get('anisotropyRotation');\n\t}\n\n\t/** Anisotropy rotation; linear multiplier. */\n\tpublic setAnisotropyRotation(rotation: number): this {\n\t\treturn this.set('anisotropyRotation', rotation);\n\t}\n\n\t/**********************************************************************************************\n\t * Anisotropy texture.\n\t */\n\n\t/**\n\t * Anisotropy texture. Red and green channels represent the anisotropy\n\t * direction in [-1, 1] tangent, bitangent space, to be rotated by\n\t * anisotropyRotation. The blue channel contains strength as [0, 1] to be\n\t * multiplied by anisotropyStrength.\n\t */\n\tpublic getAnisotropyTexture(): Texture | null {\n\t\treturn this.getRef('anisotropyTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its anisotropy texture. If no\n\t * texture is attached, {@link TextureInfo} is `null`.\n\t */\n\tpublic getAnisotropyTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('anisotropyTexture') ? this.getRef('anisotropyTextureInfo') : null;\n\t}\n\n\t/** Anisotropy texture. See {@link Anisotropy.getAnisotropyTexture getAnisotropyTexture}. */\n\tpublic setAnisotropyTexture(texture: Texture | null): this {\n\t\treturn this.setRef('anisotropyTexture', texture, { channels: R | G | B });\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_ANISOTROPY } from '../constants.js';\nimport { Anisotropy } from './anisotropy.js';\n\nconst NAME = KHR_MATERIALS_ANISOTROPY;\n\ninterface AnisotropyDef {\n\tanisotropyStrength: number;\n\tanisotropyRotation: number;\n\tanisotropyTexture: GLTF.ITextureInfo;\n}\n\n/**\n * [`KHR_materials_anisotropy`](https://github.com/KhronosGroup/gltf/blob/main/extensions/2.0/Khronos/KHR_materials_anisotropy/)\n * defines anisotropy (directionally-dependent reflections) on a PBR material.\n *\n * This extension defines the anisotropic property of a material as observable with brushed metals\n * for instance. An asymmetric specular lobe model is introduced to allow for such phenomena. The\n * visually distinct feature of that lobe is the elongated appearance of the specular reflection.\n * For a single punctual light source, the specular reflection will eventually degenerate into a\n * zero width line in the limit, that is where the material is fully anisotropic, as opposed to be\n * fully isotropic in which case the specular reflection is radially symmetric.\n *\n * Properties:\n * - {@link Anisotropy}\n *\n * ### Example\n *\n * The `KHRMaterialsAnisotropy` class provides a single {@link ExtensionProperty} type, `Anisotropy`,\n * which may be attached to any {@link Material} instance. For example:\n *\n * ```typescript\n * import { KHRMaterialsAnisotropy, Anisotropy } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const anisotropyExtension = document.createExtension(KHRMaterialsAnisotropy);\n *\n * // Create an Anisotropy property.\n * const anisotropy = anisotropyExtension.createAnisotropy()\n * \t.setAnisotropyStrength(1.0)\n * \t.setAnisotropyRotation(Math.PI / 4);\n *\n * // Attach the property to a Material.\n * material.setExtension('KHR_materials_anisotropy', anisotropy);\n * ```\n */\nexport class KHRMaterialsAnisotropy extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new Anisotropy property for use on a {@link Material}. */\n\tpublic createAnisotropy(): Anisotropy {\n\t\treturn new Anisotropy(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst anisotropy = this.createAnisotropy();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, anisotropy);\n\n\t\t\t\tconst anisotropyDef = materialDef.extensions[NAME] as AnisotropyDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (anisotropyDef.anisotropyStrength !== undefined) {\n\t\t\t\t\tanisotropy.setAnisotropyStrength(anisotropyDef.anisotropyStrength);\n\t\t\t\t}\n\t\t\t\tif (anisotropyDef.anisotropyRotation !== undefined) {\n\t\t\t\t\tanisotropy.setAnisotropyRotation(anisotropyDef.anisotropyRotation);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (anisotropyDef.anisotropyTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = anisotropyDef.anisotropyTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tanisotropy.setAnisotropyTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(anisotropy.getAnisotropyTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst anisotropy = material.getExtension<Anisotropy>(NAME);\n\t\t\t\tif (anisotropy) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst anisotropyDef = (materialDef.extensions[NAME] = {} as AnisotropyDef);\n\n\t\t\t\t\tif (anisotropy.getAnisotropyStrength() > 0) {\n\t\t\t\t\t\tanisotropyDef.anisotropyStrength = anisotropy.getAnisotropyStrength();\n\t\t\t\t\t}\n\t\t\t\t\tif (anisotropy.getAnisotropyRotation() !== 0) {\n\t\t\t\t\t\tanisotropyDef.anisotropyRotation = anisotropy.getAnisotropyRotation();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (anisotropy.getAnisotropyTexture()) {\n\t\t\t\t\t\tconst texture = anisotropy.getAnisotropyTexture()!;\n\t\t\t\t\t\tconst textureInfo = anisotropy.getAnisotropyTextureInfo()!;\n\t\t\t\t\t\tanisotropyDef.anisotropyTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import {\n\tExtensionProperty,\n\tIProperty,\n\tNullable,\n\tPropertyType,\n\tTexture,\n\tTextureChannel,\n\tTextureInfo,\n} from '@gltf-transform/core';\nimport { KHR_MATERIALS_CLEARCOAT } from '../constants.js';\n\ninterface IClearcoat extends IProperty {\n\tclearcoatFactor: number;\n\tclearcoatTexture: Texture;\n\tclearcoatTextureInfo: TextureInfo;\n\n\tclearcoatRoughnessFactor: number;\n\tclearcoatRoughnessTexture: Texture;\n\tclearcoatRoughnessTextureInfo: TextureInfo;\n\n\tclearcoatNormalScale: number;\n\tclearcoatNormalTexture: Texture;\n\tclearcoatNormalTextureInfo: TextureInfo;\n}\n\nconst { R, G, B } = TextureChannel;\n\n/**\n * Defines clear coat for a PBR material. See {@link KHRMaterialsClearcoat}.\n */\nexport class Clearcoat extends ExtensionProperty<IClearcoat> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_CLEARCOAT;\n\tpublic declare extensionName: typeof KHR_MATERIALS_CLEARCOAT;\n\tpublic declare propertyType: 'Clearcoat';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_CLEARCOAT;\n\t\tthis.propertyType = 'Clearcoat';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n\n\tprotected getDefaults(): Nullable<IClearcoat> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, {\n\t\t\tclearcoatFactor: 0,\n\t\t\tclearcoatTexture: null,\n\t\t\tclearcoatTextureInfo: new TextureInfo(this.graph, 'clearcoatTextureInfo'),\n\n\t\t\tclearcoatRoughnessFactor: 0,\n\t\t\tclearcoatRoughnessTexture: null,\n\t\t\tclearcoatRoughnessTextureInfo: new TextureInfo(this.graph, 'clearcoatRoughnessTextureInfo'),\n\n\t\t\tclearcoatNormalScale: 1,\n\t\t\tclearcoatNormalTexture: null,\n\t\t\tclearcoatNormalTextureInfo: new TextureInfo(this.graph, 'clearcoatNormalTextureInfo'),\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Clearcoat.\n\t */\n\n\t/** Clearcoat; linear multiplier. See {@link Clearcoat.getClearcoatTexture getClearcoatTexture}. */\n\tpublic getClearcoatFactor(): number {\n\t\treturn this.get('clearcoatFactor');\n\t}\n\n\t/** Clearcoat; linear multiplier. See {@link Clearcoat.getClearcoatTexture getClearcoatTexture}. */\n\tpublic setClearcoatFactor(factor: number): this {\n\t\treturn this.set('clearcoatFactor', factor);\n\t}\n\n\t/**\n\t * Clearcoat texture; linear multiplier. The `r` channel of this texture specifies an amount\n\t * [0-1] of coating over the surface of the material, which may have its own roughness and\n\t * normal map properties.\n\t */\n\tpublic getClearcoatTexture(): Texture | null {\n\t\treturn this.getRef('clearcoatTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its clearcoat texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getClearcoatTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('clearcoatTexture') ? this.getRef('clearcoatTextureInfo') : null;\n\t}\n\n\t/** Sets clearcoat texture. See {@link Clearcoat.getClearcoatTexture getClearcoatTexture}. */\n\tpublic setClearcoatTexture(texture: Texture | null): this {\n\t\treturn this.setRef('clearcoatTexture', texture, { channels: R });\n\t}\n\n\t/**********************************************************************************************\n\t * Clearcoat roughness.\n\t */\n\n\t/**\n\t * Clearcoat roughness; linear multiplier.\n\t * See {@link Clearcoat.getClearcoatRoughnessTexture getClearcoatRoughnessTexture}.\n\t */\n\tpublic getClearcoatRoughnessFactor(): number {\n\t\treturn this.get('clearcoatRoughnessFactor');\n\t}\n\n\t/**\n\t * Clearcoat roughness; linear multiplier.\n\t * See {@link Clearcoat.getClearcoatRoughnessTexture getClearcoatRoughnessTexture}.\n\t */\n\tpublic setClearcoatRoughnessFactor(factor: number): this {\n\t\treturn this.set('clearcoatRoughnessFactor', factor);\n\t}\n\n\t/**\n\t * Clearcoat roughness texture; linear multiplier. The `g` channel of this texture specifies\n\t * roughness, independent of the base layer's roughness.\n\t */\n\tpublic getClearcoatRoughnessTexture(): Texture | null {\n\t\treturn this.getRef('clearcoatRoughnessTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its clearcoat roughness texture. If no texture is\n\t * attached, {@link TextureInfo} is `null`.\n\t */\n\tpublic getClearcoatRoughnessTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('clearcoatRoughnessTexture') ? this.getRef('clearcoatRoughnessTextureInfo') : null;\n\t}\n\n\t/**\n\t * Sets clearcoat roughness texture.\n\t * See {@link Clearcoat.getClearcoatRoughnessTexture getClearcoatRoughnessTexture}.\n\t */\n\tpublic setClearcoatRoughnessTexture(texture: Texture | null): this {\n\t\treturn this.setRef('clearcoatRoughnessTexture', texture, { channels: G });\n\t}\n\n\t/**********************************************************************************************\n\t * Clearcoat normals.\n\t */\n\n\t/** Clearcoat normal scale. See {@link Clearcoat.getClearcoatNormalTexture getClearcoatNormalTexture}. */\n\tpublic getClearcoatNormalScale(): number {\n\t\treturn this.get('clearcoatNormalScale');\n\t}\n\n\t/** Clearcoat normal scale. See {@link Clearcoat.getClearcoatNormalTexture getClearcoatNormalTexture}. */\n\tpublic setClearcoatNormalScale(scale: number): this {\n\t\treturn this.set('clearcoatNormalScale', scale);\n\t}\n\n\t/**\n\t * Clearcoat normal map. Independent of the material base layer normal map.\n\t */\n\tpublic getClearcoatNormalTexture(): Texture | null {\n\t\treturn this.getRef('clearcoatNormalTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its clearcoat normal texture. If no texture is\n\t * attached, {@link TextureInfo} is `null`.\n\t */\n\tpublic getClearcoatNormalTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('clearcoatNormalTexture') ? this.getRef('clearcoatNormalTextureInfo') : null;\n\t}\n\n\t/** Sets clearcoat normal texture. See {@link Clearcoat.getClearcoatNormalTexture getClearcoatNormalTexture}. */\n\tpublic setClearcoatNormalTexture(texture: Texture | null): this {\n\t\treturn this.setRef('clearcoatNormalTexture', texture, { channels: R | G | B });\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_CLEARCOAT } from '../constants.js';\nimport { Clearcoat } from './clearcoat.js';\n\nconst NAME = KHR_MATERIALS_CLEARCOAT;\n\ninterface ClearcoatDef {\n\tclearcoatFactor?: number;\n\tclearcoatRoughnessFactor?: number;\n\tclearcoatTexture?: GLTF.ITextureInfo;\n\tclearcoatRoughnessTexture?: GLTF.ITextureInfo;\n\tclearcoatNormalTexture?: GLTF.IMaterialNormalTextureInfo;\n}\n\n/**\n * [KHR_materials_clearcoat](https://github.com/KhronosGroup/gltf/blob/main/extensions/2.0/Khronos/KHR_materials_clearcoat/)\n * defines a clear coating on a glTF PBR material.\n *\n * ![Illustration](/media/extensions/khr-materials-clearcoat.png)\n *\n * > _**Figure:** Comparison of a carbon-fiber material without clearcoat (left) and with clearcoat\n * > (right). Source: [Filament](https://google.github.io/filament/Materials.html)._\n *\n * A clear coat is a common technique used in Physically-Based\n * Rendering for a protective layer applied to a base material.\n * Commonly used to represent car paint, carbon fiber, or thin lacquers.\n *\n * Properties:\n * - {@link Clearcoat}\n *\n * ### Example\n *\n * ```typescript\n * import { KHRMaterialsClearcoat, Clearcoat } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const clearcoatExtension = document.createExtension(KHRMaterialsClearcoat);\n *\n * // Create Clearcoat property.\n * const clearcoat = clearcoatExtension.createClearcoat()\n *\t.setClearcoatFactor(1.0);\n *\n * // Assign to a Material.\n * material.setExtension('KHR_materials_clearcoat', clearcoat);\n * ```\n */\nexport class KHRMaterialsClearcoat extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new Clearcoat property for use on a {@link Material}. */\n\tpublic createClearcoat(): Clearcoat {\n\t\treturn new Clearcoat(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst clearcoat = this.createClearcoat();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, clearcoat);\n\n\t\t\t\tconst clearcoatDef = materialDef.extensions[NAME] as ClearcoatDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (clearcoatDef.clearcoatFactor !== undefined) {\n\t\t\t\t\tclearcoat.setClearcoatFactor(clearcoatDef.clearcoatFactor);\n\t\t\t\t}\n\t\t\t\tif (clearcoatDef.clearcoatRoughnessFactor !== undefined) {\n\t\t\t\t\tclearcoat.setClearcoatRoughnessFactor(clearcoatDef.clearcoatRoughnessFactor);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (clearcoatDef.clearcoatTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = clearcoatDef.clearcoatTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tclearcoat.setClearcoatTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(clearcoat.getClearcoatTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t\tif (clearcoatDef.clearcoatRoughnessTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = clearcoatDef.clearcoatRoughnessTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tclearcoat.setClearcoatRoughnessTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(clearcoat.getClearcoatRoughnessTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t\tif (clearcoatDef.clearcoatNormalTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = clearcoatDef.clearcoatNormalTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tclearcoat.setClearcoatNormalTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(clearcoat.getClearcoatNormalTextureInfo()!, textureInfoDef);\n\t\t\t\t\tif (textureInfoDef.scale !== undefined) {\n\t\t\t\t\t\tclearcoat.setClearcoatNormalScale(textureInfoDef.scale);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst clearcoat = material.getExtension<Clearcoat>(NAME);\n\t\t\t\tif (clearcoat) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst clearcoatDef = (materialDef.extensions[NAME] = {\n\t\t\t\t\t\tclearcoatFactor: clearcoat.getClearcoatFactor(),\n\t\t\t\t\t\tclearcoatRoughnessFactor: clearcoat.getClearcoatRoughnessFactor(),\n\t\t\t\t\t} as ClearcoatDef);\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (clearcoat.getClearcoatTexture()) {\n\t\t\t\t\t\tconst texture = clearcoat.getClearcoatTexture()!;\n\t\t\t\t\t\tconst textureInfo = clearcoat.getClearcoatTextureInfo()!;\n\t\t\t\t\t\tclearcoatDef.clearcoatTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t\tif (clearcoat.getClearcoatRoughnessTexture()) {\n\t\t\t\t\t\tconst texture = clearcoat.getClearcoatRoughnessTexture()!;\n\t\t\t\t\t\tconst textureInfo = clearcoat.getClearcoatRoughnessTextureInfo()!;\n\t\t\t\t\t\tclearcoatDef.clearcoatRoughnessTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t\tif (clearcoat.getClearcoatNormalTexture()) {\n\t\t\t\t\t\tconst texture = clearcoat.getClearcoatNormalTexture()!;\n\t\t\t\t\t\tconst textureInfo = clearcoat.getClearcoatNormalTextureInfo()!;\n\t\t\t\t\t\tclearcoatDef.clearcoatNormalTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t\tif (clearcoat.getClearcoatNormalScale() !== 1) {\n\t\t\t\t\t\t\tclearcoatDef.clearcoatNormalTexture.scale = clearcoat.getClearcoatNormalScale();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { ExtensionProperty, IProperty, Nullable, PropertyType } from '@gltf-transform/core';\nimport { KHR_MATERIALS_EMISSIVE_STRENGTH } from '../constants.js';\n\ninterface IEmissiveStrength extends IProperty {\n\temissiveStrength: number;\n}\n\n/**\n * Defines emissive strength for a PBR {@link Material}, allowing high-dynamic-range\n * (HDR) emissive materials. See {@link KHRMaterialsEmissiveStrength}.\n */\nexport class EmissiveStrength extends ExtensionProperty<IEmissiveStrength> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_EMISSIVE_STRENGTH;\n\tpublic declare extensionName: typeof KHR_MATERIALS_EMISSIVE_STRENGTH;\n\tpublic declare propertyType: 'EmissiveStrength';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_EMISSIVE_STRENGTH;\n\t\tthis.propertyType = 'EmissiveStrength';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n\n\tprotected getDefaults(): Nullable<IEmissiveStrength> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, { emissiveStrength: 1.0 });\n\t}\n\n\t/**********************************************************************************************\n\t * EmissiveStrength.\n\t */\n\n\t/** EmissiveStrength. */\n\tpublic getEmissiveStrength(): number {\n\t\treturn this.get('emissiveStrength');\n\t}\n\n\t/** EmissiveStrength. */\n\tpublic setEmissiveStrength(strength: number): this {\n\t\treturn this.set('emissiveStrength', strength);\n\t}\n}\n","import { Extension, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_EMISSIVE_STRENGTH } from '../constants.js';\nimport { EmissiveStrength } from './emissive-strength.js';\n\nconst NAME = KHR_MATERIALS_EMISSIVE_STRENGTH;\n\ninterface EmissiveStrengthDef {\n\temissiveStrength?: number;\n}\n\n/**\n * [KHR_materials_emissive_strength](https://github.com/KhronosGroup/gltf/blob/main/extensions/2.0/Khronos/KHR_materials_emissive_strength/)\n * defines emissive strength and enables high-dynamic-range (HDR) emissive materials.\n *\n * The core glTF 2.0 material model includes {@link Material.setEmissiveFactor `emissiveFactor`}\n * and {@link Material.setEmissiveTexture `emissiveTexture`} to control the color and intensity\n * of the light being emitted by the material, clamped to the range [0.0, 1.0]. However, in\n * PBR environments with HDR reflections and lighting, stronger emission effects may be desirable.\n *\n * In this extension, a new {@link EmissiveStrength.setEmissiveStrength `emissiveStrength`} scalar\n * factor is supplied, which governs the upper limit of emissive strength per material and may be\n * given arbitrarily high values.\n *\n * For implementations where a physical light unit is needed, the units for the multiplicative\n * product of the emissive texture and factor are candela per square meter (cd / m2), sometimes\n * called _nits_. Many realtime rendering engines simplify this calculation by assuming that an\n * emissive factor of 1.0 results in a fully exposed pixel.\n *\n * Properties:\n * - {@link EmissiveStrength}\n *\n * ### Example\n *\n * ```typescript\n * import { KHRMaterialsEmissiveStrength, EmissiveStrength } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const emissiveStrengthExtension = document.createExtension(KHRMaterialsEmissiveStrength);\n *\n * // Create EmissiveStrength property.\n * const emissiveStrength = emissiveStrengthExtension\n * \t.createEmissiveStrength().setEmissiveStrength(5.0);\n *\n * // Assign to a Material.\n * material.setExtension('KHR_materials_emissive_strength', emissiveStrength);\n * ```\n */\nexport class KHRMaterialsEmissiveStrength extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new EmissiveStrength property for use on a {@link Material}. */\n\tpublic createEmissiveStrength(): EmissiveStrength {\n\t\treturn new EmissiveStrength(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst emissiveStrength = this.createEmissiveStrength();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, emissiveStrength);\n\n\t\t\t\tconst emissiveStrengthDef = materialDef.extensions[NAME] as EmissiveStrengthDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (emissiveStrengthDef.emissiveStrength !== undefined) {\n\t\t\t\t\temissiveStrength.setEmissiveStrength(emissiveStrengthDef.emissiveStrength);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst emissiveStrength = material.getExtension<EmissiveStrength>(NAME);\n\t\t\t\tif (emissiveStrength) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tmaterialDef.extensions[NAME] = {\n\t\t\t\t\t\temissiveStrength: emissiveStrength.getEmissiveStrength(),\n\t\t\t\t\t} as EmissiveStrengthDef;\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { ExtensionProperty, IProperty, Nullable, PropertyType } from '@gltf-transform/core';\nimport { KHR_MATERIALS_IOR } from '../constants.js';\n\ninterface IIOR extends IProperty {\n\tior: number;\n}\n\n/**\n * Defines index of refraction for a PBR {@link Material}. See {@link KHRMaterialsIOR}.\n */\nexport class IOR extends ExtensionProperty<IIOR> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_IOR;\n\tpublic declare extensionName: typeof KHR_MATERIALS_IOR;\n\tpublic declare propertyType: 'IOR';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_IOR;\n\t\tthis.propertyType = 'IOR';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n\n\tprotected getDefaults(): Nullable<IIOR> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, { ior: 1.5 });\n\t}\n\n\t/**********************************************************************************************\n\t * IOR.\n\t */\n\n\t/** IOR. */\n\tpublic getIOR(): number {\n\t\treturn this.get('ior');\n\t}\n\n\t/** IOR. */\n\tpublic setIOR(ior: number): this {\n\t\treturn this.set('ior', ior);\n\t}\n}\n","import { Extension, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_IOR } from '../constants.js';\nimport { IOR } from './ior.js';\n\nconst NAME = KHR_MATERIALS_IOR;\n\ninterface IORDef {\n\tior?: number;\n}\n\n/**\n * [KHR_materials_ior](https://github.com/KhronosGroup/gltf/blob/main/extensions/2.0/Khronos/KHR_materials_ior/)\n * defines index of refraction on a glTF PBR material.\n *\n * The dielectric BRDF of the metallic-roughness material in glTF uses a fixed value of 1.5 for the\n * index of refraction. This is a good fit for many plastics and glass, but not for other materials\n * like water or asphalt, sapphire or diamond. `KHR_materials_ior` allows users to set the index of\n * refraction to a certain value.\n *\n * Properties:\n * - {@link IOR}\n *\n * ### Example\n *\n * ```typescript\n * import { KHRMaterialsIOR, IOR } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const iorExtension = document.createExtension(KHRMaterialsIOR);\n *\n * // Create IOR property.\n * const ior = iorExtension.createIOR().setIOR(1.0);\n *\n * // Assign to a Material.\n * material.setExtension('KHR_materials_ior', ior);\n * ```\n */\nexport class KHRMaterialsIOR extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new IOR property for use on a {@link Material}. */\n\tpublic createIOR(): IOR {\n\t\treturn new IOR(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst ior = this.createIOR();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, ior);\n\n\t\t\t\tconst iorDef = materialDef.extensions[NAME] as IORDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (iorDef.ior !== undefined) {\n\t\t\t\t\tior.setIOR(iorDef.ior);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst ior = material.getExtension<IOR>(NAME);\n\t\t\t\tif (ior) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tmaterialDef.extensions[NAME] = {\n\t\t\t\t\t\tior: ior.getIOR(),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import {\n\tExtensionProperty,\n\tIProperty,\n\tNullable,\n\tPropertyType,\n\tTexture,\n\tTextureChannel,\n\tTextureInfo,\n} from '@gltf-transform/core';\nimport { KHR_MATERIALS_IRIDESCENCE } from '../constants.js';\n\ninterface IIridescence extends IProperty {\n\tiridescenceFactor: number;\n\tiridescenceTexture: Texture;\n\tiridescenceTextureInfo: TextureInfo;\n\tiridescenceIOR: number;\n\tiridescenceThicknessMinimum: number;\n\tiridescenceThicknessMaximum: number;\n\tiridescenceThicknessTexture: Texture;\n\tiridescenceThicknessTextureInfo: TextureInfo;\n}\n\nconst { R, G } = TextureChannel;\n\n/**\n * Defines iridescence (thin film interference) on a PBR {@link Material}. See {@link KHRMaterialsIridescence}.\n */\nexport class Iridescence extends ExtensionProperty<IIridescence> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_IRIDESCENCE;\n\tpublic declare extensionName: typeof KHR_MATERIALS_IRIDESCENCE;\n\tpublic declare propertyType: 'Iridescence';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_IRIDESCENCE;\n\t\tthis.propertyType = 'Iridescence';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n\n\tprotected getDefaults(): Nullable<IIridescence> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, {\n\t\t\tiridescenceFactor: 0.0,\n\t\t\tiridescenceTexture: null,\n\t\t\tiridescenceTextureInfo: new TextureInfo(this.graph, 'iridescenceTextureInfo'),\n\t\t\tiridescenceIOR: 1.3,\n\t\t\tiridescenceThicknessMinimum: 100,\n\t\t\tiridescenceThicknessMaximum: 400,\n\t\t\tiridescenceThicknessTexture: null,\n\t\t\tiridescenceThicknessTextureInfo: new TextureInfo(this.graph, 'iridescenceThicknessTextureInfo'),\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Iridescence.\n\t */\n\n\t/** Iridescence; linear multiplier. See {@link Iridescence.getIridescenceTexture getIridescenceTexture}. */\n\tpublic getIridescenceFactor(): number {\n\t\treturn this.get('iridescenceFactor');\n\t}\n\n\t/** Iridescence; linear multiplier. See {@link Iridescence.getIridescenceTexture getIridescenceTexture}. */\n\tpublic setIridescenceFactor(factor: number): this {\n\t\treturn this.set('iridescenceFactor', factor);\n\t}\n\n\t/**\n\t * Iridescence intensity.\n\t *\n\t * Only the red (R) channel is used for iridescence intensity, but this texture may optionally\n\t * be packed with additional data in the other channels.\n\t */\n\tpublic getIridescenceTexture(): Texture | null {\n\t\treturn this.getRef('iridescenceTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its iridescence texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getIridescenceTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('iridescenceTexture') ? this.getRef('iridescenceTextureInfo') : null;\n\t}\n\n\t/** Iridescence intensity. See {@link Iridescence.getIridescenceTexture getIridescenceTexture}. */\n\tpublic setIridescenceTexture(texture: Texture | null): this {\n\t\treturn this.setRef('iridescenceTexture', texture, { channels: R });\n\t}\n\n\t/**********************************************************************************************\n\t * Iridescence IOR.\n\t */\n\n\t/** Index of refraction of the dielectric thin-film layer. */\n\tpublic getIridescenceIOR(): number {\n\t\treturn this.get('iridescenceIOR');\n\t}\n\n\t/** Index of refraction of the dielectric thin-film layer. */\n\tpublic setIridescenceIOR(ior: number): this {\n\t\treturn this.set('iridescenceIOR', ior);\n\t}\n\n\t/**********************************************************************************************\n\t * Iridescence thickness.\n\t */\n\n\t/** Minimum thickness of the thin-film layer, in nanometers (nm). */\n\tpublic getIridescenceThicknessMinimum(): number {\n\t\treturn this.get('iridescenceThicknessMinimum');\n\t}\n\n\t/** Minimum thickness of the thin-film layer, in nanometers (nm). */\n\tpublic setIridescenceThicknessMinimum(thickness: number): this {\n\t\treturn this.set('iridescenceThicknessMinimum', thickness);\n\t}\n\n\t/** Maximum thickness of the thin-film layer, in nanometers (nm). */\n\tpublic getIridescenceThicknessMaximum(): number {\n\t\treturn this.get('iridescenceThicknessMaximum');\n\t}\n\n\t/** Maximum thickness of the thin-film layer, in nanometers (nm). */\n\tpublic setIridescenceThicknessMaximum(thickness: number): this {\n\t\treturn this.set('iridescenceThicknessMaximum', thickness);\n\t}\n\n\t/**\n\t * The green channel of this texture defines the thickness of the\n\t * thin-film layer by blending between the minimum and maximum thickness.\n\t */\n\tpublic getIridescenceThicknessTexture(): Texture | null {\n\t\treturn this.getRef('iridescenceThicknessTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its iridescence thickness texture.\n\t * If no texture is attached, {@link TextureInfo} is `null`.\n\t */\n\tpublic getIridescenceThicknessTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('iridescenceThicknessTexture') ? this.getRef('iridescenceThicknessTextureInfo') : null;\n\t}\n\n\t/**\n\t * Sets iridescence thickness texture.\n\t * See {@link Iridescence.getIridescenceThicknessTexture getIridescenceThicknessTexture}.\n\t */\n\tpublic setIridescenceThicknessTexture(texture: Texture | null): this {\n\t\treturn this.setRef('iridescenceThicknessTexture', texture, { channels: G });\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_IRIDESCENCE } from '../constants.js';\nimport { Iridescence } from './iridescence.js';\n\nconst NAME = KHR_MATERIALS_IRIDESCENCE;\n\ninterface IridescenceDef {\n\tiridescenceFactor: number;\n\tiridescenceTexture: GLTF.ITextureInfo;\n\tiridescenceIor: number;\n\tiridescenceThicknessMinimum: number;\n\tiridescenceThicknessMaximum: number;\n\tiridescenceThicknessTexture: GLTF.ITextureInfo;\n}\n\n/**\n * [`KHR_materials_iridescence`](https://github.com/KhronosGroup/gltf/blob/main/extensions/2.0/Khronos/KHR_materials_iridescence/)\n * defines iridescence (thin film interference) on a PBR material.\n *\n * Iridescence describes an effect where hue varies depending on the viewing\n * angle and illumination angle: A thin-film of a semi-transparent layer\n * results in inter-reflections and due to thin-film interference, certain\n * wavelengths get absorbed or amplified. Iridescence can be seen on soap\n * bubbles, oil films, or on the wings of many insects. With this extension,\n * thickness and index of refraction (IOR) of the thin-film can be specified,\n * enabling iridescent materials.\n *\n * Properties:\n * - {@link Iridescence}\n *\n * ### Example\n *\n * The `KHRMaterialsIridescence` class provides a single {@link ExtensionProperty} type, `Iridescence`,\n * which may be attached to any {@link Material} instance. For example:\n *\n * ```typescript\n * import { KHRMaterialsIridescence, Iridescence } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const iridescenceExtension = document.createExtension(KHRMaterialsIridescence);\n *\n * // Create an Iridescence property.\n * const iridescence = iridescenceExtension.createIridescence()\n * \t.setIridescenceFactor(1.0)\n * \t.setIridescenceIOR(1.8);\n *\n * // Attach the property to a Material.\n * material.setExtension('KHR_materials_iridescence', iridescence);\n * ```\n */\nexport class KHRMaterialsIridescence extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new Iridescence property for use on a {@link Material}. */\n\tpublic createIridescence(): Iridescence {\n\t\treturn new Iridescence(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst iridescence = this.createIridescence();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, iridescence);\n\n\t\t\t\tconst iridescenceDef = materialDef.extensions[NAME] as IridescenceDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (iridescenceDef.iridescenceFactor !== undefined) {\n\t\t\t\t\tiridescence.setIridescenceFactor(iridescenceDef.iridescenceFactor);\n\t\t\t\t}\n\t\t\t\tif (iridescenceDef.iridescenceIor !== undefined) {\n\t\t\t\t\tiridescence.setIridescenceIOR(iridescenceDef.iridescenceIor);\n\t\t\t\t}\n\t\t\t\tif (iridescenceDef.iridescenceThicknessMinimum !== undefined) {\n\t\t\t\t\tiridescence.setIridescenceThicknessMinimum(iridescenceDef.iridescenceThicknessMinimum);\n\t\t\t\t}\n\t\t\t\tif (iridescenceDef.iridescenceThicknessMaximum !== undefined) {\n\t\t\t\t\tiridescence.setIridescenceThicknessMaximum(iridescenceDef.iridescenceThicknessMaximum);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (iridescenceDef.iridescenceTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = iridescenceDef.iridescenceTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tiridescence.setIridescenceTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(iridescence.getIridescenceTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t\tif (iridescenceDef.iridescenceThicknessTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = iridescenceDef.iridescenceThicknessTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tiridescence.setIridescenceThicknessTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(iridescence.getIridescenceThicknessTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst iridescence = material.getExtension<Iridescence>(NAME);\n\t\t\t\tif (iridescence) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst iridescenceDef = (materialDef.extensions[NAME] = {} as IridescenceDef);\n\n\t\t\t\t\tif (iridescence.getIridescenceFactor() > 0) {\n\t\t\t\t\t\tiridescenceDef.iridescenceFactor = iridescence.getIridescenceFactor();\n\t\t\t\t\t}\n\t\t\t\t\tif (iridescence.getIridescenceIOR() !== 1.3) {\n\t\t\t\t\t\tiridescenceDef.iridescenceIor = iridescence.getIridescenceIOR();\n\t\t\t\t\t}\n\t\t\t\t\tif (iridescence.getIridescenceThicknessMinimum() !== 100) {\n\t\t\t\t\t\tiridescenceDef.iridescenceThicknessMinimum = iridescence.getIridescenceThicknessMinimum();\n\t\t\t\t\t}\n\t\t\t\t\tif (iridescence.getIridescenceThicknessMaximum() !== 400) {\n\t\t\t\t\t\tiridescenceDef.iridescenceThicknessMaximum = iridescence.getIridescenceThicknessMaximum();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (iridescence.getIridescenceTexture()) {\n\t\t\t\t\t\tconst texture = iridescence.getIridescenceTexture()!;\n\t\t\t\t\t\tconst textureInfo = iridescence.getIridescenceTextureInfo()!;\n\t\t\t\t\t\tiridescenceDef.iridescenceTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t\tif (iridescence.getIridescenceThicknessTexture()) {\n\t\t\t\t\t\tconst texture = iridescence.getIridescenceThicknessTexture()!;\n\t\t\t\t\t\tconst textureInfo = iridescence.getIridescenceThicknessTextureInfo()!;\n\t\t\t\t\t\tiridescenceDef.iridescenceThicknessTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import {\n\tColorUtils,\n\tExtensionProperty,\n\tIProperty,\n\tNullable,\n\tPropertyType,\n\tTexture,\n\tTextureChannel,\n\tTextureInfo,\n\tvec3,\n\tvec4,\n} from '@gltf-transform/core';\nimport { KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS } from '../constants.js';\n\ninterface IPBRSpecularGlossiness extends IProperty {\n\tdiffuseFactor: vec4;\n\tdiffuseTexture: Texture;\n\tdiffuseTextureInfo: TextureInfo;\n\tspecularFactor: vec3;\n\tglossinessFactor: number;\n\tspecularGlossinessTexture: Texture;\n\tspecularGlossinessTextureInfo: TextureInfo;\n}\n\nconst { R, G, B, A } = TextureChannel;\n\n/**\n * Converts a {@link Material} to a spec/gloss workflow. See {@link KHRMaterialsPBRSpecularGlossiness}.\n */\nexport class PBRSpecularGlossiness extends ExtensionProperty<IPBRSpecularGlossiness> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS;\n\tpublic declare extensionName: typeof KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS;\n\tpublic declare propertyType: 'PBRSpecularGlossiness';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS;\n\t\tthis.propertyType = 'PBRSpecularGlossiness';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n\n\tprotected getDefaults(): Nullable<IPBRSpecularGlossiness> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, {\n\t\t\tdiffuseFactor: [1.0, 1.0, 1.0, 1.0] as vec4,\n\t\t\tdiffuseTexture: null,\n\t\t\tdiffuseTextureInfo: new TextureInfo(this.graph, 'diffuseTextureInfo'),\n\t\t\tspecularFactor: [1.0, 1.0, 1.0] as vec3,\n\t\t\tglossinessFactor: 1.0,\n\t\t\tspecularGlossinessTexture: null,\n\t\t\tspecularGlossinessTextureInfo: new TextureInfo(this.graph, 'specularGlossinessTextureInfo'),\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Diffuse.\n\t */\n\n\t/** Diffuse; Linear-sRGB components. See {@link PBRSpecularGlossiness.getDiffuseTexture getDiffuseTexture}. */\n\tpublic getDiffuseFactor(): vec4 {\n\t\treturn this.get('diffuseFactor');\n\t}\n\n\t/** Diffuse; Linear-sRGB components. See {@link PBRSpecularGlossiness.getDiffuseTexture getDiffuseTexture}. */\n\tpublic setDiffuseFactor(factor: vec4): this {\n\t\treturn this.set('diffuseFactor', factor);\n\t}\n\n\t/**\n\t * Diffuse; sRGB hexadecimal color.\n\t * @deprecated Will be removed in v4. Use {@link ColorUtils.hexToFactor} / {@link ColorUtils.factorToHex} instead.\n\t */\n\tpublic getDiffuseHex(): number {\n\t\treturn ColorUtils.factorToHex(this.getDiffuseFactor());\n\t}\n\n\t/**\n\t * Diffuse; sRGB hexadecimal color.\n\t * @deprecated Will be removed in v4. Use {@link ColorUtils.hexToFactor} / {@link ColorUtils.factorToHex} instead.\n\t */\n\tpublic setDiffuseHex(hex: number): this {\n\t\tconst factor = this.getDiffuseFactor().slice() as vec4;\n\t\treturn this.setDiffuseFactor(ColorUtils.hexToFactor(hex, factor));\n\t}\n\n\t/**\n\t * Diffuse texture; sRGB. Alternative to baseColorTexture, used within the\n\t * spec/gloss PBR workflow.\n\t */\n\tpublic getDiffuseTexture(): Texture | null {\n\t\treturn this.getRef('diffuseTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its diffuse texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getDiffuseTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('diffuseTexture') ? this.getRef('diffuseTextureInfo') : null;\n\t}\n\n\t/** Sets diffuse texture. See {@link PBRSpecularGlossiness.getDiffuseTexture getDiffuseTexture}. */\n\tpublic setDiffuseTexture(texture: Texture | null): this {\n\t\treturn this.setRef('diffuseTexture', texture, { channels: R | G | B | A, isColor: true });\n\t}\n\n\t/**********************************************************************************************\n\t * Specular.\n\t */\n\n\t/** Specular; linear multiplier. */\n\tpublic getSpecularFactor(): vec3 {\n\t\treturn this.get('specularFactor');\n\t}\n\n\t/** Specular; linear multiplier. */\n\tpublic setSpecularFactor(factor: vec3): this {\n\t\treturn this.set('specularFactor', factor);\n\t}\n\n\t/**********************************************************************************************\n\t * Glossiness.\n\t */\n\n\t/** Glossiness; linear multiplier. */\n\tpublic getGlossinessFactor(): number {\n\t\treturn this.get('glossinessFactor');\n\t}\n\n\t/** Glossiness; linear multiplier. */\n\tpublic setGlossinessFactor(factor: number): this {\n\t\treturn this.set('glossinessFactor', factor);\n\t}\n\n\t/**********************************************************************************************\n\t * Specular/Glossiness.\n\t */\n\n\t/** Spec/gloss texture; linear multiplier. */\n\tpublic getSpecularGlossinessTexture(): Texture | null {\n\t\treturn this.getRef('specularGlossinessTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its spec/gloss texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getSpecularGlossinessTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('specularGlossinessTexture') ? this.getRef('specularGlossinessTextureInfo') : null;\n\t}\n\n\t/** Spec/gloss texture; linear multiplier. */\n\tpublic setSpecularGlossinessTexture(texture: Texture | null): this {\n\t\treturn this.setRef('specularGlossinessTexture', texture, { channels: R | G | B | A });\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext, vec3, vec4 } from '@gltf-transform/core';\nimport { KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS } from '../constants.js';\nimport { PBRSpecularGlossiness } from './pbr-specular-glossiness.js';\n\nconst NAME = KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS;\n\ninterface SpecularGlossinessDef {\n\tdiffuseFactor?: vec4;\n\tspecularFactor: vec3;\n\tglossinessFactor: number;\n\tdiffuseTexture?: GLTF.ITextureInfo;\n\tspecularGlossinessTexture?: GLTF.ITextureInfo;\n}\n\n/**\n * [`KHR_materials_pbrSpecularGlossiness`](https://github.com/KhronosGroup/gltf/blob/main/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness/)\n * converts a PBR material from the default metal/rough workflow to a spec/gloss workflow.\n *\n * > _**NOTICE:** The spec/gloss workflow does _not_ support other PBR extensions such as clearcoat,\n * > transmission, IOR, etc. For the complete PBR feature set and specular data, use the\n * > {@link KHRMaterialsSpecular} extension instead, which provides specular data within a metal/rough\n * > workflow._\n *\n * ![Illustration](/media/extensions/khr-material-pbr-specular-glossiness.png)\n *\n * > _**Figure:** Components of a PBR spec/gloss material. Source: Khronos Group._\n *\n * Properties:\n * - {@link PBRSpecularGlossiness}\n *\n * ### Example\n *\n * ```typescript\n * import { KHRMaterialsPBRSpecularGlossiness } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const specGlossExtension = document.createExtension(KHRMaterialsPBRSpecularGlossiness);\n *\n * // Create a PBRSpecularGlossiness property.\n * const specGloss = specGlossExtension.createPBRSpecularGlossiness()\n * \t.setSpecularFactor(1.0);\n *\n * // // Assign to a Material.\n * material.setExtension('KHR_materials_pbrSpecularGlossiness', specGloss);\n * ```\n */\nexport class KHRMaterialsPBRSpecularGlossiness extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new PBRSpecularGlossiness property for use on a {@link Material}. */\n\tpublic createPBRSpecularGlossiness(): PBRSpecularGlossiness {\n\t\treturn new PBRSpecularGlossiness(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst specGloss = this.createPBRSpecularGlossiness();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, specGloss);\n\n\t\t\t\tconst specGlossDef = materialDef.extensions[NAME] as SpecularGlossinessDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (specGlossDef.diffuseFactor !== undefined) {\n\t\t\t\t\tspecGloss.setDiffuseFactor(specGlossDef.diffuseFactor);\n\t\t\t\t}\n\t\t\t\tif (specGlossDef.specularFactor !== undefined) {\n\t\t\t\t\tspecGloss.setSpecularFactor(specGlossDef.specularFactor);\n\t\t\t\t}\n\t\t\t\tif (specGlossDef.glossinessFactor !== undefined) {\n\t\t\t\t\tspecGloss.setGlossinessFactor(specGlossDef.glossinessFactor);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (specGlossDef.diffuseTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = specGlossDef.diffuseTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tspecGloss.setDiffuseTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(specGloss.getDiffuseTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t\tif (specGlossDef.specularGlossinessTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = specGlossDef.specularGlossinessTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tspecGloss.setSpecularGlossinessTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(specGloss.getSpecularGlossinessTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst specGloss = material.getExtension<PBRSpecularGlossiness>(NAME);\n\t\t\t\tif (specGloss) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst specGlossDef = (materialDef.extensions[NAME] = {\n\t\t\t\t\t\tdiffuseFactor: specGloss.getDiffuseFactor(),\n\t\t\t\t\t\tspecularFactor: specGloss.getSpecularFactor(),\n\t\t\t\t\t\tglossinessFactor: specGloss.getGlossinessFactor(),\n\t\t\t\t\t} as SpecularGlossinessDef);\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (specGloss.getDiffuseTexture()) {\n\t\t\t\t\t\tconst texture = specGloss.getDiffuseTexture()!;\n\t\t\t\t\t\tconst textureInfo = specGloss.getDiffuseTextureInfo()!;\n\t\t\t\t\t\tspecGlossDef.diffuseTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t\tif (specGloss.getSpecularGlossinessTexture()) {\n\t\t\t\t\t\tconst texture = specGloss.getSpecularGlossinessTexture()!;\n\t\t\t\t\t\tconst textureInfo = specGloss.getSpecularGlossinessTextureInfo()!;\n\t\t\t\t\t\tspecGlossDef.specularGlossinessTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import {\n\tColorUtils,\n\tExtensionProperty,\n\tIProperty,\n\tNullable,\n\tPropertyType,\n\tTexture,\n\tTextureChannel,\n\tTextureInfo,\n\tvec3,\n} from '@gltf-transform/core';\nimport { KHR_MATERIALS_SHEEN } from '../constants.js';\n\ninterface ISheen extends IProperty {\n\tsheenColorFactor: vec3;\n\tsheenColorTexture: Texture;\n\tsheenColorTextureInfo: TextureInfo;\n\tsheenRoughnessFactor: number;\n\tsheenRoughnessTexture: Texture;\n\tsheenRoughnessTextureInfo: TextureInfo;\n}\n\nconst { R, G, B, A } = TextureChannel;\n\n/**\n * Defines sheen on a PBR {@link Material}. See {@link KHRMaterialsSheen}.\n */\nexport class Sheen extends ExtensionProperty<ISheen> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_SHEEN;\n\tpublic declare extensionName: typeof KHR_MATERIALS_SHEEN;\n\tpublic declare propertyType: 'Sheen';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_SHEEN;\n\t\tthis.propertyType = 'Sheen';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n\n\tprotected getDefaults(): Nullable<ISheen> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, {\n\t\t\tsheenColorFactor: [0.0, 0.0, 0.0] as vec3,\n\t\t\tsheenColorTexture: null,\n\t\t\tsheenColorTextureInfo: new TextureInfo(this.graph, 'sheenColorTextureInfo'),\n\t\t\tsheenRoughnessFactor: 0.0,\n\t\t\tsheenRoughnessTexture: null,\n\t\t\tsheenRoughnessTextureInfo: new TextureInfo(this.graph, 'sheenRoughnessTextureInfo'),\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Sheen color.\n\t */\n\n\t/** Sheen; linear multiplier. */\n\tpublic getSheenColorFactor(): vec3 {\n\t\treturn this.get('sheenColorFactor');\n\t}\n\n\t/**\n\t * Sheen; hex color in sRGB colorspace.\n\t * @deprecated Will be removed in v4. Use {@link ColorUtils.hexToFactor} / {@link ColorUtils.factorToHex} instead.\n\t */\n\tpublic getSheenColorHex(): number {\n\t\treturn ColorUtils.factorToHex(this.getSheenColorFactor());\n\t}\n\n\t/** Sheen; linear multiplier. */\n\tpublic setSheenColorFactor(factor: vec3): this {\n\t\treturn this.set('sheenColorFactor', factor);\n\t}\n\n\t/**\n\t * Sheen; hex color in sRGB colorspace.\n\t * @deprecated Will be removed in v4. Use {@link ColorUtils.hexToFactor} / {@link ColorUtils.factorToHex} instead.\n\t */\n\tpublic setSheenColorHex(hex: number): this {\n\t\tconst factor = this.getSheenColorFactor().slice() as vec3;\n\t\treturn this.set('sheenColorFactor', ColorUtils.hexToFactor(hex, factor));\n\t}\n\n\t/**\n\t * Sheen color texture, in sRGB colorspace.\n\t */\n\tpublic getSheenColorTexture(): Texture | null {\n\t\treturn this.getRef('sheenColorTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its sheen color texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getSheenColorTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('sheenColorTexture') ? this.getRef('sheenColorTextureInfo') : null;\n\t}\n\n\t/** Sets sheen color texture. See {@link Sheen.getSheenColorTexture getSheenColorTexture}. */\n\tpublic setSheenColorTexture(texture: Texture | null): this {\n\t\treturn this.setRef('sheenColorTexture', texture, { channels: R | G | B, isColor: true });\n\t}\n\n\t/**********************************************************************************************\n\t * Sheen roughness.\n\t */\n\n\t/** Sheen roughness; linear multiplier. See {@link Sheen.getSheenRoughnessTexture getSheenRoughnessTexture}. */\n\tpublic getSheenRoughnessFactor(): number {\n\t\treturn this.get('sheenRoughnessFactor');\n\t}\n\n\t/** Sheen roughness; linear multiplier. See {@link Sheen.getSheenRoughnessTexture getSheenRoughnessTexture}. */\n\tpublic setSheenRoughnessFactor(factor: number): this {\n\t\treturn this.set('sheenRoughnessFactor', factor);\n\t}\n\n\t/**\n\t * Sheen roughness texture; linear multiplier. The `a` channel of this texture specifies\n\t * roughness, independent of the base layer's roughness.\n\t */\n\tpublic getSheenRoughnessTexture(): Texture | null {\n\t\treturn this.getRef('sheenRoughnessTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its sheen roughness texture. If no texture is\n\t * attached, {@link TextureInfo} is `null`.\n\t */\n\tpublic getSheenRoughnessTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('sheenRoughnessTexture') ? this.getRef('sheenRoughnessTextureInfo') : null;\n\t}\n\n\t/**\n\t * Sets sheen roughness texture.  The `a` channel of this texture specifies\n\t * roughness, independent of the base layer's roughness.\n\t */\n\tpublic setSheenRoughnessTexture(texture: Texture | null): this {\n\t\treturn this.setRef('sheenRoughnessTexture', texture, { channels: A });\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext, vec3 } from '@gltf-transform/core';\nimport { KHR_MATERIALS_SHEEN } from '../constants.js';\nimport { Sheen } from './sheen.js';\n\nconst NAME = KHR_MATERIALS_SHEEN;\n\ninterface SheenDef {\n\tsheenColorFactor?: vec3;\n\tsheenRoughnessFactor?: number;\n\tsheenColorTexture?: GLTF.ITextureInfo;\n\tsheenRoughnessTexture?: GLTF.ITextureInfo;\n}\n\n/**\n * [`KHR_materials_sheen`](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_sheen/)\n * defines a velvet-like sheen layered on a glTF PBR material.\n *\n * ![Illustration](/media/extensions/khr-materials-sheen.png)\n *\n * > _**Figure:** A cushion, showing high material roughness and low sheen roughness. Soft\n * > highlights at edges of the material show backscattering from microfibers. Source: Khronos\n * > Group._\n *\n * A sheen layer is a common technique used in Physically-Based Rendering to represent\n * cloth and fabric materials.\n *\n * Properties:\n * - {@link Sheen}\n *\n * ### Example\n *\n * The `KHRMaterialsSheen` class provides a single {@link ExtensionProperty} type, `Sheen`,\n * which may be attached to any {@link Material} instance. For example:\n *\n * ```typescript\n * import { KHRMaterialsSheen, Sheen } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const sheenExtension = document.createExtension(KHRMaterialsSheen);\n *\n * // Create a Sheen property.\n * const sheen = sheenExtension.createSheen()\n * \t.setSheenColorFactor([1.0, 1.0, 1.0]);\n *\n * // Attach the property to a Material.\n * material.setExtension('KHR_materials_sheen', sheen);\n * ```\n */\nexport class KHRMaterialsSheen extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new Sheen property for use on a {@link Material}. */\n\tpublic createSheen(): Sheen {\n\t\treturn new Sheen(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst sheen = this.createSheen();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, sheen);\n\n\t\t\t\tconst sheenDef = materialDef.extensions[NAME] as SheenDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (sheenDef.sheenColorFactor !== undefined) {\n\t\t\t\t\tsheen.setSheenColorFactor(sheenDef.sheenColorFactor);\n\t\t\t\t}\n\t\t\t\tif (sheenDef.sheenRoughnessFactor !== undefined) {\n\t\t\t\t\tsheen.setSheenRoughnessFactor(sheenDef.sheenRoughnessFactor);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (sheenDef.sheenColorTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = sheenDef.sheenColorTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tsheen.setSheenColorTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(sheen.getSheenColorTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t\tif (sheenDef.sheenRoughnessTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = sheenDef.sheenRoughnessTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tsheen.setSheenRoughnessTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(sheen.getSheenRoughnessTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst sheen = material.getExtension<Sheen>(NAME);\n\t\t\t\tif (sheen) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst sheenDef = (materialDef.extensions[NAME] = {\n\t\t\t\t\t\tsheenColorFactor: sheen.getSheenColorFactor(),\n\t\t\t\t\t\tsheenRoughnessFactor: sheen.getSheenRoughnessFactor(),\n\t\t\t\t\t} as SheenDef);\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (sheen.getSheenColorTexture()) {\n\t\t\t\t\t\tconst texture = sheen.getSheenColorTexture()!;\n\t\t\t\t\t\tconst textureInfo = sheen.getSheenColorTextureInfo()!;\n\t\t\t\t\t\tsheenDef.sheenColorTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t\tif (sheen.getSheenRoughnessTexture()) {\n\t\t\t\t\t\tconst texture = sheen.getSheenRoughnessTexture()!;\n\t\t\t\t\t\tconst textureInfo = sheen.getSheenRoughnessTextureInfo()!;\n\t\t\t\t\t\tsheenDef.sheenRoughnessTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import {\n\tColorUtils,\n\tExtensionProperty,\n\tIProperty,\n\tNullable,\n\tPropertyType,\n\tTexture,\n\tTextureChannel,\n\tTextureInfo,\n\tvec3,\n} from '@gltf-transform/core';\nimport { KHR_MATERIALS_SPECULAR } from '../constants.js';\n\ninterface ISpecular extends IProperty {\n\tspecularFactor: number;\n\tspecularTexture: Texture;\n\tspecularTextureInfo: TextureInfo;\n\tspecularColorFactor: vec3;\n\tspecularColorTexture: Texture;\n\tspecularColorTextureInfo: TextureInfo;\n}\n\nconst { R, G, B, A } = TextureChannel;\n\n/**\n * Defines specular reflectivity on a PBR {@link Material}. See {@link KHRMaterialsSpecular}.\n */\nexport class Specular extends ExtensionProperty<ISpecular> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_SPECULAR;\n\tpublic declare extensionName: typeof KHR_MATERIALS_SPECULAR;\n\tpublic declare propertyType: 'Specular';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_SPECULAR;\n\t\tthis.propertyType = 'Specular';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n\n\tprotected getDefaults(): Nullable<ISpecular> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, {\n\t\t\tspecularFactor: 1.0,\n\t\t\tspecularTexture: null,\n\t\t\tspecularTextureInfo: new TextureInfo(this.graph, 'specularTextureInfo'),\n\t\t\tspecularColorFactor: [1.0, 1.0, 1.0] as vec3,\n\t\t\tspecularColorTexture: null,\n\t\t\tspecularColorTextureInfo: new TextureInfo(this.graph, 'specularColorTextureInfo'),\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Specular.\n\t */\n\n\t/** Specular; linear multiplier. See {@link Specular.getSpecularTexture getSpecularTexture}. */\n\tpublic getSpecularFactor(): number {\n\t\treturn this.get('specularFactor');\n\t}\n\n\t/** Specular; linear multiplier. See {@link Specular.getSpecularTexture getSpecularTexture}. */\n\tpublic setSpecularFactor(factor: number): this {\n\t\treturn this.set('specularFactor', factor);\n\t}\n\n\t/** Specular color; Linear-sRGB components. See {@link Specular.getSpecularTexture getSpecularTexture}. */\n\tpublic getSpecularColorFactor(): vec3 {\n\t\treturn this.get('specularColorFactor');\n\t}\n\n\t/** Specular color; Linear-sRGB components. See {@link Specular.getSpecularTexture getSpecularTexture}. */\n\tpublic setSpecularColorFactor(factor: vec3): this {\n\t\treturn this.set('specularColorFactor', factor);\n\t}\n\n\t/**\n\t * Specular color; sRGB hexadecimal color. See {@link Specular.getSpecularTexture getSpecularTexture}\n\t * @deprecated Will be removed in v4. Use {@link ColorUtils.hexToFactor} / {@link ColorUtils.factorToHex} instead.\n\t */\n\tpublic getSpecularColorHex(): number {\n\t\treturn ColorUtils.factorToHex(this.getSpecularColorFactor());\n\t}\n\n\t/**\n\t * Specular color; sRGB hexadecimal color. See {@link Specular.getSpecularTexture getSpecularTexture}\n\t * @deprecated Will be removed in v4. Use {@link ColorUtils.hexToFactor} / {@link ColorUtils.factorToHex} instead.\n\t */\n\tpublic setSpecularColorHex(hex: number): this {\n\t\tconst factor = this.getSpecularColorFactor().slice() as vec3;\n\t\treturn this.set('specularColorFactor', ColorUtils.hexToFactor(hex, factor));\n\t}\n\n\t/**\n\t * Specular texture; linear multiplier. Configures the strength of the specular reflection in\n\t * the dielectric BRDF. A value of zero disables the specular reflection, resulting in a pure\n\t * diffuse material.\n\t *\n\t * Only the alpha (A) channel is used for specular strength, but this texture may optionally\n\t * be packed with specular color (RGB) into a single texture.\n\t */\n\tpublic getSpecularTexture(): Texture | null {\n\t\treturn this.getRef('specularTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its specular texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getSpecularTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('specularTexture') ? this.getRef('specularTextureInfo') : null;\n\t}\n\n\t/** Sets specular texture. See {@link Specular.getSpecularTexture getSpecularTexture}. */\n\tpublic setSpecularTexture(texture: Texture | null): this {\n\t\treturn this.setRef('specularTexture', texture, { channels: A });\n\t}\n\n\t/**\n\t * Specular color texture; linear multiplier. Defines the F0 color of the specular reflection\n\t * (RGB channels, encoded in sRGB) in the the dielectric BRDF.\n\t *\n\t * Only RGB channels are used here, but this texture may optionally be packed with a specular\n\t * factor (A) into a single texture.\n\t */\n\tpublic getSpecularColorTexture(): Texture | null {\n\t\treturn this.getRef('specularColorTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its specular color texture. If no texture is\n\t * attached, {@link TextureInfo} is `null`.\n\t */\n\tpublic getSpecularColorTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('specularColorTexture') ? this.getRef('specularColorTextureInfo') : null;\n\t}\n\n\t/** Sets specular color texture. See {@link Specular.getSpecularColorTexture getSpecularColorTexture}. */\n\tpublic setSpecularColorTexture(texture: Texture | null): this {\n\t\treturn this.setRef('specularColorTexture', texture, { channels: R | G | B, isColor: true });\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext, vec3, MathUtils } from '@gltf-transform/core';\nimport { KHR_MATERIALS_SPECULAR } from '../constants.js';\nimport { Specular } from './specular.js';\n\nconst NAME = KHR_MATERIALS_SPECULAR;\n\ninterface SpecularDef {\n\tspecularFactor?: number;\n\tspecularColorFactor?: vec3;\n\tspecularTexture?: GLTF.ITextureInfo;\n\tspecularColorTexture?: GLTF.ITextureInfo;\n}\n\n/**\n * [`KHR_materials_specular`](https://github.com/KhronosGroup/gltf/blob/main/extensions/2.0/Khronos/KHR_materials_specular/)\n * adjusts the strength of the specular reflection in the dielectric BRDF.\n *\n * KHRMaterialsSpecular is a better alternative to the older\n * {@link KHRMaterialsPBRSpecularGlossiness KHR_materials_pbrSpecularGlossiness} extension, and\n * provides specular information while remaining within a metal/rough PBR workflow. A\n * value of zero disables the specular reflection, resulting in a pure diffuse material.\n *\n * Properties:\n * - {@link Specular}\n *\n * ### Example\n *\n * The `KHRMaterialsSpecular` class provides a single {@link ExtensionProperty} type, `Specular`,\n * which may be attached to any {@link Material} instance. For example:\n *\n * ```typescript\n * import { KHRMaterialsSpecular, Specular } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const specularExtension = document.createExtension(KHRMaterialsSpecular);\n *\n * // Create a Specular property.\n * const specular = specularExtension.createSpecular()\n * \t.setSpecularFactor(1.0);\n *\n * // Attach the property to a Material.\n * material.setExtension('KHR_materials_specular', specular);\n * ```\n */\nexport class KHRMaterialsSpecular extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new Specular property for use on a {@link Material}. */\n\tpublic createSpecular(): Specular {\n\t\treturn new Specular(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst specular = this.createSpecular();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, specular);\n\n\t\t\t\tconst specularDef = materialDef.extensions[NAME] as SpecularDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (specularDef.specularFactor !== undefined) {\n\t\t\t\t\tspecular.setSpecularFactor(specularDef.specularFactor);\n\t\t\t\t}\n\t\t\t\tif (specularDef.specularColorFactor !== undefined) {\n\t\t\t\t\tspecular.setSpecularColorFactor(specularDef.specularColorFactor);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (specularDef.specularTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = specularDef.specularTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tspecular.setSpecularTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(specular.getSpecularTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t\tif (specularDef.specularColorTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = specularDef.specularColorTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tspecular.setSpecularColorTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(specular.getSpecularColorTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst specular = material.getExtension<Specular>(NAME);\n\t\t\t\tif (specular) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst specularDef = (materialDef.extensions[NAME] = {} as SpecularDef);\n\n\t\t\t\t\tif (specular.getSpecularFactor() !== 1) {\n\t\t\t\t\t\tspecularDef.specularFactor = specular.getSpecularFactor();\n\t\t\t\t\t}\n\t\t\t\t\tif (!MathUtils.eq(specular.getSpecularColorFactor(), [1, 1, 1])) {\n\t\t\t\t\t\tspecularDef.specularColorFactor = specular.getSpecularColorFactor();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (specular.getSpecularTexture()) {\n\t\t\t\t\t\tconst texture = specular.getSpecularTexture()!;\n\t\t\t\t\t\tconst textureInfo = specular.getSpecularTextureInfo()!;\n\t\t\t\t\t\tspecularDef.specularTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t\tif (specular.getSpecularColorTexture()) {\n\t\t\t\t\t\tconst texture = specular.getSpecularColorTexture()!;\n\t\t\t\t\t\tconst textureInfo = specular.getSpecularColorTextureInfo()!;\n\t\t\t\t\t\tspecularDef.specularColorTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import {\n\tExtensionProperty,\n\tIProperty,\n\tNullable,\n\tPropertyType,\n\tTexture,\n\tTextureChannel,\n\tTextureInfo,\n} from '@gltf-transform/core';\nimport { KHR_MATERIALS_TRANSMISSION } from '../constants.js';\n\ninterface ITransmission extends IProperty {\n\ttransmissionFactor: number;\n\ttransmissionTexture: Texture;\n\ttransmissionTextureInfo: TextureInfo;\n}\n\nconst { R } = TextureChannel;\n\n/**\n * Defines optical transmission on a PBR {@link Material}. See {@link KHRMaterialsTransmission}.\n */\nexport class Transmission extends ExtensionProperty<ITransmission> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_TRANSMISSION;\n\tpublic declare extensionName: typeof KHR_MATERIALS_TRANSMISSION;\n\tpublic declare propertyType: 'Transmission';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_TRANSMISSION;\n\t\tthis.propertyType = 'Transmission';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n\n\tprotected getDefaults(): Nullable<ITransmission> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, {\n\t\t\ttransmissionFactor: 0.0,\n\t\t\ttransmissionTexture: null,\n\t\t\ttransmissionTextureInfo: new TextureInfo(this.graph, 'transmissionTextureInfo'),\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Transmission.\n\t */\n\n\t/** Transmission; linear multiplier. See {@link Transmission.getTransmissionTexture getTransmissionTexture}. */\n\tpublic getTransmissionFactor(): number {\n\t\treturn this.get('transmissionFactor');\n\t}\n\n\t/** Transmission; linear multiplier. See {@link Transmission.getTransmissionTexture getTransmissionTexture}. */\n\tpublic setTransmissionFactor(factor: number): this {\n\t\treturn this.set('transmissionFactor', factor);\n\t}\n\n\t/**\n\t * Transmission texture; linear multiplier. The `r` channel of this texture specifies\n\t * transmission [0-1] of the material's surface. By default this is a thin transparency\n\t * effect, but volume effects (refraction, subsurface scattering) may be introduced with the\n\t * addition of the `KHR_materials_volume` extension.\n\t */\n\tpublic getTransmissionTexture(): Texture | null {\n\t\treturn this.getRef('transmissionTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its transmission texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getTransmissionTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('transmissionTexture') ? this.getRef('transmissionTextureInfo') : null;\n\t}\n\n\t/** Sets transmission texture. See {@link Transmission.getTransmissionTexture getTransmissionTexture}. */\n\tpublic setTransmissionTexture(texture: Texture | null): this {\n\t\treturn this.setRef('transmissionTexture', texture, { channels: R });\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_TRANSMISSION } from '../constants.js';\nimport { Transmission } from './transmission.js';\n\nconst NAME = KHR_MATERIALS_TRANSMISSION;\n\ninterface TransmissionDef {\n\ttransmissionFactor?: number;\n\ttransmissionTexture?: GLTF.ITextureInfo;\n}\n\n/**\n * [`KHR_materials_transmission`](https://github.com/KhronosGroup/gltf/blob/main/extensions/2.0/Khronos/KHR_materials_transmission/)\n * provides a common type of optical transparency: infinitely-thin materials with no refraction,\n * scattering, or dispersion.\n *\n * While default PBR materials using alpha blending become invisible as their opacity approaches\n * zero, a transmissive material continues to reflect light in a glass-like manner, even at low\n * transmission values. When combined with {@link KHRMaterialsVolume}, transmission may be used for\n * thicker materials and refractive effects.\n *\n * Properties:\n * - {@link Transmission}\n *\n * ### Example\n *\n * The `KHRMaterialsTransmission` class provides a single {@link ExtensionProperty} type,\n * `Transmission`, which may be attached to any {@link Material} instance. For example:\n *\n * ```typescript\n * import { KHRMaterialsTransmission, Transmission } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const transmissionExtension = document.createExtension(KHRMaterialsTransmission);\n *\n * // Create a Transmission property.\n * const transmission = transmissionExtension.createTransmission()\n * \t.setTransmissionFactor(1.0);\n *\n * // Attach the property to a Material.\n * material.setExtension('KHR_materials_transmission', transmission);\n * ```\n */\nexport class KHRMaterialsTransmission extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new Transmission property for use on a {@link Material}. */\n\tpublic createTransmission(): Transmission {\n\t\treturn new Transmission(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst transmission = this.createTransmission();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, transmission);\n\n\t\t\t\tconst transmissionDef = materialDef.extensions[NAME] as TransmissionDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (transmissionDef.transmissionFactor !== undefined) {\n\t\t\t\t\ttransmission.setTransmissionFactor(transmissionDef.transmissionFactor);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (transmissionDef.transmissionTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = transmissionDef.transmissionTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\ttransmission.setTransmissionTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(transmission.getTransmissionTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst transmission = material.getExtension<Transmission>(NAME);\n\t\t\t\tif (transmission) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst transmissionDef = (materialDef.extensions[NAME] = {\n\t\t\t\t\t\ttransmissionFactor: transmission.getTransmissionFactor(),\n\t\t\t\t\t} as TransmissionDef);\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (transmission.getTransmissionTexture()) {\n\t\t\t\t\t\tconst texture = transmission.getTransmissionTexture()!;\n\t\t\t\t\t\tconst textureInfo = transmission.getTransmissionTextureInfo()!;\n\t\t\t\t\t\ttransmissionDef.transmissionTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { ExtensionProperty } from '@gltf-transform/core';\nimport { PropertyType } from '@gltf-transform/core';\nimport { KHR_MATERIALS_UNLIT } from '../constants.js';\n\n/**\n * Converts a PBR {@link Material} to an unlit shading model. See {@link KHRMaterialsUnlit}.\n */\nexport class Unlit extends ExtensionProperty {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_UNLIT;\n\tpublic declare extensionName: typeof KHR_MATERIALS_UNLIT;\n\tpublic declare propertyType: 'Unlit';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_UNLIT;\n\t\tthis.propertyType = 'Unlit';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n}\n","import { Extension, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_UNLIT } from '../constants.js';\nimport { Unlit } from './unlit.js';\n\nconst NAME = KHR_MATERIALS_UNLIT;\n\n/**\n * [`KHR_materials_unlit`](https://github.com/KhronosGroup/gltf/blob/main/extensions/2.0/Khronos/KHR_materials_unlit/)\n * defines an unlit shading model for use in glTF 2.0 materials.\n *\n * ![Illustration](/media/extensions/khr-materials-unlit.png)\n *\n * > _**Figure:** Unlit materials are useful for flat shading, stylized effects, and for improving\n * > performance on mobile devices. Source: [Model by Hayden VanEarden](https://sketchfab.com/3d-models/summertime-kirby-c5711316103a4d67a62c34cfe8710938)._\n *\n * Unlit (also \"Shadeless\" or \"Constant\") materials provide a simple alternative to the Physically\n * Based Rendering (PBR) shading models provided by the core specification. Unlit materials are\n * often useful for cheaper rendering on performance-contrained devices, e.g. mobile phones.\n * Additionally, unlit materials can be very useful in achieving stylized, non-photo-realistic\n * effects like hand painted illustrative styles or baked toon shaders.\n *\n * Properties:\n * - {@link Unlit}\n *\n * ### Example\n *\n * The `KHRMaterialsUnlit` class provides a single {@link ExtensionProperty} type, `Unlit`, which may\n * be attached to any {@link Material} instance. For example:\n *\n * ```typescript\n * import { KHRMaterialsUnlit, Unlit } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const unlitExtension = document.createExtension(KHRMaterialsUnlit);\n *\n * // Create an Unlit property.\n * const unlit = unlitExtension.createUnlit();\n *\n * // Attach the property to a Material.\n * material.setExtension('KHR_materials_unlit', unlit);\n * ```\n */\nexport class KHRMaterialsUnlit extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new Unlit property for use on a {@link Material}. */\n\tpublic createUnlit(): Unlit {\n\t\treturn new Unlit(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst materialDefs = context.jsonDoc.json.materials || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, this.createUnlit());\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tif (material.getExtension<Unlit>(NAME)) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\t\t\t\t\tmaterialDef.extensions[NAME] = {};\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { ExtensionProperty, IProperty, Material, Nullable } from '@gltf-transform/core';\nimport { KHR_MATERIALS_VARIANTS } from '../constants.js';\nimport type { Variant } from './variant.js';\n\ninterface IMapping extends IProperty {\n\tmaterial: Material;\n\tvariants: Variant[];\n}\n\n/**\n * Maps {@link Variant}s to {@link Material}s. See {@link KHRMaterialsVariants}.\n */\nexport class Mapping extends ExtensionProperty<IMapping> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_VARIANTS;\n\tpublic declare extensionName: typeof KHR_MATERIALS_VARIANTS;\n\tpublic declare propertyType: 'Mapping';\n\tpublic declare parentTypes: ['MappingList'];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_VARIANTS;\n\t\tthis.propertyType = 'Mapping';\n\t\tthis.parentTypes = ['MappingList'];\n\t}\n\n\tprotected getDefaults(): Nullable<IMapping> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, { material: null, variants: [] });\n\t}\n\n\t/** The {@link Material} designated for this {@link Primitive}, under the given variants. */\n\tpublic getMaterial(): Material | null {\n\t\treturn this.getRef('material');\n\t}\n\n\t/** The {@link Material} designated for this {@link Primitive}, under the given variants. */\n\tpublic setMaterial(material: Material | null): this {\n\t\treturn this.setRef('material', material);\n\t}\n\n\t/** Adds a {@link Variant} to this mapping. */\n\tpublic addVariant(variant: Variant): this {\n\t\treturn this.addRef('variants', variant);\n\t}\n\n\t/** Removes a {@link Variant} from this mapping. */\n\tpublic removeVariant(variant: Variant): this {\n\t\treturn this.removeRef('variants', variant);\n\t}\n\n\t/** Lists {@link Variant}s in this mapping. */\n\tpublic listVariants(): Variant[] {\n\t\treturn this.listRefs('variants');\n\t}\n}\n","import { ExtensionProperty, IProperty, Nullable, PropertyType } from '@gltf-transform/core';\nimport { KHR_MATERIALS_VARIANTS } from '../constants.js';\nimport type { Mapping } from './mapping.js';\n\ninterface IMappingList extends IProperty {\n\tmappings: Mapping[];\n}\n\n/**\n * List of material variant {@link Mapping}s. See {@link KHRMaterialsVariants}.\n */\nexport class MappingList extends ExtensionProperty<IMappingList> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_VARIANTS;\n\tpublic declare extensionName: typeof KHR_MATERIALS_VARIANTS;\n\tpublic declare propertyType: 'MappingList';\n\tpublic declare parentTypes: [PropertyType.PRIMITIVE];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_VARIANTS;\n\t\tthis.propertyType = 'MappingList';\n\t\tthis.parentTypes = [PropertyType.PRIMITIVE];\n\t}\n\n\tprotected getDefaults(): Nullable<IMappingList> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, { mappings: [] });\n\t}\n\n\t/** Adds a {@link Mapping} to this mapping. */\n\tpublic addMapping(mapping: Mapping): this {\n\t\treturn this.addRef('mappings', mapping);\n\t}\n\n\t/** Removes a {@link Mapping} from the list for this {@link Primitive}. */\n\tpublic removeMapping(mapping: Mapping): this {\n\t\treturn this.removeRef('mappings', mapping);\n\t}\n\n\t/** Lists {@link Mapping}s in this {@link Primitive}. */\n\tpublic listMappings(): Mapping[] {\n\t\treturn this.listRefs('mappings');\n\t}\n}\n","import { ExtensionProperty } from '@gltf-transform/core';\nimport { KHR_MATERIALS_VARIANTS } from '../constants.js';\n\n/**\n * Defines a variant of a {@link Material}. See {@link KHRMaterialsVariants}.\n */\nexport class Variant extends ExtensionProperty {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_VARIANTS;\n\tpublic declare extensionName: typeof KHR_MATERIALS_VARIANTS;\n\tpublic declare propertyType: 'Variant';\n\tpublic declare parentTypes: ['MappingList'];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_VARIANTS;\n\t\tthis.propertyType = 'Variant';\n\t\tthis.parentTypes = ['MappingList'];\n\t}\n}\n","import { Extension, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_VARIANTS } from '../constants.js';\nimport { Mapping } from './mapping.js';\nimport { MappingList } from './mapping-list.js';\nimport { Variant } from './variant.js';\n\nconst NAME = KHR_MATERIALS_VARIANTS;\n\ninterface VariantsRootDef {\n\tvariants: VariantDef[];\n}\n\ninterface VariantDef {\n\tname?: string;\n}\n\ninterface VariantPrimDef {\n\tmappings: VariantMappingDef[];\n}\n\ninterface VariantMappingDef {\n\tmaterial: number;\n\tvariants: number[];\n}\n\n/**\n * [`KHR_materials_variants`](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_variants/)\n * defines alternate {@link Material} states for any {@link Primitive} in the scene.\n *\n * ![Illustration](/media/extensions/khr-materials-variants.jpg)\n *\n * > _**Figure:** A sneaker, in three material variants. Source: Khronos Group._\n *\n * Uses include product configurators, night/day states, healthy/damaged states, etc. The\n * `KHRMaterialsVariants` class provides three {@link ExtensionProperty} types: `Variant`, `Mapping`,\n * and `MappingList`. When attached to {@link Primitive} properties, these offer flexible ways of\n * defining the variants available to an application. Triggering a variant is out of scope of this\n * extension, but could be handled in the application with a UI dropdown, particular game states,\n * and so on.\n *\n * Mesh geometry cannot be changed by this extension, although another extension\n * (tentative: `KHR_mesh_variants`) is under consideration by the Khronos Group, for that purpose.\n *\n * Properties:\n * - {@link Variant}\n * - {@link Mapping}\n * - {@link MappingList}\n *\n * ### Example\n *\n * ```typescript\n * import { KHRMaterialsVariants } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const variantExtension = document.createExtension(KHRMaterialsVariants);\n *\n * // Create some Variant states.\n * const healthyVariant = variantExtension.createVariant('Healthy');\n * const damagedVariant = variantExtension.createVariant('Damaged');\n *\n * // Create mappings from a Variant state to a Material.\n * const healthyMapping = variantExtension.createMapping()\n * \t.addVariant(healthyVariant)\n * \t.setMaterial(healthyMat);\n * const damagedMapping = variantExtension.createMapping()\n * \t.addVariant(damagedVariant)\n * \t.setMaterial(damagedMat);\n *\n * // Attach the mappings to a Primitive.\n * primitive.setExtension(\n * \t'KHR_materials_variants',\n * \tvariantExtension.createMappingList()\n * \t\t.addMapping(healthyMapping)\n * \t\t.addMapping(damagedMapping)\n * );\n * ```\n *\n * A few notes about this extension:\n *\n * 1. Viewers that don't recognized this extension will show the default material for each primitive\n * \t instead, so assign that material accordingly. This material can be — but doesn't have to be —\n * \t associated with one of the available variants.\n * 2. Mappings can list multiple Variants. In that case, the first Mapping containing an active\n * \t Variant will be chosen by the viewer.\n * 3. Variant names are how these states are identified, so choose informative names.\n * 4. When writing the file to an unpacked `.gltf`, instead of an embedded `.glb`, viewers will have\n * \t the option of downloading only textures associated with the default state, and lazy-loading\n * \t any textures for inactive Variants only when they are needed.\n */\nexport class KHRMaterialsVariants extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new MappingList property. */\n\tpublic createMappingList(): MappingList {\n\t\treturn new MappingList(this.document.getGraph());\n\t}\n\n\t/** Creates a new Variant property. */\n\tpublic createVariant(name = ''): Variant {\n\t\treturn new Variant(this.document.getGraph(), name);\n\t}\n\n\t/** Creates a new Mapping property. */\n\tpublic createMapping(): Mapping {\n\t\treturn new Mapping(this.document.getGraph());\n\t}\n\n\t/** Lists all Variants on the current Document. */\n\tpublic listVariants(): Variant[] {\n\t\treturn Array.from(this.properties).filter((prop) => prop instanceof Variant) as Variant[];\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tif (!jsonDoc.json.extensions || !jsonDoc.json.extensions[NAME]) return this;\n\n\t\t// Read all top-level variant names.\n\t\tconst variantsRootDef = jsonDoc.json.extensions[NAME] as VariantsRootDef;\n\t\tconst variantDefs = variantsRootDef.variants || [];\n\t\tconst variants = variantDefs.map((variantDef) => this.createVariant().setName(variantDef.name || ''));\n\n\t\t// For each mesh primitive, read its material/variant mappings.\n\t\tconst meshDefs = jsonDoc.json.meshes || [];\n\t\tmeshDefs.forEach((meshDef, meshIndex) => {\n\t\t\tconst mesh = context.meshes[meshIndex];\n\t\t\tconst primDefs = meshDef.primitives || [];\n\n\t\t\tprimDefs.forEach((primDef, primIndex) => {\n\t\t\t\tif (!primDef.extensions || !primDef.extensions[NAME]) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst mappingList = this.createMappingList();\n\n\t\t\t\tconst variantPrimDef = primDef.extensions[NAME] as VariantPrimDef;\n\t\t\t\tfor (const mappingDef of variantPrimDef.mappings) {\n\t\t\t\t\tconst mapping = this.createMapping();\n\n\t\t\t\t\tif (mappingDef.material !== undefined) {\n\t\t\t\t\t\tmapping.setMaterial(context.materials[mappingDef.material]);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const variantIndex of mappingDef.variants || []) {\n\t\t\t\t\t\tmapping.addVariant(variants[variantIndex]);\n\t\t\t\t\t}\n\n\t\t\t\t\tmappingList.addMapping(mapping);\n\t\t\t\t}\n\n\t\t\t\tmesh.listPrimitives()[primIndex].setExtension(NAME, mappingList);\n\t\t\t});\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tconst variants = this.listVariants();\n\t\tif (!variants.length) return this;\n\n\t\t// Write all top-level variant names.\n\t\tconst variantDefs = [];\n\t\tconst variantIndexMap = new Map<Variant, number>();\n\t\tfor (const variant of variants) {\n\t\t\tvariantIndexMap.set(variant, variantDefs.length);\n\t\t\tvariantDefs.push(context.createPropertyDef(variant));\n\t\t}\n\n\t\t// For each mesh primitive, write its material/variant mappings.\n\t\tfor (const mesh of this.document.getRoot().listMeshes()) {\n\t\t\tconst meshIndex = context.meshIndexMap.get(mesh)!;\n\n\t\t\tmesh.listPrimitives().forEach((prim, primIndex) => {\n\t\t\t\tconst mappingList = prim.getExtension<MappingList>(NAME);\n\t\t\t\tif (!mappingList) return;\n\n\t\t\t\tconst primDef = context.jsonDoc.json.meshes![meshIndex].primitives[primIndex];\n\n\t\t\t\tconst mappingDefs = mappingList.listMappings().map((mapping) => {\n\t\t\t\t\tconst mappingDef = context.createPropertyDef(mapping) as VariantMappingDef;\n\n\t\t\t\t\tconst material = mapping.getMaterial();\n\t\t\t\t\tif (material) {\n\t\t\t\t\t\tmappingDef.material = context.materialIndexMap.get(material)!;\n\t\t\t\t\t}\n\n\t\t\t\t\tmappingDef.variants = mapping.listVariants().map((variant) => variantIndexMap.get(variant)!);\n\n\t\t\t\t\treturn mappingDef;\n\t\t\t\t});\n\n\t\t\t\tprimDef.extensions = primDef.extensions || {};\n\t\t\t\tprimDef.extensions[NAME] = { mappings: mappingDefs };\n\t\t\t});\n\t\t}\n\n\t\tjsonDoc.json.extensions = jsonDoc.json.extensions || {};\n\t\tjsonDoc.json.extensions[NAME] = { variants: variantDefs };\n\n\t\treturn this;\n\t}\n}\n","import {\n\tColorUtils,\n\tExtensionProperty,\n\tIProperty,\n\tNullable,\n\tPropertyType,\n\tTexture,\n\tTextureChannel,\n\tTextureInfo,\n\tvec3,\n} from '@gltf-transform/core';\nimport { KHR_MATERIALS_VOLUME } from '../constants.js';\n\ninterface IVolume extends IProperty {\n\tthicknessFactor: number;\n\tthicknessTexture: Texture;\n\tthicknessTextureInfo: TextureInfo;\n\tattenuationDistance: number;\n\tattenuationColor: vec3;\n}\n\nconst { G } = TextureChannel;\n\n/**\n * Defines volume on a PBR {@link Material}. See {@link KHRMaterialsVolume}.\n */\nexport class Volume extends ExtensionProperty<IVolume> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_VOLUME;\n\tpublic declare extensionName: typeof KHR_MATERIALS_VOLUME;\n\tpublic declare propertyType: 'Volume';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_VOLUME;\n\t\tthis.propertyType = 'Volume';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n\n\tprotected getDefaults(): Nullable<IVolume> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, {\n\t\t\tthicknessFactor: 0.0,\n\t\t\tthicknessTexture: null,\n\t\t\tthicknessTextureInfo: new TextureInfo(this.graph, 'thicknessTexture'),\n\t\t\tattenuationDistance: Infinity,\n\t\t\tattenuationColor: [1.0, 1.0, 1.0] as vec3,\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Thickness.\n\t */\n\n\t/**\n\t * Thickness of the volume beneath the surface in meters in the local coordinate system of the\n\t * node. If the value is 0 the material is thin-walled. Otherwise the material is a volume\n\t * boundary. The doubleSided property has no effect on volume boundaries.\n\t */\n\tpublic getThicknessFactor(): number {\n\t\treturn this.get('thicknessFactor');\n\t}\n\n\t/**\n\t * Thickness of the volume beneath the surface in meters in the local coordinate system of the\n\t * node. If the value is 0 the material is thin-walled. Otherwise the material is a volume\n\t * boundary. The doubleSided property has no effect on volume boundaries.\n\t */\n\tpublic setThicknessFactor(factor: number): this {\n\t\treturn this.set('thicknessFactor', factor);\n\t}\n\n\t/**\n\t * Texture that defines the thickness, stored in the G channel. This will be multiplied by\n\t * thicknessFactor.\n\t */\n\tpublic getThicknessTexture(): Texture | null {\n\t\treturn this.getRef('thicknessTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its thickness texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getThicknessTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('thicknessTexture') ? this.getRef('thicknessTextureInfo') : null;\n\t}\n\n\t/**\n\t * Texture that defines the thickness, stored in the G channel. This will be multiplied by\n\t * thicknessFactor.\n\t */\n\tpublic setThicknessTexture(texture: Texture | null): this {\n\t\treturn this.setRef('thicknessTexture', texture, { channels: G });\n\t}\n\n\t/**********************************************************************************************\n\t * Attenuation.\n\t */\n\n\t/**\n\t * Density of the medium given as the average distance in meters that light travels in the\n\t * medium before interacting with a particle.\n\t */\n\tpublic getAttenuationDistance(): number {\n\t\treturn this.get('attenuationDistance');\n\t}\n\n\t/**\n\t * Density of the medium given as the average distance in meters that light travels in the\n\t * medium before interacting with a particle.\n\t */\n\tpublic setAttenuationDistance(distance: number): this {\n\t\treturn this.set('attenuationDistance', distance);\n\t}\n\n\t/**\n\t * Color (linear) that white light turns into due to absorption when reaching the attenuation\n\t * distance.\n\t */\n\tpublic getAttenuationColor(): vec3 {\n\t\treturn this.get('attenuationColor');\n\t}\n\n\t/**\n\t * Color (linear) that white light turns into due to absorption when reaching the attenuation\n\t * distance.\n\t */\n\tpublic setAttenuationColor(color: vec3): this {\n\t\treturn this.set('attenuationColor', color);\n\t}\n\n\t/**\n\t * Color (sRGB) that white light turns into due to absorption when reaching the attenuation\n\t * distance.\n\t * @deprecated Will be removed in v4. Use {@link ColorUtils.hexToFactor} / {@link ColorUtils.factorToHex} instead.\n\t */\n\tpublic getAttenuationColorHex(): number {\n\t\treturn ColorUtils.factorToHex(this.getAttenuationColor());\n\t}\n\n\t/**\n\t * Color (sRGB) that white light turns into due to absorption when reaching the attenuation\n\t * distance.\n\t * @deprecated Will be removed in v4. Use {@link ColorUtils.hexToFactor} / {@link ColorUtils.factorToHex} instead.\n\t */\n\tpublic setAttenuationColorHex(hex: number): this {\n\t\tconst factor = this.getAttenuationColor().slice() as vec3;\n\t\treturn this.set('attenuationColor', ColorUtils.hexToFactor(hex, factor));\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext, vec3, MathUtils } from '@gltf-transform/core';\nimport { KHR_MATERIALS_VOLUME } from '../constants.js';\nimport { Volume } from './volume.js';\n\nconst NAME = KHR_MATERIALS_VOLUME;\n\ninterface VolumeDef {\n\tthicknessFactor?: number;\n\tthicknessTexture?: GLTF.ITextureInfo;\n\tattenuationDistance?: number;\n\tattenuationColor?: vec3;\n}\n\n/**\n * [KHR_materials_volume](https://github.com/KhronosGroup/gltf/blob/main/extensions/2.0/Khronos/KHR_materials_volume/)\n * adds refraction, absorption, or scattering to a glTF PBR material already using transmission or\n * translucency.\n *\n * ![Illustration](/media/extensions/khr-materials-volume.png)\n *\n * > _**Figure:** Base color changes the amount of light passing through the volume boundary\n * > (left). The overall color of the object is the same everywhere, as if the object is covered\n * > with a colored, transparent foil. Absorption changes the amount of light traveling through the\n * > volume (right). The overall color depends on the distance the light traveled through it; at\n * > small distances (tail of the dragon) less light is absorbed and the color is brighter than at\n * > large distances. Source: Khronos Group._\n *\n * By default, a glTF 2.0 material describes the scattering properties of a surface enclosing an\n * infinitely thin volume. The surface defined by the mesh represents a thin wall. The volume\n * extension makes it possible to turn the surface into an interface between volumes. The mesh to\n * which the material is attached defines the boundaries of an homogeneous medium and therefore must\n * be manifold. Volumes provide effects like refraction, absorption and scattering. Scattering\n * effects will require future (TBD) extensions.\n *\n * The volume extension must be combined with {@link KHRMaterialsTransmission} or\n * `KHR_materials_translucency` in order to define entry of light into the volume.\n *\n * Properties:\n * - {@link Volume}\n *\n * ### Example\n *\n * The `KHRMaterialsVolume` class provides a single {@link ExtensionProperty} type, `Volume`, which\n * may be attached to any {@link Material} instance. For example:\n *\n * ```typescript\n * import { KHRMaterialsVolume, Volume } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const volumeExtension = document.createExtension(KHRMaterialsVolume);\n *\n * // Create a Volume property.\n * const volume = volumeExtension.createVolume()\n * \t.setThicknessFactor(1.0)\n * \t.setThicknessTexture(texture)\n * \t.setAttenuationDistance(1.0)\n * \t.setAttenuationColorHex(0xFFEEEE);\n *\n * // Attach the property to a Material.\n * material.setExtension('KHR_materials_volume', volume);\n * ```\n *\n * A thickness texture is required in most realtime renderers, and can be baked in software such as\n * Blender or Substance Painter. When `thicknessFactor = 0`, all volumetric effects are disabled.\n */\nexport class KHRMaterialsVolume extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new Volume property for use on a {@link Material}. */\n\tpublic createVolume(): Volume {\n\t\treturn new Volume(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst volume = this.createVolume();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, volume);\n\n\t\t\t\tconst volumeDef = materialDef.extensions[NAME] as VolumeDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (volumeDef.thicknessFactor !== undefined) {\n\t\t\t\t\tvolume.setThicknessFactor(volumeDef.thicknessFactor);\n\t\t\t\t}\n\t\t\t\tif (volumeDef.attenuationDistance !== undefined) {\n\t\t\t\t\tvolume.setAttenuationDistance(volumeDef.attenuationDistance);\n\t\t\t\t}\n\t\t\t\tif (volumeDef.attenuationColor !== undefined) {\n\t\t\t\t\tvolume.setAttenuationColor(volumeDef.attenuationColor);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (volumeDef.thicknessTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = volumeDef.thicknessTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tvolume.setThicknessTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(volume.getThicknessTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst volume = material.getExtension<Volume>(NAME);\n\t\t\t\tif (volume) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst volumeDef = (materialDef.extensions[NAME] = {} as VolumeDef);\n\n\t\t\t\t\tif (volume.getThicknessFactor() > 0) {\n\t\t\t\t\t\tvolumeDef.thicknessFactor = volume.getThicknessFactor();\n\t\t\t\t\t}\n\t\t\t\t\tif (Number.isFinite(volume.getAttenuationDistance())) {\n\t\t\t\t\t\tvolumeDef.attenuationDistance = volume.getAttenuationDistance();\n\t\t\t\t\t}\n\t\t\t\t\tif (!MathUtils.eq(volume.getAttenuationColor(), [1, 1, 1])) {\n\t\t\t\t\t\tvolumeDef.attenuationColor = volume.getAttenuationColor();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (volume.getThicknessTexture()) {\n\t\t\t\t\t\tconst texture = volume.getThicknessTexture()!;\n\t\t\t\t\t\tconst textureInfo = volume.getThicknessTextureInfo()!;\n\t\t\t\t\t\tvolumeDef.thicknessTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { Extension, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MESH_QUANTIZATION } from '../constants.js';\n\nconst NAME = KHR_MESH_QUANTIZATION;\n\n/**\n * [`KHR_mesh_quantization`](https://github.com/KhronosGroup/gltf/blob/main/extensions/2.0/Khronos/KHR_mesh_quantization/)\n * expands allowed component types for vertex attributes to include 16- and 8-bit storage.\n *\n * Quantization provides a memory/precision tradeoff — depending on the application needs, 16-bit or\n * 8-bit storage can be sufficient for mesh geometry, at 1/2 or 1/4 the size. For example, a 10x10\n * mesh might be written to a uint16 {@link Accessor}, with values `0–65536`, normalized to be\n * interpreted as `0–1`. With an additional 10x scale on any node {@link Node} instantiating the\n * quantized {@link Mesh}, the model retains its original scale with a minimal quality loss and\n * up to 50% file size reduction.\n *\n * Defining no {@link ExtensionProperty} types, this {@link Extension} is simply attached to the\n * {@link Document}, and affects the entire Document by allowing more flexible use of\n * {@link Accessor} types for vertex attributes. Without the Extension, the same use of these data\n * types would yield an invalid glTF document, under the stricter core glTF specification.\n *\n * Properties:\n * - N/A\n *\n * ### Example\n *\n * ```typescript\n * import { KHRMeshQuantization } from '@gltf-transform/extensions';\n * import { quantize } from '@gltf-transform/functions';\n *\n * // Create an Extension attached to the Document.\n * const quantizationExtension = document.createExtension(KHRMeshQuantization).setRequired(true);\n *\n * // Use Uint16Array, Uint8Array, Int16Array, and Int8Array in vertex accessors manually,\n * // or apply the provided quantize() function to compute quantized accessors automatically:\n * await document.transform(quantize({\n * \tquantizePosition: 16,\n * \tquantizeNormal: 12,\n * \tquantizeTexcoord: 14\n * }));\n * ```\n *\n * For more documentation about automatic quantization, see the {@link quantize} function.\n */\nexport class KHRMeshQuantization extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** @hidden */\n\tread(_: ReaderContext): this {\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\twrite(_: WriterContext): this {\n\t\treturn this;\n\t}\n}\n","import { read as readKTX, KHR_DF_MODEL_ETC1S, KHR_DF_MODEL_UASTC } from 'ktx-parse';\nimport {\n\tExtension,\n\tImageUtils,\n\tImageUtilsFormat,\n\tPropertyType,\n\tReaderContext,\n\tWriterContext,\n\tvec2,\n} from '@gltf-transform/core';\nimport { KHR_TEXTURE_BASISU } from '../constants.js';\n\nconst NAME = KHR_TEXTURE_BASISU;\n\ninterface BasisuDef {\n\tsource: number;\n}\n\nclass KTX2ImageUtils implements ImageUtilsFormat {\n\tmatch(array: Uint8Array): boolean {\n\t\treturn (\n\t\t\tarray[0] === 0xab &&\n\t\t\tarray[1] === 0x4b &&\n\t\t\tarray[2] === 0x54 &&\n\t\t\tarray[3] === 0x58 &&\n\t\t\tarray[4] === 0x20 &&\n\t\t\tarray[5] === 0x32 &&\n\t\t\tarray[6] === 0x30 &&\n\t\t\tarray[7] === 0xbb &&\n\t\t\tarray[8] === 0x0d &&\n\t\t\tarray[9] === 0x0a &&\n\t\t\tarray[10] === 0x1a &&\n\t\t\tarray[11] === 0x0a\n\t\t);\n\t}\n\tgetSize(array: Uint8Array): vec2 {\n\t\tconst container = readKTX(array);\n\t\treturn [container.pixelWidth, container.pixelHeight];\n\t}\n\tgetChannels(array: Uint8Array): number {\n\t\tconst container = readKTX(array);\n\t\tconst dfd = container.dataFormatDescriptor[0];\n\t\tif (dfd.colorModel === KHR_DF_MODEL_ETC1S) {\n\t\t\treturn dfd.samples.length === 2 && (dfd.samples[1].channelType & 0xf) === 15 ? 4 : 3;\n\t\t} else if (dfd.colorModel === KHR_DF_MODEL_UASTC) {\n\t\t\treturn (dfd.samples[0].channelType & 0xf) === 3 ? 4 : 3;\n\t\t}\n\t\tthrow new Error(`Unexpected KTX2 colorModel, \"${dfd.colorModel}\".`);\n\t}\n\tgetVRAMByteLength(array: Uint8Array): number {\n\t\tconst container = readKTX(array);\n\t\tconst hasAlpha = this.getChannels(array) > 3;\n\n\t\tlet uncompressedBytes = 0;\n\t\tfor (let i = 0; i < container.levels.length; i++) {\n\t\t\tconst level = container.levels[i];\n\n\t\t\t// Use level.uncompressedByteLength for UASTC; for ETC1S it's 0.\n\t\t\tif (level.uncompressedByteLength) {\n\t\t\t\tuncompressedBytes += level.uncompressedByteLength;\n\t\t\t} else {\n\t\t\t\tconst levelWidth = Math.max(1, Math.floor(container.pixelWidth / Math.pow(2, i)));\n\t\t\t\tconst levelHeight = Math.max(1, Math.floor(container.pixelHeight / Math.pow(2, i)));\n\t\t\t\tconst blockSize = hasAlpha ? 16 : 8;\n\t\t\t\tuncompressedBytes += (levelWidth / 4) * (levelHeight / 4) * blockSize;\n\t\t\t}\n\t\t}\n\n\t\treturn uncompressedBytes;\n\t}\n}\n\n/**\n * [`KHR_texture_basisu`](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_basisu)\n * enables KTX2 GPU textures with Basis Universal supercompression for any material texture.\n *\n * GPU texture formats, unlike traditional image formats, remain compressed in GPU memory. As a\n * result, they (1) upload to the GPU much more quickly, and (2) require much less GPU memory. In\n * certain cases they may also have smaller filesizes than PNG or JPEG textures, but this is not\n * guaranteed. GPU textures often require more careful tuning during compression to maintain image\n * quality, but this extra effort is worthwhile for applications that need to maintain a smooth\n * framerate while uploading images, or where GPU memory is limited.\n *\n * Defining no {@link ExtensionProperty} types, this {@link Extension} is simply attached to the\n * {@link Document}, and affects the entire Document by allowing use of the `image/ktx2` MIME type\n * and passing KTX2 image data to the {@link Texture.setImage} method. Without the Extension, the\n * same MIME types and image data would yield an invalid glTF document, under the stricter core glTF\n * specification.\n *\n * Properties:\n * - N/A\n *\n * ### Example\n *\n * ```typescript\n * import { KHRTextureBasisu } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const basisuExtension = document.createExtension(KHRTextureBasisu)\n * \t.setRequired(true);\n * document.createTexture('MyCompressedTexture')\n * \t.setMimeType('image/ktx2')\n * \t.setImage(fs.readFileSync('my-texture.ktx2'));\n * ```\n *\n * Compression is not done automatically when adding the extension as shown above — you must\n * compress the image data first, then pass the `.ktx2` payload to {@link Texture.setImage}. The\n * glTF Transform CLI has functions to help with this, or any similar KTX2-capable\n * utility will work.\n *\n * When the `KHR_texture_basisu` extension is added to a file by glTF Transform, the extension\n * should always be required. This tool does not support writing assets that \"fall back\" to optional\n * PNG or JPEG image data.\n *\n * > _**NOTICE:** Compressing some textures — particularly 3-component (RGB) normal maps, and\n * > occlusion/roughness/metalness maps, may give poor results with the ETC1S compression option.\n * > These issues can often be avoided with the larger UASTC compression option, or by upscaling the\n * > texture before compressing it.\n * >\n * > For best results when authoring new textures, use\n * > [texture dilation](https://docs.substance3d.com/spdoc/padding-134643719.html) and minimize\n * > prominent UV seams._\n */\nexport class KHRTextureBasisu extends Extension {\n\tpublic readonly extensionName = NAME;\n\t/** @hidden */\n\tpublic readonly prereadTypes = [PropertyType.TEXTURE];\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** @hidden */\n\tpublic static register(): void {\n\t\tImageUtils.registerFormat('image/ktx2', new KTX2ImageUtils());\n\t}\n\n\t/** @hidden */\n\tpublic preread(context: ReaderContext): this {\n\t\tcontext.jsonDoc.json.textures!.forEach((textureDef) => {\n\t\t\tif (textureDef.extensions && textureDef.extensions[NAME]) {\n\t\t\t\tconst basisuDef = textureDef.extensions[NAME] as BasisuDef;\n\t\t\t\ttextureDef.source = basisuDef.source;\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tpublic read(context: ReaderContext): this {\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listTextures()\n\t\t\t.forEach((texture) => {\n\t\t\t\tif (texture.getMimeType() === 'image/ktx2') {\n\t\t\t\t\tconst imageIndex = context.imageIndexMap.get(texture);\n\t\t\t\t\tjsonDoc.json.textures!.forEach((textureDef) => {\n\t\t\t\t\t\tif (textureDef.source === imageIndex) {\n\t\t\t\t\t\t\ttextureDef.extensions = textureDef.extensions || {};\n\t\t\t\t\t\t\ttextureDef.extensions[NAME] = { source: textureDef.source };\n\t\t\t\t\t\t\tdelete textureDef.source;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { ExtensionProperty, IProperty, Nullable, vec2 } from '@gltf-transform/core';\nimport { PropertyType } from '@gltf-transform/core';\nimport { KHR_TEXTURE_TRANSFORM } from '../constants.js';\n\ninterface ITransform extends IProperty {\n\toffset: vec2;\n\trotation: number;\n\tscale: vec2;\n\ttexCoord: number | null; // null → do not override TextureInfo.\n}\n\n/**\n * Defines UV transform for a {@link TextureInfo}. See {@link KHRTextureTransform}.\n */\nexport class Transform extends ExtensionProperty<ITransform> {\n\tpublic static EXTENSION_NAME = KHR_TEXTURE_TRANSFORM;\n\tpublic declare extensionName: typeof KHR_TEXTURE_TRANSFORM;\n\tpublic declare propertyType: 'Transform';\n\tpublic declare parentTypes: [PropertyType.TEXTURE_INFO];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_TEXTURE_TRANSFORM;\n\t\tthis.propertyType = 'Transform';\n\t\tthis.parentTypes = [PropertyType.TEXTURE_INFO];\n\t}\n\n\tprotected getDefaults(): Nullable<ITransform> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, {\n\t\t\toffset: [0.0, 0.0] as vec2,\n\t\t\trotation: 0,\n\t\t\tscale: [1.0, 1.0] as vec2,\n\t\t\ttexCoord: null,\n\t\t});\n\t}\n\n\tpublic getOffset(): vec2 {\n\t\treturn this.get('offset');\n\t}\n\tpublic setOffset(offset: vec2): this {\n\t\treturn this.set('offset', offset);\n\t}\n\n\tpublic getRotation(): number {\n\t\treturn this.get('rotation');\n\t}\n\tpublic setRotation(rotation: number): this {\n\t\treturn this.set('rotation', rotation);\n\t}\n\n\tpublic getScale(): vec2 {\n\t\treturn this.get('scale');\n\t}\n\tpublic setScale(scale: vec2): this {\n\t\treturn this.set('scale', scale);\n\t}\n\n\tpublic getTexCoord(): number | null {\n\t\treturn this.get('texCoord');\n\t}\n\tpublic setTexCoord(texCoord: number | null): this {\n\t\treturn this.set('texCoord', texCoord);\n\t}\n}\n","import { Extension, MathUtils, ReaderContext, WriterContext, vec2 } from '@gltf-transform/core';\nimport { KHR_TEXTURE_TRANSFORM } from '../constants.js';\nimport { Transform } from './transform.js';\n\nconst NAME = KHR_TEXTURE_TRANSFORM;\n\ninterface TransformDef {\n\toffset?: vec2;\n\trotation?: number;\n\tscale?: vec2;\n\ttexCoord?: number;\n}\n\n/**\n * [`KHR_texture_transform`](https://github.com/KhronosGroup/gltf/blob/main/extensions/2.0/Khronos/KHR_texture_transform/)\n * adds offset, rotation, and scale to {@link TextureInfo} properties.\n *\n * Affine UV transforms are useful for reducing the number of textures the GPU must load, improving\n * performance when used in techniques like texture atlases. UV transforms cannot be animated at\n * this time.\n *\n * Properties:\n * - {@link Transform}\n *\n * ### Example\n *\n * The `KHRTextureTransform` class provides a single {@link ExtensionProperty} type, `Transform`, which\n * may be attached to any {@link TextureInfo} instance. For example:\n *\n * ```typescript\n * import { KHRTextureTransform } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const transformExtension = document.createExtension(KHRTextureTransform)\n * \t.setRequired(true);\n *\n * // Create a reusable Transform.\n * const transform = transformExtension.createTransform()\n * \t.setScale([100, 100]);\n *\n * // Apply the Transform to a Material's baseColorTexture.\n * document.createMaterial()\n * \t.setBaseColorTexture(myTexture)\n * \t.getBaseColorTextureInfo()\n * \t.setExtension('KHR_texture_transform', transform);\n * ```\n */\nexport class KHRTextureTransform extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new Transform property for use on a {@link TextureInfo}. */\n\tpublic createTransform(): Transform {\n\t\treturn new Transform(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tfor (const [textureInfo, textureInfoDef] of Array.from(context.textureInfos.entries())) {\n\t\t\tif (!textureInfoDef.extensions || !textureInfoDef.extensions[NAME]) continue;\n\n\t\t\tconst transform = this.createTransform();\n\t\t\tconst transformDef = textureInfoDef.extensions[NAME] as TransformDef;\n\n\t\t\tif (transformDef.offset !== undefined) transform.setOffset(transformDef.offset);\n\t\t\tif (transformDef.rotation !== undefined) transform.setRotation(transformDef.rotation);\n\t\t\tif (transformDef.scale !== undefined) transform.setScale(transformDef.scale);\n\t\t\tif (transformDef.texCoord !== undefined) transform.setTexCoord(transformDef.texCoord);\n\n\t\t\ttextureInfo.setExtension(NAME, transform);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst textureInfoEntries = Array.from(context.textureInfoDefMap.entries());\n\t\tfor (const [textureInfo, textureInfoDef] of textureInfoEntries) {\n\t\t\tconst transform = textureInfo.getExtension<Transform>(NAME);\n\t\t\tif (!transform) continue;\n\n\t\t\ttextureInfoDef.extensions = textureInfoDef.extensions || {};\n\t\t\tconst transformDef = {} as TransformDef;\n\n\t\t\tconst eq = MathUtils.eq;\n\t\t\tif (!eq(transform.getOffset(), [0, 0])) transformDef.offset = transform.getOffset();\n\t\t\tif (transform.getRotation() !== 0) transformDef.rotation = transform.getRotation();\n\t\t\tif (!eq(transform.getScale(), [1, 1])) transformDef.scale = transform.getScale();\n\t\t\tif (transform.getTexCoord() != null) transformDef.texCoord = transform.getTexCoord()!;\n\n\t\t\ttextureInfoDef.extensions[NAME] = transformDef;\n\t\t}\n\t\treturn this;\n\t}\n}\n","import { Nullable, PropertyType, ExtensionProperty, IProperty } from '@gltf-transform/core';\nimport { KHR_XMP_JSON_LD } from '../constants.js';\n\ntype Term = string;\ntype TermDefinition = string | Record<string, string>;\n\ntype Value = string | number | boolean;\n\nconst PARENT_TYPES = [\n\tPropertyType.ROOT,\n\tPropertyType.SCENE,\n\tPropertyType.NODE,\n\tPropertyType.MESH,\n\tPropertyType.MATERIAL,\n\tPropertyType.TEXTURE,\n\tPropertyType.ANIMATION,\n];\n\ninterface IPacket extends IProperty {\n\t// https://json-ld.org/spec/latest/json-ld/#the-context\n\tcontext: Record<Term, TermDefinition>;\n\tproperties: Record<string, Value | Record<string, unknown>>;\n}\n\n/**\n * Defines an XMP packet associated with a Document or Property. See {@link KHRXMP}.\n */\nexport class Packet extends ExtensionProperty<IPacket> {\n\tpublic declare propertyType: 'Packet';\n\tpublic declare parentTypes: typeof PARENT_TYPES;\n\tpublic declare extensionName: typeof KHR_XMP_JSON_LD;\n\tpublic static EXTENSION_NAME = KHR_XMP_JSON_LD;\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_XMP_JSON_LD;\n\t\tthis.propertyType = 'Packet';\n\t\tthis.parentTypes = PARENT_TYPES;\n\t}\n\n\tprotected getDefaults(): Nullable<IPacket> {\n\t\treturn Object.assign(super.getDefaults(), { context: {}, properties: {} });\n\t}\n\n\t/**********************************************************************************************\n\t * Context.\n\t */\n\n\t/**\n\t * Returns the XMP context definition URL for the given term.\n\t * See: https://json-ld.org/spec/latest/json-ld/#the-context\n\t * @param term Case-sensitive term. Usually a concise, lowercase, alphanumeric identifier.\n\t */\n\tpublic getContext(): Record<Term, TermDefinition> {\n\t\treturn this.get('context');\n\t}\n\n\t/**\n\t * Sets the XMP context definition URL for the given term.\n\t * See: https://json-ld.org/spec/latest/json-ld/#the-context\n\t *\n\t * Example:\n\t *\n\t * ```typescript\n\t * packet.setContext({\n\t *   dc: 'http://purl.org/dc/elements/1.1/',\n\t *   model3d: 'https://schema.khronos.org/model3d/xsd/1.0/',\n\t * });\n\t * ```\n\t *\n\t * @param term Case-sensitive term. Usually a concise, lowercase, alphanumeric identifier.\n\t * @param definition URI for XMP namespace.\n\t */\n\tpublic setContext(context: Record<Term, TermDefinition>): this {\n\t\treturn this.set('context', { ...context });\n\t}\n\n\t/**********************************************************************************************\n\t * Properties.\n\t */\n\n\t/**\n\t * Lists properties defined in this packet.\n\t *\n\t * Example:\n\t *\n\t * ```typescript\n\t * packet.listProperties(); // → ['dc:Language', 'dc:Creator', 'xmp:CreateDate']\n\t * ```\n\t */\n\tpublic listProperties(): string[] {\n\t\treturn Object.keys(this.get('properties'));\n\t}\n\n\t/**\n\t * Returns the value of a property, as a literal or JSONLD object.\n\t *\n\t * Example:\n\t *\n\t * ```typescript\n\t * packet.getProperty('dc:Creator'); // → {\"@list\": [\"Acme, Inc.\"]}\n\t * packet.getProperty('dc:Title'); // → {\"@type\": \"rdf:Alt\", \"rdf:_1\": {\"@language\": \"en-US\", \"@value\": \"Lamp\"}}\n\t * packet.getProperty('xmp:CreateDate'); // → \"2022-01-01\"\n\t * ```\n\t */\n\tpublic getProperty(name: string): Value | Record<string, unknown> | null {\n\t\tconst properties = this.get('properties');\n\t\treturn name in properties ? properties[name] : null;\n\t}\n\n\t/**\n\t * Sets the value of a property, as a literal or JSONLD object.\n\t *\n\t * Example:\n\t *\n\t * ```typescript\n\t * packet.setProperty('dc:Creator', {'@list': ['Acme, Inc.']});\n\t * packet.setProperty('dc:Title', {\n\t * \t'@type': 'rdf:Alt',\n\t * \t'rdf:_1': {'@language': 'en-US', '@value': 'Lamp'}\n\t * });\n\t * packet.setProperty('model3d:preferredSurfaces', {'@list': ['vertical']});\n\t * ```\n\t */\n\tpublic setProperty(name: string, value: Value | Record<string, unknown>): this {\n\t\tthis._assertContext(name);\n\n\t\tconst properties = { ...this.get('properties') };\n\t\tif (value) {\n\t\t\tproperties[name] = value;\n\t\t} else {\n\t\t\tdelete properties[name];\n\t\t}\n\t\treturn this.set('properties', properties);\n\t}\n\n\t/**********************************************************************************************\n\t * Serialize / Deserialize.\n\t */\n\n\t/**\n\t * Serializes the packet context and properties to a JSONLD object.\n\t */\n\tpublic toJSONLD(): Record<string, unknown> {\n\t\tconst context = copyJSON(this.get('context'));\n\t\tconst properties = copyJSON(this.get('properties'));\n\t\treturn { '@context': context, ...properties };\n\t}\n\n\t/**\n\t * Deserializes a JSONLD packet, then overwrites existing context and properties with\n\t * the new values.\n\t */\n\tpublic fromJSONLD(jsonld: Record<string, unknown>): this {\n\t\tjsonld = copyJSON(jsonld);\n\n\t\t// Context.\n\t\tconst context = jsonld['@context'] as Record<Term, TermDefinition>;\n\t\tif (context) this.set('context', context);\n\t\tdelete jsonld['@context'];\n\n\t\t// Properties.\n\t\treturn this.set('properties', jsonld as Record<string, string | Record<string, unknown>>);\n\t}\n\n\t/**********************************************************************************************\n\t * Validation.\n\t */\n\n\t/** @hidden */\n\tprivate _assertContext(name: string) {\n\t\tconst prefix = name.split(':')[0];\n\t\tif (!(prefix in this.get('context'))) {\n\t\t\tthrow new Error(`${KHR_XMP_JSON_LD}: Missing context for term, \"${name}\".`);\n\t\t}\n\t}\n}\n\nfunction copyJSON<T>(object: T): T {\n\treturn JSON.parse(JSON.stringify(object));\n}\n","import {\n\tAnimation,\n\tExtension,\n\tGLTF,\n\tMaterial,\n\tMesh,\n\tNode,\n\tPropertyType,\n\tReaderContext,\n\tScene,\n\tTexture,\n\tWriterContext,\n} from '@gltf-transform/core';\nimport { KHR_XMP_JSON_LD } from '../constants.js';\nimport { Packet } from './packet.js';\n\nconst NAME = KHR_XMP_JSON_LD;\n\ntype XMPPacketDef = Record<string, unknown>;\n\ntype XMPParentDef =\n\t| GLTF.IAsset\n\t| GLTF.IScene\n\t| GLTF.INode\n\t| GLTF.IMesh\n\t| GLTF.IMaterial\n\t| GLTF.ITexture\n\t| GLTF.IAnimation;\n\ninterface XMPPropertyDef {\n\tpacket: number;\n}\n\ninterface XMPRootDef {\n\tpackets?: XMPPacketDef[];\n}\n\n/**\n * [KHR_xmp_json_ld](https://github.com/KhronosGroup/gltf/blob/main/extensions/2.0/Khronos/KHR_xmp_json_ld/)\n * defines XMP metadata associated with a glTF asset.\n *\n * XMP metadata provides standardized fields describing the content, provenance, usage\n * restrictions, or other attributes of a 3D model. XMP metadata does not generally affect the\n * parsing or runtime behavior of the content — for that, use custom extensions, custom vertex\n * attributes, or extras. Similarly, storage mechanisms other than XMP should be preferred\n * for binary content like mesh data, animations, or textures.\n *\n * Generally XMP metadata is associated with the entire glTF asset by attaching an XMP {@link Packet}\n * to the document {@link Root}. In less common cases where metadata must be associated with\n * specific subsets of a document, XMP Packets may be attached to {@link Scene}, {@link Node},\n * {@link Mesh}, {@link Material}, {@link Texture}, or {@link Animation} properties.\n *\n * Within each packet, XMP properties become available when an\n * [XMP namespace](https://www.adobe.io/xmp/docs/XMPNamespaces/) is registered\n * with {@link Packet.setContext}. Packets cannot use properties whose namespaces are not\n * registered as context. While not all XMP namespaces are relevant to 3D assets, some common\n * namespaces provide useful metadata about authorship and provenance. Additionally, the `model3d`\n * namespace provides certain properties specific to 3D content, such as Augmented Reality (AR)\n * orientation data.\n *\n * Common XMP contexts for 3D models include:\n *\n * | Prefix      | URI                                         | Name                           |\n * |:------------|:--------------------------------------------|:-------------------------------|\n * | `dc`        | http://purl.org/dc/elements/1.1/            | Dublin Core                    |\n * | `model3d`   | https://schema.khronos.org/model3d/xsd/1.0/ | Model 3D                       |\n * | `rdf`       | http://www.w3.org/1999/02/22-rdf-syntax-ns# | Resource Description Framework |\n * | `xmp`       | http://ns.adobe.com/xap/1.0/                | XMP                            |\n * | `xmpRights` | http://ns.adobe.com/xap/1.0/rights/         | XMP Rights Management          |\n *\n * Only the XMP contexts required for a packet should be assigned, and different packets\n * in the same asset may use different contexts. For greater detail on available XMP\n * contexts and how to use them in glTF assets, see the\n * [3DC Metadata Recommendations](https://github.com/KhronosGroup/3DC-Metadata-Recommendations/blob/main/model3d.md).\n *\n * Properties:\n * - {@link Packet}\n *\n * ### Example\n *\n * ```typescript\n * import { KHRXMP, Packet } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const xmpExtension = document.createExtension(KHRXMP);\n *\n * // Create Packet property.\n * const packet = xmpExtension.createPacket()\n * \t.setContext({\n * \t\tdc: 'http://purl.org/dc/elements/1.1/',\n * \t})\n *\t.setProperty('dc:Creator', {\"@list\": [\"Acme, Inc.\"]});\n *\n * // Option 1: Assign to Document Root.\n * document.getRoot().setExtension('KHR_xmp_json_ld', packet);\n *\n * // Option 2: Assign to a specific Property.\n * texture.setExtension('KHR_xmp_json_ld', packet);\n * ```\n */\nexport class KHRXMP extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new XMP packet, to be linked with a {@link Document} or {@link Property Properties}. */\n\tpublic createPacket(): Packet {\n\t\treturn new Packet(this.document.getGraph());\n\t}\n\n\t/** Lists XMP packets currently defined in a {@link Document}. */\n\tpublic listPackets(): Packet[] {\n\t\treturn Array.from(this.properties) as Packet[];\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst extensionDef = context.jsonDoc.json.extensions?.[NAME] as XMPRootDef | undefined;\n\t\tif (!extensionDef || !extensionDef.packets) return this;\n\n\t\t// Deserialize packets.\n\t\tconst json = context.jsonDoc.json;\n\t\tconst root = this.document.getRoot();\n\t\tconst packets = extensionDef.packets.map((packetDef) => this.createPacket().fromJSONLD(packetDef));\n\n\t\tconst defLists = [\n\t\t\t[json.asset],\n\t\t\tjson.scenes,\n\t\t\tjson.nodes,\n\t\t\tjson.meshes,\n\t\t\tjson.materials,\n\t\t\tjson.images,\n\t\t\tjson.animations,\n\t\t];\n\n\t\tconst propertyLists = [\n\t\t\t[root],\n\t\t\troot.listScenes(),\n\t\t\troot.listNodes(),\n\t\t\troot.listMeshes(),\n\t\t\troot.listMaterials(),\n\t\t\troot.listTextures(),\n\t\t\troot.listAnimations(),\n\t\t];\n\n\t\t// Assign packets.\n\t\tfor (let i = 0; i < defLists.length; i++) {\n\t\t\tconst defs = defLists[i] || [];\n\t\t\tfor (let j = 0; j < defs.length; j++) {\n\t\t\t\tconst def = defs[j];\n\t\t\t\tif (def.extensions && def.extensions[NAME]) {\n\t\t\t\t\tconst xmpDef = def.extensions[NAME] as XMPPropertyDef;\n\t\t\t\t\tpropertyLists[i][j].setExtension(NAME, packets[xmpDef.packet]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst { json } = context.jsonDoc;\n\n\t\tconst packetDefs = [];\n\n\t\tfor (const packet of this.properties as Set<Packet>) {\n\t\t\t// Serialize packets.\n\t\t\tpacketDefs.push(packet.toJSONLD());\n\n\t\t\t// Assign packets.\n\n\t\t\tfor (const parent of packet.listParents()) {\n\t\t\t\tlet parentDef: XMPParentDef | null;\n\n\t\t\t\tswitch (parent.propertyType) {\n\t\t\t\t\tcase PropertyType.ROOT:\n\t\t\t\t\t\tparentDef = json.asset;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase PropertyType.SCENE:\n\t\t\t\t\t\tparentDef = json.scenes![context.sceneIndexMap.get(parent as Scene)!];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase PropertyType.NODE:\n\t\t\t\t\t\tparentDef = json.nodes![context.nodeIndexMap.get(parent as Node)!];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase PropertyType.MESH:\n\t\t\t\t\t\tparentDef = json.meshes![context.meshIndexMap.get(parent as Mesh)!];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase PropertyType.MATERIAL:\n\t\t\t\t\t\tparentDef = json.materials![context.materialIndexMap.get(parent as Material)!];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase PropertyType.TEXTURE:\n\t\t\t\t\t\tparentDef = json.images![context.imageIndexMap.get(parent as Texture)!];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase PropertyType.ANIMATION:\n\t\t\t\t\t\tparentDef = json.animations![context.animationIndexMap.get(parent as Animation)!];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tparentDef = null;\n\t\t\t\t\t\tthis.document\n\t\t\t\t\t\t\t.getLogger()\n\t\t\t\t\t\t\t.warn(`[${NAME}]: Unsupported parent property, \"${parent.propertyType}\"`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (!parentDef) continue;\n\n\t\t\t\tparentDef.extensions = parentDef.extensions || {};\n\t\t\t\tparentDef.extensions[NAME] = { packet: packetDefs.length - 1 };\n\t\t\t}\n\t\t}\n\n\t\tif (packetDefs.length > 0) {\n\t\t\tjson.extensions = json.extensions || {};\n\t\t\tjson.extensions[NAME] = { packets: packetDefs };\n\t\t}\n\n\t\treturn this;\n\t}\n}\n","import { EXTMeshGPUInstancing } from './ext-mesh-gpu-instancing/index.js';\nimport { EXTMeshoptCompression } from './ext-meshopt-compression/index.js';\nimport { EXTTextureAVIF } from './ext-texture-avif/index.js';\nimport { EXTTextureWebP } from './ext-texture-webp/index.js';\nimport { KHRDracoMeshCompression } from './khr-draco-mesh-compression/index.js';\nimport { KHRLightsPunctual } from './khr-lights-punctual/index.js';\nimport { KHRMaterialsAnisotropy } from './khr-materials-anisotropy/index.js';\nimport { KHRMaterialsClearcoat } from './khr-materials-clearcoat/index.js';\nimport { KHRMaterialsEmissiveStrength } from './khr-materials-emissive-strength/index.js';\nimport { KHRMaterialsIOR } from './khr-materials-ior/index.js';\nimport { KHRMaterialsIridescence } from './khr-materials-iridescence/index.js';\nimport { KHRMaterialsPBRSpecularGlossiness } from './khr-materials-pbr-specular-glossiness/index.js';\nimport { KHRMaterialsSheen } from './khr-materials-sheen/index.js';\nimport { KHRMaterialsSpecular } from './khr-materials-specular/index.js';\nimport { KHRMaterialsTransmission } from './khr-materials-transmission/index.js';\nimport { KHRMaterialsUnlit } from './khr-materials-unlit/index.js';\nimport { KHRMaterialsVariants } from './khr-materials-variants/index.js';\nimport { KHRMaterialsVolume } from './khr-materials-volume/index.js';\nimport { KHRMeshQuantization } from './khr-mesh-quantization/index.js';\nimport { KHRTextureBasisu } from './khr-texture-basisu/index.js';\nimport { KHRTextureTransform } from './khr-texture-transform/index.js';\nimport { KHRXMP } from './khr-xmp-json-ld/index.js';\n\nexport const KHRONOS_EXTENSIONS = [\n\tKHRDracoMeshCompression,\n\tKHRLightsPunctual,\n\tKHRMaterialsAnisotropy,\n\tKHRMaterialsClearcoat,\n\tKHRMaterialsEmissiveStrength,\n\tKHRMaterialsIOR,\n\tKHRMaterialsIridescence,\n\tKHRMaterialsPBRSpecularGlossiness,\n\tKHRMaterialsSpecular,\n\tKHRMaterialsSheen,\n\tKHRMaterialsTransmission,\n\tKHRMaterialsUnlit,\n\tKHRMaterialsVariants,\n\tKHRMaterialsVolume,\n\tKHRMeshQuantization,\n\tKHRTextureBasisu,\n\tKHRTextureTransform,\n\tKHRXMP,\n];\n\nexport const ALL_EXTENSIONS = [\n\tEXTMeshGPUInstancing,\n\tEXTMeshoptCompression,\n\tEXTTextureAVIF,\n\tEXTTextureWebP,\n\t...KHRONOS_EXTENSIONS,\n];\n\nexport * from './ext-mesh-gpu-instancing/index.js';\nexport * from './ext-meshopt-compression/index.js';\nexport * from './ext-texture-avif/index.js';\nexport * from './ext-texture-webp/index.js';\nexport * from './khr-draco-mesh-compression/index.js';\nexport * from './khr-lights-punctual/index.js';\nexport * from './khr-materials-anisotropy/index.js';\nexport * from './khr-materials-clearcoat/index.js';\nexport * from './khr-materials-emissive-strength/index.js';\nexport * from './khr-materials-ior/index.js';\nexport * from './khr-materials-iridescence/index.js';\nexport * from './khr-materials-sheen/index.js';\nexport * from './khr-materials-specular/index.js';\nexport * from './khr-materials-pbr-specular-glossiness/index.js';\nexport * from './khr-materials-transmission/index.js';\nexport * from './khr-materials-unlit/index.js';\nexport * from './khr-materials-variants/index.js';\nexport * from './khr-materials-volume/index.js';\nexport * from './khr-mesh-quantization/index.js';\nexport * from './khr-texture-basisu/index.js';\nexport * from './khr-texture-transform/index.js';\nexport * from './khr-xmp-json-ld/index.js';\n"],"names":["EXT_MESH_GPU_INSTANCING","EXT_MESHOPT_COMPRESSION","KHR_DRACO_MESH_COMPRESSION","KHR_LIGHTS_PUNCTUAL","KHR_MATERIALS_ANISOTROPY","KHR_MATERIALS_CLEARCOAT","KHR_MATERIALS_EMISSIVE_STRENGTH","KHR_MATERIALS_IOR","KHR_MATERIALS_IRIDESCENCE","KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS","KHR_MATERIALS_SHEEN","KHR_MATERIALS_SPECULAR","KHR_MATERIALS_TRANSMISSION","KHR_MATERIALS_UNLIT","KHR_MATERIALS_VOLUME","KHR_MATERIALS_VARIANTS","KHR_TEXTURE_TRANSFORM","KHR_XMP_JSON_LD","INSTANCE_ATTRIBUTE","InstancedMesh","ExtensionProperty","init","this","extensionName","propertyType","parentTypes","PropertyType","NODE","getDefaults","Object","assign","super","attributes","getAttribute","semantic","getRefMap","setAttribute","accessor","setRefMap","usage","listAttributes","listRefMapValues","listSemantics","listRefMapKeys","EXTENSION_NAME","NAME","EXTMeshGPUInstancing","Extension","constructor","args","provideTypes","prewriteTypes","ACCESSOR","createInstancedMesh","document","getGraph","read","context","jsonDoc","json","nodes","forEach","nodeDef","nodeIndex","extensions","instancedMeshDef","instancedMesh","accessors","setExtension","prewrite","accessorUsageGroupedByParent","add","prop","properties","attribute","addAccessorToUsageGroup","write","getRoot","listNodes","node","getExtension","nodeIndexMap","get","accessorIndexMap","EncoderMethod","MeshoptMode","MeshoptFilter","BYTE","SHORT","FLOAT","Accessor","ComponentType","encodeNormalizedInt","decodeNormalizedInt","MathUtils","prepareAccessor","encoder","mode","filterOptions","filter","bits","result","array","getArray","byteStride","getElementSize","getComponentSize","componentType","getComponentType","normalized","getNormalized","ATTRIBUTES","NONE","srcArray","dstArray","Float32Array","length","i","decodeNormalizedIntArray","EXPONENTIAL","encodeFilterExp","getCount","OCTAHEDRAL","il","padNormals","encodeFilterOct","QUATERNION","encodeFilterQuat","Error","min","getMin","max","getMax","map","v","elementSize","elementStride","BufferUtils","padNumber","BYTES_PER_ELEMENT","j","padArrayElements","byteLength","getMeshoptMode","WriterContext","BufferViewUsage","ELEMENT_ARRAY_BUFFER","listParents","some","parent","Primitive","getMode","Mode","TRIANGLES","INDICES","getMeshoptFilter","doc","refs","listParentEdges","edge","getParent","Root","ref","refName","getName","refKey","getAttributes","key","isDelta","PRIMITIVE_TARGET","startsWith","targetPath","getTargetPath","sampler","AnimationSampler","channel","AnimationChannel","DEFAULT_ENCODER_OPTIONS","method","QUANTIZE","EXTMeshoptCompression","prereadTypes","BUFFER","PRIMITIVE","readDependencies","writeDependencies","_decoder","_decoderFallbackBufferMap","Map","_encoder","_encoderOptions","_encoderFallbackBuffer","_encoderBufferViews","_encoderBufferViewData","_encoderBufferViewAccessors","install","dependency","setEncoderOptions","options","_extends","preread","isRequired","supported","_prereadBuffers","_prereadPrimitives","bufferViews","viewDef","index","meshoptDef","byteOffset","count","stride","Uint8Array","bufferDef","buffers","buffer","source","toView","uri","resources","GLB_BUFFER","decodeGltfBuffer","fallback","set","_context","fallbackBuffer","swap","dispose","_prewriteAccessors","_prewriteBuffers","createBuffer","fallbackBufferIndex","listBuffers","indexOf","listAccessors","getSparse","getAccessorUsage","FILTER","preparedAccessor","getBuffer","bufferIndex","join","bufferView","bufferViewData","bufferViewAccessors","target","USAGE_TO_TARGET","ARRAY_BUFFER","undefined","NAME$l","accessorDef","createAccessorDef","push","EXT_meshopt_compression","otherBufferViews","concat","encodeGltfBuffer","compressedData","pad","fallbackBufferByteOffset","bufferViewIndex","otherBufferViewsIndexMap","finalBufferViewDef","compressedByteOffset","bufferIndexMap","fallbackBufferDef","AVIFImageUtils","match","decodeText","slice","getSize","view","DataView","box","unbox","offset","end","type","start","getUint32","getChannels","_buffer","EXTTextureAVIF","TEXTURE","register","ImageUtils","registerFormat","textures","textureDef","listTextures","texture","getMimeType","imageIndex","imageIndexMap","data","size","WEBPImageUtils","RIFF","WEBP","chunkId","getUint8","chunkByteLength","getInt16","b0","b1","b2","EXTTextureWebP","decoderModule","COMPONENT_ARRAY","DATA_TYPE","encoderModule","decodeGeometry","decoder","DecoderBuffer","Init","GetEncodedGeometryType","TRIANGULAR_MESH","dracoMesh","Mesh","DecodeBufferToMesh","ok","ptr","destroy","decodeIndex","mesh","numIndices","num_faces","indices","num_points","Uint16Array","_malloc","GetTrianglesUInt16Array","HEAPU16","Uint32Array","GetTrianglesUInt32Array","HEAPU32","_free","decodeAttribute","dataType","ArrayCtor","numComponents","num_components","numValues","GetAttributeDataArrayForAllPoints","HEAPF32","AttributeEnum","DEFAULT_QUANTIZATION_BITS","POSITION","NORMAL","COLOR","TEX_COORD","GENERIC","decodeSpeed","encodeSpeed","EDGEBREAKER","quantizationBits","quantizationVolume","encodeGeometry","prim","_options","builder","MeshBuilder","ExpertEncoder","attributeIDs","dracoBuffer","DracoInt8Array","hasMorphTargets","listTargets","hasSparseAttributes","attributeEnum","getAttributeEnum","attributeID","addAttribute","SetAttributeQuantization","range","Math","SetAttributeExplicitQuantization","getIndices","EncodingError","AddFacesToMesh","SetSpeedOptions","SetTrackEncodedProperties","SetEncodingMethod","SEQUENTIAL","MESH_SEQUENTIAL_ENCODING","MESH_EDGEBREAKER_ENCODING","EncodeToDracoBuffer","GetValue","numVertices","GetNumberOfEncodedPoints","GetNumberOfEncodedFaces","itemSize","UNSIGNED_BYTE","AddUInt8Attribute","AddInt8Attribute","UNSIGNED_SHORT","AddUInt16Attribute","AddInt16Attribute","UNSIGNED_INT","AddUInt32Attribute","AddFloatAttribute","KHRDracoMeshCompression","_decoderModule","_encoderModule","Int16Array","Int8Array","DT_FLOAT32","DT_UINT32","DT_UINT16","DT_UINT8","DT_INT16","DT_INT8","logger","getLogger","dracoMeshes","meshDefs","meshes","meshDef","primDef","primitives","dracoDef","bufferViewDef","Decoder","debug","dracoAttribute","GetAttributeByUniqueId","attributeArray","setArray","Array","from","values","_propertyType","JSON","stringify","primitiveHashMap","included","Set","excluded","listMeshes","listPrimitives","warn","accessorIndices","includedAccessors","includedHashKeys","primToHashKey","hashKey","createHashKey","has","dstIndices","clone","dstAttribute","keys","ROOT","attr","listDracoPrimitives","primitiveEncodingMap","listScenes","getBounds","pop","primHash","accessorDefs","encodedPrim","e","message","indicesDef","attributeDef","extensionData","dracoContext","meshIndexMap","extensionsUsed","name","extensionsRequired","indexMap","hashElements","sort","Light","color","intensity","Type","POINT","innerConeAngle","outerConeAngle","PI","getColor","setColor","getColorHex","ColorUtils","factorToHex","setColorHex","hex","hexToFactor","getIntensity","setIntensity","getType","setType","getRange","setRange","getInnerConeAngle","setInnerConeAngle","angle","getOuterConeAngle","setOuterConeAngle","SPOT","DIRECTIONAL","KHRLightsPunctual","createLight","lights","lightDef","_lightDef$spot","_lightDef$spot2","light","setName","spot","lightDefs","lightIndexMap","property","eq","R","G","B","TextureChannel","Anisotropy","MATERIAL","anisotropyStrength","anisotropyRotation","anisotropyTexture","anisotropyTextureInfo","TextureInfo","graph","getAnisotropyStrength","setAnisotropyStrength","strength","getAnisotropyRotation","setAnisotropyRotation","rotation","getAnisotropyTexture","getRef","getAnisotropyTextureInfo","setAnisotropyTexture","setRef","channels","KHRMaterialsAnisotropy","createAnisotropy","textureDefs","materials","materialDef","materialIndex","anisotropy","anisotropyDef","textureInfoDef","setTextureInfo","listMaterials","material","materialIndexMap","textureInfo","createTextureInfoDef","Clearcoat","clearcoatFactor","clearcoatTexture","clearcoatTextureInfo","clearcoatRoughnessFactor","clearcoatRoughnessTexture","clearcoatRoughnessTextureInfo","clearcoatNormalScale","clearcoatNormalTexture","clearcoatNormalTextureInfo","getClearcoatFactor","setClearcoatFactor","factor","getClearcoatTexture","getClearcoatTextureInfo","setClearcoatTexture","getClearcoatRoughnessFactor","setClearcoatRoughnessFactor","getClearcoatRoughnessTexture","getClearcoatRoughnessTextureInfo","setClearcoatRoughnessTexture","getClearcoatNormalScale","setClearcoatNormalScale","scale","getClearcoatNormalTexture","getClearcoatNormalTextureInfo","setClearcoatNormalTexture","KHRMaterialsClearcoat","createClearcoat","clearcoat","clearcoatDef","EmissiveStrength","emissiveStrength","getEmissiveStrength","setEmissiveStrength","KHRMaterialsEmissiveStrength","createEmissiveStrength","emissiveStrengthDef","IOR","ior","getIOR","setIOR","KHRMaterialsIOR","createIOR","iorDef","Iridescence","iridescenceFactor","iridescenceTexture","iridescenceTextureInfo","iridescenceIOR","iridescenceThicknessMinimum","iridescenceThicknessMaximum","iridescenceThicknessTexture","iridescenceThicknessTextureInfo","getIridescenceFactor","setIridescenceFactor","getIridescenceTexture","getIridescenceTextureInfo","setIridescenceTexture","getIridescenceIOR","setIridescenceIOR","getIridescenceThicknessMinimum","setIridescenceThicknessMinimum","thickness","getIridescenceThicknessMaximum","setIridescenceThicknessMaximum","getIridescenceThicknessTexture","getIridescenceThicknessTextureInfo","setIridescenceThicknessTexture","KHRMaterialsIridescence","createIridescence","iridescence","iridescenceDef","iridescenceIor","A","PBRSpecularGlossiness","diffuseFactor","diffuseTexture","diffuseTextureInfo","specularFactor","glossinessFactor","specularGlossinessTexture","specularGlossinessTextureInfo","getDiffuseFactor","setDiffuseFactor","getDiffuseHex","setDiffuseHex","getDiffuseTexture","getDiffuseTextureInfo","setDiffuseTexture","isColor","getSpecularFactor","setSpecularFactor","getGlossinessFactor","setGlossinessFactor","getSpecularGlossinessTexture","getSpecularGlossinessTextureInfo","setSpecularGlossinessTexture","KHRMaterialsPBRSpecularGlossiness","createPBRSpecularGlossiness","specGloss","specGlossDef","Sheen","sheenColorFactor","sheenColorTexture","sheenColorTextureInfo","sheenRoughnessFactor","sheenRoughnessTexture","sheenRoughnessTextureInfo","getSheenColorFactor","getSheenColorHex","setSheenColorFactor","setSheenColorHex","getSheenColorTexture","getSheenColorTextureInfo","setSheenColorTexture","getSheenRoughnessFactor","setSheenRoughnessFactor","getSheenRoughnessTexture","getSheenRoughnessTextureInfo","setSheenRoughnessTexture","KHRMaterialsSheen","createSheen","sheen","sheenDef","Specular","specularTexture","specularTextureInfo","specularColorFactor","specularColorTexture","specularColorTextureInfo","getSpecularColorFactor","setSpecularColorFactor","getSpecularColorHex","setSpecularColorHex","getSpecularTexture","getSpecularTextureInfo","setSpecularTexture","getSpecularColorTexture","getSpecularColorTextureInfo","setSpecularColorTexture","KHRMaterialsSpecular","createSpecular","specular","specularDef","Transmission","transmissionFactor","transmissionTexture","transmissionTextureInfo","getTransmissionFactor","setTransmissionFactor","getTransmissionTexture","getTransmissionTextureInfo","setTransmissionTexture","KHRMaterialsTransmission","createTransmission","transmission","transmissionDef","Unlit","KHRMaterialsUnlit","createUnlit","Mapping","variants","getMaterial","setMaterial","addVariant","variant","addRef","removeVariant","removeRef","listVariants","listRefs","MappingList","mappings","addMapping","mapping","removeMapping","listMappings","Variant","KHRMaterialsVariants","createMappingList","createVariant","createMapping","variantDef","meshIndex","primIndex","mappingList","variantPrimDef","mappingDef","variantIndex","variantDefs","variantIndexMap","createPropertyDef","mappingDefs","Volume","thicknessFactor","thicknessTexture","thicknessTextureInfo","attenuationDistance","Infinity","attenuationColor","getThicknessFactor","setThicknessFactor","getThicknessTexture","getThicknessTextureInfo","setThicknessTexture","getAttenuationDistance","setAttenuationDistance","distance","getAttenuationColor","setAttenuationColor","getAttenuationColorHex","setAttenuationColorHex","KHRMaterialsVolume","createVolume","volume","volumeDef","Number","isFinite","KHRMeshQuantization","_","KTX2ImageUtils","container","readKTX","pixelWidth","pixelHeight","dfd","dataFormatDescriptor","colorModel","KHR_DF_MODEL_ETC1S","samples","channelType","KHR_DF_MODEL_UASTC","getVRAMByteLength","hasAlpha","uncompressedBytes","levels","level","uncompressedByteLength","floor","pow","KHRTextureBasisu","Transform","TEXTURE_INFO","texCoord","getOffset","setOffset","getRotation","setRotation","getScale","setScale","getTexCoord","setTexCoord","KHRTextureTransform","createTransform","textureInfos","entries","transform","transformDef","textureInfoEntries","textureInfoDefMap","PARENT_TYPES","SCENE","MESH","ANIMATION","Packet","getContext","setContext","listProperties","getProperty","setProperty","value","_assertContext","toJSONLD","copyJSON","fromJSONLD","jsonld","split","object","parse","KHRXMP","createPacket","listPackets","_context$jsonDoc$json","extensionDef","packets","root","packetDef","defLists","asset","scenes","images","animations","propertyLists","listAnimations","defs","def","packet","packetDefs","parentDef","sceneIndexMap","animationIndexMap","KHRONOS_EXTENSIONS","ALL_EXTENSIONS"],"mappings":"qZAAa,MAAAA,EAA0B,0BAC1BC,EAA0B,0BAG1BC,EAA6B,6BAC7BC,EAAsB,sBACtBC,EAA2B,2BAC3BC,EAA0B,0BAC1BC,EAAkC,kCAClCC,EAAoB,oBACpBC,EAA4B,4BAC5BC,EAAwC,sCACxCC,EAAsB,sBACtBC,EAAyB,yBACzBC,EAA6B,6BAC7BC,EAAsB,sBACtBC,EAAuB,uBACvBC,EAAyB,yBAGzBC,EAAwB,wBACxBC,EAAkB,kBCblBC,EAAqB,qBAK5B,MAAOC,UAAsBC,EAMxBC,IAAAA,GACTC,KAAKC,cAAgBvB,EACrBsB,KAAKE,aAAe,gBACpBF,KAAKG,YAAc,CAACC,EAAaC,KAClC,CAEUC,WAAAA,GACT,OAAOC,OAAOC,OAAOC,MAAMH,cAA4B,CAAEI,WAAY,CAAA,GACtE,CAGOC,YAAAA,CAAaC,GACnB,OAAOZ,KAAKa,UAAU,aAAcD,EACrC,CAMOE,YAAAA,CAAaF,EAAkBG,GACrC,OAAWf,KAACgB,UAAU,aAAcJ,EAAUG,EAAU,CAAEE,MAAOrB,GAClE,CAMOsB,cAAAA,GACN,OAAWlB,KAACmB,iBAAiB,aAC9B,CAMOC,aAAAA,GACN,OAAOpB,KAAKqB,eAAe,aAC5B,EA3CYxB,EACEyB,eAAiB5C,ECVhC,MAAM6C,EAAO7C,EAuEP,MAAO8C,UAA6BC,EAASC,WAAAA,IAAAC,YAAAA,GAAA3B,KAClCC,cAAgBsB,OAEhBK,aAAe,CAACxB,EAAaC,MAE7BwB,KAAAA,cAAgB,CAACzB,EAAa0B,SAAS,CAIhDC,mBAAAA,GACN,WAAWlC,EAAcG,KAAKgC,SAASC,WACxC,CAGOC,IAAAA,CAAKC,GAiBX,OAhBgBA,EAAQC,QAECC,KAAKC,OAAS,IAC9BC,QAAQ,CAACC,EAASC,KAC1B,IAAKD,EAAQE,aAAeF,EAAQE,WAAWnB,GAAO,OAEtD,MAAMoB,EAAmBH,EAAQE,WAAWnB,GACtCqB,EAAgB5C,KAAK+B,sBAE3B,IAAK,MAAMnB,KAAY+B,EAAiBjC,WACvCkC,EAAc9B,aAAaF,EAAUuB,EAAQU,UAAUF,EAAiBjC,WAAWE,KAGpFuB,EAAQG,MAAMG,GAAWK,aAAavB,EAAMqB,EAAa,GAGnD5C,IACR,CAGO+C,QAAAA,CAASZ,GAGfA,EAAQa,6BAA6BC,IAAIrD,GACzC,IAAK,MAAMsD,KAAYlD,KAACmD,WACvB,IAAK,MAAMC,KAAcF,EAAuBhC,iBAC/CiB,EAAQkB,wBAAwBD,EAAWxD,GAG7C,OAAOI,IACR,CAGOsD,KAAAA,CAAMnB,GACZ,MAAMC,EAAUD,EAAQC,QAuBxB,OArBApC,KAAKgC,SACHuB,UACAC,YACAjB,QAASkB,IACT,MAAMb,EAAgBa,EAAKC,aAA4BnC,GACvD,GAAIqB,EAAe,CAClB,MAAMH,EAAYN,EAAQwB,aAAaC,IAAIH,GACrCjB,EAAUJ,EAAQC,KAAKC,MAAOG,GAE9BE,EAAmB,CAAEjC,WAAY,CAAA,GAEvCkC,EAAcxB,gBAAgBmB,QAAS3B,IACtC,MAAMwC,EAAYR,EAAcjC,aAAaC,GAC7C+B,EAAiBjC,WAAWE,GAAYuB,EAAQ0B,iBAAiBD,IAAIR,EAAS,GAG/EZ,EAAQE,WAAaF,EAAQE,YAAc,CAAA,EAC3CF,EAAQE,WAAWnB,GAAQoB,CAC5B,IAIH3C,IAAA,sOClJD,IAAY8D,EASAC,EAMAC,ED0DCxC,EAMWF,eAAiBC,EC/EzC,SAAYuC,GACXA,EAAA,SAAA,WACAA,EAAA,OAAA,QACA,CAHD,CAAYA,IAAAA,EAGX,KAMD,SAAYC,GACXA,EAAA,WAAA,aACAA,EAAA,UAAA,YACAA,EAAA,QAAA,SACA,CAJD,CAAYA,IAAAA,EAIX,CAAA,IAED,SAAYC,GAEXA,EAAA,KAAA,OAEAA,EAAA,WAAA,aAEAA,EAAA,WAAA,aAEAA,EAAA,YAAA,aACA,CATD,CAAYA,IAAAA,EASX,CAAA,ICRD,MAAMC,KAAEA,EAAIC,MAAEA,EAAKC,MAAEA,GAAUC,EAASC,eAClCC,oBAAEA,EAAmBC,oBAAEA,GAAwBC,WAGrCC,EACf1D,EACA2D,EACAC,EACAC,GAEA,MAAMC,OAAEA,EAAMC,KAAEA,GAASF,EACnBG,EAA2B,CAChCC,MAAOjE,EAASkE,WAChBC,WAAYnE,EAASoE,iBAAmBpE,EAASqE,mBACjDC,cAAetE,EAASuE,mBACxBC,WAAYxE,EAASyE,iBAGtB,GAAIb,IAASZ,EAAY0B,WAAY,OAAOV,EAE5C,GAAIF,IAAWb,EAAc0B,KAAM,CAClC,IAAIV,EAAQjE,EAASyE,gBA+CvB,SAAkCpC,GACjC,MAAMiC,EAAgBjC,EAAUkC,mBAC1BK,EAAWvC,EAAU6B,WACrBW,EAAW,IAAIC,aAAaF,EAASG,QAC3C,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAASG,OAAQC,IACpCH,EAASG,GAAKxB,EAAoBoB,EAASI,GAAIV,GAEhD,OAAOO,CACR,CAvDyCI,CAAyBjF,GAAY,IAAI8E,aAAad,EAAOC,OAEpG,OAAQH,GACP,KAAKb,EAAciC,YAClBlB,EAAOG,WAAyC,EAA5BnE,EAASoE,iBAC7BJ,EAAOM,cAAgBlB,EACvBY,EAAOQ,YAAa,EACpBR,EAAOC,MAAQN,EAAQwB,gBAAgBlB,EAAOjE,EAASoF,WAAYpB,EAAOG,WAAYJ,GACtF,MAED,KAAKd,EAAcoC,WAClBrB,EAAOG,WAAaJ,EAAO,EAAI,EAAI,EACnCC,EAAOM,cAAgBP,EAAO,EAAIZ,EAAQD,EAC1Cc,EAAOQ,YAAa,EACpBP,EAAsC,IAA9BjE,EAASoE,iBA6DrB,SAAoBQ,GACnB,MAAMC,EAAW,IAAIC,aAAgC,EAAlBF,EAASG,OAAc,GAC1D,IAAK,IAAIC,EAAI,EAAGM,EAAKV,EAASG,OAAS,EAAGC,EAAIM,EAAIN,IACjDH,EAAa,EAAJG,GAASJ,EAAa,EAAJI,GAC3BH,EAAa,EAAJG,EAAQ,GAAKJ,EAAa,EAAJI,EAAQ,GACvCH,EAAa,EAAJG,EAAQ,GAAKJ,EAAa,EAAJI,EAAQ,GAExC,OAAOH,CACR,CArE8CU,CAAWtB,GAASA,EAC9DD,EAAOC,MAAQN,EAAQ6B,gBAAgBvB,EAAOjE,EAASoF,WAAYpB,EAAOG,WAAYJ,GACtF,MAED,KAAKd,EAAcwC,WAClBzB,EAAOG,WAAa,EACpBH,EAAOM,cAAgBnB,EACvBa,EAAOQ,YAAa,EACpBR,EAAOC,MAAQN,EAAQ+B,iBAAiBzB,EAAOjE,EAASoF,WAAYpB,EAAOG,WAAYJ,GACvF,MAED,QACC,MAAU,IAAA4B,MAAM,mBAGlB3B,EAAO4B,IAAM5F,EAAS6F,OAAO,IAC7B7B,EAAO8B,IAAM9F,EAAS+F,OAAO,IACzB/F,EAASyE,kBACZT,EAAO4B,IAAM5B,EAAO4B,IAAII,IAAKC,GAAMzC,EAAoByC,EAAGjG,EAASuE,qBACnEP,EAAO8B,IAAM9B,EAAO8B,IAAIE,IAAKC,GAAMzC,EAAoByC,EAAGjG,EAASuE,sBAEhEP,EAAOQ,aACVR,EAAO4B,IAAM5B,EAAO4B,IAAII,IAAKC,GAAM1C,EAAoB0C,EAAGjC,EAAOM,gBACjEN,EAAO8B,IAAM9B,EAAO8B,IAAIE,IAAKC,GAAM1C,EAAoB0C,EAAGjC,EAAOM,gBAEnE,MAAWN,EAAOG,WAAa,IAC9BH,EAAOC,MAkBO,SAAuCW,EAAasB,GACnE,MACMC,EADaC,EAAYC,UAAUzB,EAAS0B,kBAAoBJ,GACnCtB,EAAS0B,kBAGtCzB,EAAW,IAAKD,EAASjE,YAFViE,EAASG,OAASmB,EAE6CC,GAEpF,IAAK,IAAInB,EAAI,EAAGA,EAAIkB,EAActB,EAASG,OAAQC,IAClD,IAAK,IAAIuB,EAAI,EAAGA,EAAIL,EAAaK,IAChC1B,EAASG,EAAImB,EAAgBI,GAAK3B,EAASI,EAAIkB,EAAcK,GAI/D,OAAO1B,CACR,CAhCiB2B,CAAiBxC,EAAOC,MAAOjE,EAASoE,kBACvDJ,EAAOG,WAAaH,EAAOC,MAAMwC,WAAazG,EAASoF,YAGxD,OAAOpB,CACR,UAwCgB0C,EAAe1G,EAAoBE,GAClD,OAAIA,IAAUyG,EAAcC,gBAAgBC,qBACvB7G,EAAS8G,cAAcC,KAAMC,GACzCA,aAAkBC,GAAaD,EAAOE,YAAcD,EAAUE,KAAKC,WAEtDpE,EAAYoE,UAAYpE,EAAYqE,QAGnDrE,EAAY0B,UACpB,CAEgB,SAAA4C,EAAiBtH,EAAoBuH,GACpD,MAAMC,EAAOD,EACXrG,WACAuG,gBAAgBzH,GAChB8D,OAAQ4D,KAAWA,EAAKC,sBAAuBC,IAEjD,IAAK,MAAMC,KAAOL,EAAM,CACvB,MAAMM,EAAUD,EAAIE,UACdC,EAAUH,EAAII,gBAAgBC,KAAO,GACrCC,EAAUN,EAAIF,YAAYxI,eAAiBE,EAAa+I,iBAG9D,GAAgB,YAAZN,EAAuB,MAAO,CAAEhE,OAAQb,EAAc0B,MAa1D,GAAgB,eAAZmD,EAA0B,CAC7B,GAAe,aAAXE,EAAuB,MAAO,CAAElE,OAAQb,EAAc0B,MAC1D,GAAe,eAAXqD,EAAyB,MAAO,CAAElE,OAAQb,EAAc0B,MAC5D,GAAIqD,EAAOK,WAAW,WAAY,MAAO,CAAEvE,OAAQb,EAAc0B,MACjE,GAAIqD,EAAOK,WAAW,YAAa,MAAO,CAAEvE,OAAQb,EAAc0B,MAClE,GAAe,WAAXqD,GAAkC,YAAXA,EAC1B,OAAOG,EAAU,CAAErE,OAAQb,EAAc0B,MAAS,CAAEb,OAAQb,EAAcoC,WAAYtB,KAAM,EAE9F,CAGA,GAAgB,WAAZ+D,EAAsB,CACzB,MAAMQ,EAAaC,GAAcvI,GACjC,MAAmB,aAAfsI,EAAkC,CAAExE,OAAQb,EAAcwC,WAAY1B,KAAM,IAC7D,gBAAfuE,GACe,UAAfA,EADqC,CAAExE,OAAQb,EAAciC,YAAanB,KAAM,IAE7E,CAAED,OAAQb,EAAc0B,KAChC,CAGA,GAAgB,UAAZmD,EAAqB,MAAO,CAAEhE,OAAQb,EAAc0B,MAExD,GAAgB,wBAAZmD,EAAmC,MAAO,CAAEhE,OAAQb,EAAc0B,KACvE,CAEA,MAAO,CAAEb,OAAQb,EAAc0B,KAChC,CAEgB,SAAA4D,GAAcvI,GAC7B,IAAK,MAAMwI,KAAWxI,EAAS8G,cAC9B,GAAM0B,aAAmBC,EACzB,IAAK,MAAMC,KAAWF,EAAQ1B,cAC7B,GAAM4B,aAAmBC,EACzB,OAAOD,EAAQH,gBAGjB,OACD,IAAA,CCpLA,MAAM/H,GAAO5C,EAMPgL,GAAoD,CACzDC,OAAQ9F,EAAc+F,UA4EjB,MAAOC,WAA8BrI,EAASC,WAAAA,IAAAC,YAAAA,GAAA3B,KACnCC,cAAgBsB,GAAIvB,KAEpB+J,aAAe,CAAC3J,EAAa4J,OAAQ5J,EAAa6J,WAElDpI,KAAAA,cAAgB,CAACzB,EAAa4J,OAAQ5J,EAAa0B,UAEnDoI,KAAAA,iBAAmB,CAAC,mBAAkBlK,KAEtCmK,kBAAoB,CAAC,mBAAkBnK,KAK/CoK,SAAyC,KAAIpK,KAC7CqK,0BAA4B,IAAIC,IAChCC,KAAAA,SAAyC,KAAIvK,KAC7CwK,gBAA4Cb,GAAuB3J,KACnEyK,uBAAwC,UACxCC,oBAA4D,GAAE1K,KAC9D2K,uBAA0D,CAAA,OAC1DC,4BAAmE,CAAA,CAAE,CAGtEC,OAAAA,CAAQ5B,EAAa6B,GAO3B,MANY,oBAAR7B,IACHjJ,KAAKoK,SAAWU,GAEL,oBAAR7B,IACHjJ,KAAKuK,SAAWO,GAEV9K,IACR,CA+BO+K,iBAAAA,CAAkBC,GAExB,OADAhL,KAAKwK,gBAAeS,EAAQtB,CAAAA,EAAAA,GAA4BqB,GAEzDhL,IAAA,CAOOkL,OAAAA,CAAQ/I,EAAwBjC,GACtC,IAAKF,KAAKoK,SAAU,CACnB,IAAKpK,KAAKmL,aAAc,OAAWnL,KACnC,MAAU,IAAA0G,UAAUnF,8DACrB,CACA,IAAKvB,KAAKoK,SAASgB,UAAW,CAC7B,IAAKpL,KAAKmL,aAAc,OAAWnL,KACnC,MAAU,IAAA0G,UAAUnF,6BACrB,CAQA,OANIrB,IAAiBE,EAAa4J,OACjChK,KAAKqL,gBAAgBlJ,GACXjC,IAAiBE,EAAa6J,WACxCjK,KAAKsL,mBAAmBnJ,GAGlBnC,IACR,CAGQqL,eAAAA,CAAgBlJ,GACvB,MAAMC,EAAUD,EAAQC,SAEPA,EAAQC,KAAKkJ,aAAe,IACpChJ,QAAQ,CAACiJ,EAASC,KAC1B,IAAKD,EAAQ9I,aAAe8I,EAAQ9I,WAAWnB,IAAO,OAEtD,MAAMmK,EAAaF,EAAQ9I,WAAWnB,IAChCoK,EAAaD,EAAWC,YAAc,EACtCnE,EAAakE,EAAWlE,YAAc,EACtCoE,EAAQF,EAAWE,MACnBC,EAASH,EAAWxG,WACpBH,EAAS,IAAI+G,WAAWF,EAAQC,GAEhCE,EAAY3J,EAAQC,KAAK2J,QAASN,EAAWO,QAG7CC,EAAS/E,EAAYgF,OADVJ,EAAUK,IAAMhK,EAAQiK,UAAUN,EAAUK,KAAOhK,EAAQiK,UAAUC,GAC1CX,EAAYnE,GAExDxH,KAAKoK,SAAUmC,iBAAiBxH,EAAQ6G,EAAOC,EAAQK,EAAQR,EAAW/G,KAAM+G,EAAW7G,QAE3F1C,EAAQoJ,YAAYE,GAAS1G,CAC9B,EACD,CASQuG,kBAAAA,CAAmBnJ,GAC1B,MAAMC,EAAUD,EAAQC,SACPA,EAAQC,KAAKkJ,aAAe,IAGpChJ,QAASiJ,IC1NJ,IAAiBO,ED2NzBP,EAAQ9I,YAAe8I,EAAQ9I,WAAWnB,MC3NjBwK,EDiOJ3J,EAAQC,KAAK2J,QAASR,EAAQS,SChO3CvJ,YAAeqJ,EAAUrJ,WAAW/D,IAC/BoN,EAAUrJ,WAAW/D,GACpB6N,UDgOlBxM,KAAKqK,0BAA0BoC,IAHTtK,EAAQ6J,QAAQR,EAAQS,QADhC9J,EAAQ6J,QAFJR,EAAQ9I,WAAWnB,IAEI0K,QAK1C,EAEF,CAGO/J,IAAAA,CAAKwK,GACX,IAAK1M,KAAKmL,aAAc,OAAOnL,KAG/B,IAAK,MAAO2M,EAAgBV,KAAWjM,KAAKqK,0BAA2B,CACtE,IAAK,MAAMtC,KAAU4E,EAAe9E,cAC/BE,aAAkB3D,GACrB2D,EAAO6E,KAAKD,EAAgBV,GAG9BU,EAAeE,SAChB,CAEA,OAAO7M,IACR,CAOO+C,QAAAA,CAASZ,EAAwBjC,GAMvC,OALIA,IAAiBE,EAAa0B,SACjC9B,KAAK8M,mBAAmB3K,GACdjC,IAAiBE,EAAa4J,QACxChK,KAAK+M,iBAAiB5K,GAGxBnC,IAAA,CAGQ8M,kBAAAA,CAAmB3K,GAC1B,MAAME,EAAOF,EAAQC,QAAQC,KACvBqC,EAAU1E,KAAKuK,SACfS,EAAUhL,KAAKwK,gBAEfmC,EAAiB3M,KAAKgC,SAASgL,eAC/BC,EAAsBjN,KAAKgC,SAASuB,UAAU2J,cAAcC,QAAQR,GAE1E3M,KAAKyK,uBAAyBkC,EAC9B3M,KAAK0K,oBAAsB,CAAA,EAC3B1K,KAAK2K,uBAAyB,GAC9B3K,KAAK4K,4BAA8B,GAEnC,IAAK,MAAM7J,KAAgBf,KAACgC,SAASuB,UAAU6J,gBAAiB,CAG/D,GAAgC,YAA5B9D,GAAcvI,GAAyB,SAG3C,GAAIA,EAASsM,YAAa,SAE1B,MAAMpM,EAAQkB,EAAQmL,iBAAiBvM,GACjC4D,EAAO8C,EAAe1G,EAAUE,GAChC4D,EACLmG,EAAQpB,SAAW9F,EAAcyJ,OAC9BlF,EAAiBtH,EAAUf,KAAKgC,UAChC,CAAE6C,OAAQb,EAAc0B,MACtB8H,EAAmB/I,EAAgB1D,EAAU2D,EAASC,EAAME,IAC5DG,MAAEA,EAAKE,WAAEA,GAAesI,EAExBvB,EAASlL,EAAS0M,YACxB,IAAKxB,EAAQ,MAAU,IAAAvF,SAASnF,oCAChC,MAAMmM,EAAc1N,KAAKgC,SAASuB,UAAU2J,cAAcC,QAAQlB,GAG5DhD,EAAM,CAAChI,EAAO0D,EAAME,EAAOA,OAAQK,EAAYwI,GAAaC,KAAK,KAEvE,IAAIC,EAAa5N,KAAK0K,oBAAoBzB,GACtC4E,EAAiB7N,KAAK2K,uBAAuB1B,GAC7C6E,EAAsB9N,KAAK4K,4BAA4B3B,GAGtD2E,GAAeC,IACnBC,EAAsB9N,KAAK4K,4BAA4B3B,GAAO,GAC9D4E,EAAiB7N,KAAK2K,uBAAuB1B,GAAO,GACpD2E,EAAa5N,KAAK0K,oBAAoBzB,GAAO,CAC5CgD,OAAQgB,EACRc,OAAQrG,EAAcsG,gBAAgB/M,GACtC0K,WAAY,EACZnE,WAAY,EACZtC,WAAYjE,IAAUyG,EAAcC,gBAAgBsG,aAAe/I,OAAagJ,EAChFxL,WAAY,CACXyL,CAAC5M,IAAO,CACP0K,OAAQyB,EACR/B,WAAY,EACZnE,WAAY,EACZ7C,KAAMA,EACNE,OAAQA,EAAOA,SAAWb,EAAc0B,KAAOb,EAAOA,YAASqJ,EAC/DhJ,WAAYA,EACZ0G,MAAO,MAOX,MAAMwC,EAAcjM,EAAQkM,kBAAkBtN,GAC9CqN,EAAY/I,cAAgBmI,EAAiBnI,cAC7C+I,EAAY7I,WAAaiI,EAAiBjI,WAC1C6I,EAAYzC,WAAaiC,EAAWpG,WAChC4G,EAAYzH,KAAO6G,EAAiB7G,MAAKyH,EAAYzH,IAAM6G,EAAiB7G,KAC5EyH,EAAYvH,KAAO2G,EAAiB3G,MAAKuH,EAAYvH,IAAM2G,EAAiB3G,KAChF1E,EAAQ0B,iBAAiB4I,IAAI1L,EAAUsB,EAAKQ,UAAWiD,QACvDzD,EAAKQ,UAAWyL,KAAKF,GACrBN,EAAoBQ,KAAKF,GAGzBP,EAAeS,KAAK,IAAIxC,WAAW9G,EAAMiH,OAAQjH,EAAM2G,WAAY3G,EAAMwC,aACzEoG,EAAWpG,YAAcxC,EAAMwC,WAC/BoG,EAAWlL,WAAW6L,wBAAwB3C,OAAS7K,EAASoF,UACjE,CACD,CAGQ4G,gBAAAA,CAAiB5K,GACxB,MAAMuC,EAAU1E,KAAKuK,SAErB,IAAK,MAAMtB,KAAOjJ,KAAK0K,oBAAqB,CAC3C,MAAMkD,EAAa5N,KAAK0K,oBAAoBzB,GACtC4E,EAAiB7N,KAAK2K,uBAAuB1B,GAC7CgD,EAASjM,KAAKgC,SAASuB,UAAU2J,cAAcU,EAAWlL,WAAWnB,IAAM0K,QAC3EuC,EAAmBrM,EAAQqM,iBAAiB5K,IAAIqI,IAAW,IAE3DL,MAAEA,EAAK1G,WAAEA,EAAUP,KAAEA,GAASiJ,EAAWlL,WAAWnB,IACpDoE,EAAWwB,EAAYsH,OAAOZ,GAC9BjI,EAAWlB,EAAQgK,iBAAiB/I,EAAUiG,EAAO1G,EAAYP,GACjEgK,EAAiBxH,EAAYyH,IAAIhJ,GAEvCgI,EAAWlL,WAAWnB,IAAMiG,WAAa5B,EAAS4B,WAElDqG,EAAe/H,OAAS,EACxB+H,EAAeS,KAAKK,GACpBH,EAAiBF,KAAKK,GACtBxM,EAAQqM,iBAAiB/B,IAAIR,EAAQuC,EACtC,CACD,CAGOlL,KAAAA,CAAMnB,GACZ,IAAI0M,EAA2B,EAG/B,IAAK,MAAM5F,UAAYyB,oBAAqB,CAC3C,MAAMkD,EAAa5N,KAAK0K,oBAAoBzB,GAEtC6F,EAAkB3M,EAAQ4M,yBAAyBnL,IADlC5D,KAAK2K,uBAAuB1B,GAAK,IAGlD6E,EAAsB9N,KAAK4K,4BAA4B3B,GAC7D,IAAK,MAAMmF,KAAeN,EACzBM,EAAYR,WAAakB,EAG1B,MAAME,EAAqB7M,EAAQC,QAAQC,KAAKkJ,YAAauD,GACvDG,EAAuBD,EAAmBrD,YAAc,EAE9DpL,OAAOC,OAAOwO,EAAoBpB,GAClCoB,EAAmBrD,WAAakD,EACDG,EAAmBtM,WAAYnB,IACvCoK,WAAasD,EAEpCJ,GAA4B1H,EAAYC,UAAUwG,EAAWpG,WAC9D,CAGA,MAAMmF,EAAiB3M,KAAKyK,uBACtBwC,EAAsB9K,EAAQ+M,eAAetL,IAAI+I,GACjDwC,EAAoBhN,EAAQC,QAAQC,KAAK2J,QAASiB,GAKxD,OAJAkC,EAAkB3H,WAAaqH,EAC/BM,EAAkBzM,WAAa,CAAEyL,CAAC5M,IAAO,CAAEiL,UAAU,IACrDG,EAAeE,UAER7M,IACR,EA9TY8J,GAWWxI,eAAiBC,GAX5BuI,GAYWhG,cAAgBA,EEpGxC,MAAMvC,GPT0B,mBOWhC,MAAM6N,GACLC,KAAAA,CAAMrK,GACL,OAAOA,EAAMc,QAAU,IAAqD,aAA/CqB,EAAYmI,WAAWtK,EAAMuK,MAAM,EAAG,IACpE,CAKAC,OAAAA,CAAQxK,GACP,IAAKhF,KAAKqP,MAAMrK,GAAQ,OAAO,KAM/B,MAAMyK,EAAO,IAAIC,SAAS1K,EAAMiH,OAAQjH,EAAM2G,WAAY3G,EAAMwC,YAEhE,IAAImI,EAAMC,GAAMH,EAAM,GACtB,IAAKE,EAAK,OAAO,KAEjB,IAAIE,EAASF,EAAIG,IACjB,KAAQH,EAAMC,GAAMH,EAAMI,IACzB,GAAiB,SAAbF,EAAII,KACPF,EAASF,EAAIK,MAAQ,OACXL,GAAa,SAAbA,EAAII,MAAgC,SAAbJ,EAAII,KACrCF,EAASF,EAAIK,UACP,IAAiB,SAAbL,EAAII,KACd,MAAO,CAACN,EAAKQ,UAAUN,EAAIK,MAAQ,GAAIP,EAAKQ,UAAUN,EAAIK,MAAQ,IACxDL,GAAa,SAAbA,EAAII,KACd,MAEAF,EAASF,EAAIG,GACd,CAGD,OAAO,IACR,CACAI,WAAAA,CAAYC,GACX,OACD,CAAA,EA0CK,MAAOC,WAAuB3O,EAASC,WAAAA,IAAAC,GAAAA,SAAAA,GAC5B1B,KAAAA,cAAgBsB,GAEhBwI,KAAAA,aAAe,CAAC3J,EAAaiQ,QAAQ,CAI9C,eAAOC,GACbC,EAAWC,eAAe,aAAc,IAAIpB,GAC7C,CAGOlE,OAAAA,CAAQ/I,GAOd,OANoBA,EAAQC,QAAQC,KAAKoO,UAAY,IACzClO,QAASmO,IAChBA,EAAWhO,YAAcgO,EAAWhO,WAAWnB,MAClDmP,EAAWxE,OAAUwE,EAAWhO,WAAWnB,IAA6B2K,OACzE,GAEMlM,IACR,CAIOkC,IAAAA,CAAKC,GACX,OACDnC,IAAA,CAGOsD,KAAAA,CAAMnB,GACZ,MAAMC,EAAUD,EAAQC,QAmBxB,OAjBApC,KAAKgC,SACHuB,UACAoN,eACApO,QAASqO,IACT,GAA8B,eAA1BA,EAAQC,cAAgC,CAC3C,MAAMC,EAAa3O,EAAQ4O,cAAcnN,IAAIgN,IACzBxO,EAAQC,KAAKoO,UAAY,IACjClO,QAASmO,IAChBA,EAAWxE,SAAW4E,IACzBJ,EAAWhO,WAAagO,EAAWhO,YAAc,CAAA,EACjDgO,EAAWhO,WAAWnB,IAAQ,CAAE2K,OAAQwE,EAAWxE,eAC5CwE,EAAWxE,OACnB,EAEF,IAGKlM,IACR,EASD,SAAS4P,GAAMoB,EAAgBnB,GAC9B,GAAImB,EAAKxJ,WAAa,EAAIqI,EAAQ,OAAW,KAG7C,MAAMoB,EAAOD,EAAKf,UAAUJ,GAC5B,OAAImB,EAAKxJ,WAAayJ,EAAOpB,GAAUoB,EAAO,EAAU,KAEjD,CACNlB,KAAM5I,EAAYmI,WAAW,IAAIxD,WAAWkF,EAAK/E,OAAQ+E,EAAKrF,WAAakE,EAAS,EAAG,IACvFG,MAAOH,EAAS,EAChBC,IAAKD,EAASoB,EAEhB,CAvEab,GAIW9O,eAAiBC,GCvFzC,MAAMA,GRV0B,mBQYhC,MAAM2P,GACL7B,KAAAA,CAAMrK,GACL,OAAOA,EAAMc,QAAU,IAAmB,KAAbd,EAAM,IAA0B,KAAbA,EAAM,IAA2B,KAAdA,EAAM,KAA4B,KAAdA,EAAM,GAC9F,CACAwK,OAAAA,CAAQxK,GAEP,MAAMmM,EAAOhK,EAAYmI,WAAWtK,EAAMuK,MAAM,EAAG,IAC7C6B,EAAOjK,EAAYmI,WAAWtK,EAAMuK,MAAM,EAAG,KACnD,GAAa,SAAT4B,GAA4B,SAATC,EAAiB,YAExC,MAAM3B,EAAO,IAAIC,SAAS1K,EAAMiH,OAAQjH,EAAM2G,YAG9C,IAAIkE,EAAS,GACb,KAAOA,EAASJ,EAAKjI,YAAY,CAChC,MAAM6J,EAAUlK,EAAYmI,WAC3B,IAAIxD,WAAW,CACd2D,EAAK6B,SAASzB,GACdJ,EAAK6B,SAASzB,EAAS,GACvBJ,EAAK6B,SAASzB,EAAS,GACvBJ,EAAK6B,SAASzB,EAAS,MAGnB0B,EAAkB9B,EAAKQ,UAAUJ,EAAS,GAAG,GACnD,GAAgB,SAAZwB,EAGH,MAAO,CAF0C,MAAnC5B,EAAK+B,SAAS3B,EAAS,IAAI,GACS,MAAnCJ,EAAK+B,SAAS3B,EAAS,IAAI,IAEhCwB,GAAY,SAAZA,EAAoB,CAC9B,MAAMI,EAAKhC,EAAK6B,SAASzB,EAAS,GAC5B6B,EAAKjC,EAAK6B,SAASzB,EAAS,IAC5B8B,EAAKlC,EAAK6B,SAASzB,EAAS,IAIlC,MAAO,CAFO,IAAY,GAAL6B,IAAc,EAAKD,GACzB,IAAY,GAFhBhC,EAAK6B,SAASzB,EAAS,MAEC,GAAO8B,GAAM,GAAY,IAALD,IAAc,GAEtE,CACA7B,GAAU,EAAI0B,EAAmBA,EAAkB,CACpD,CAEA,OAAO,IACR,CACArB,WAAAA,CAAYC,GACX,QACD,EA0CK,MAAOyB,WAAuBnQ,EAASC,WAAAA,IAAAC,YAAAA,GAAA3B,KAC5BC,cAAgBsB,GAEhBwI,KAAAA,aAAe,CAAC3J,EAAaiQ,QAAQ,CAI9C,eAAOC,GACbC,EAAWC,eAAe,aAAc,IAAIU,GAC7C,CAGOhG,OAAAA,CAAQ/I,GAOd,OANoBA,EAAQC,QAAQC,KAAKoO,UAAY,IACzClO,QAASmO,IAChBA,EAAWhO,YAAcgO,EAAWhO,WAAWnB,MAClDmP,EAAWxE,OAAUwE,EAAWhO,WAAWnB,IAA6B2K,OACzE,GAEMlM,IACR,CAIOkC,IAAAA,CAAKC,GACX,OAAOnC,IACR,CAGOsD,KAAAA,CAAMnB,GACZ,MAAMC,EAAUD,EAAQC,QAmBxB,OAjBApC,KAAKgC,SACHuB,UACAoN,eACApO,QAASqO,IACT,GAA8B,eAA1BA,EAAQC,cAAgC,CAC3C,MAAMC,EAAa3O,EAAQ4O,cAAcnN,IAAIgN,IACzBxO,EAAQC,KAAKoO,UAAY,IACjClO,QAASmO,IAChBA,EAAWxE,SAAW4E,IACzBJ,EAAWhO,WAAagO,EAAWhO,YAAc,CAAA,EACjDgO,EAAWhO,WAAWnB,IAAQ,CAAE2K,OAAQwE,EAAWxE,eAC5CwE,EAAWxE,OACnB,EAEF,IAGKlM,IACR,EAlDY4R,GAIWtQ,eAAiBC,GCpGzC,MAAMA,GAAO3C,EAEF,IAAAiT,GAGPC,GACAC,GCPOC,GDSK,SAAAC,GAAeC,EAAkBlB,GAChD,MAAM/E,EAAS,IAAI4F,GAAcM,cACjC,IAIC,GAHAlG,EAAOmG,KAAKpB,EAA8BA,EAAKlL,QAE1BoM,EAAQG,uBAAuBpG,KAC/B4F,GAAcS,gBAClC,MAAM,IAAI5L,UAAUnF,8BAGrB,MAAMgR,EAAY,IAAIV,GAAcW,KAGpC,IAFeN,EAAQO,mBAAmBxG,EAAQsG,GAEtCG,MAA0B,IAAlBH,EAAUI,IAC7B,MAAM,IAAIjM,UAAUnF,yBAGrB,OAAOgR,CACR,CAAC,QACAV,GAAce,QAAQ3G,EACvB,CACD,CAEgB,SAAA4G,GAAYX,EAAkBY,GAC7C,MACMC,EAAwB,EADbD,EAAKE,YAGtB,IAAIL,EACAM,EAEJ,GAAIH,EAAKI,cAAgB,MAAO,CAC/B,MAAM1L,EAAauL,EAAaI,YAAY9L,kBAC5CsL,EAAMd,GAAcuB,QAAQ5L,GAC5B0K,EAAQmB,wBAAwBP,EAAMtL,EAAYmL,GAClDM,EAAU,IAAIE,YAAYtB,GAAcyB,QAAQrH,OAAQ0G,EAAKI,GAAYxD,OAC1E,KAAO,CACN,MAAM/H,EAAauL,EAAaQ,YAAYlM,kBAC5CsL,EAAMd,GAAcuB,QAAQ5L,GAC5B0K,EAAQsB,wBAAwBV,EAAMtL,EAAYmL,GAClDM,EAAU,IAAIM,YAAY1B,GAAc4B,QAAQxH,OAAQ0G,EAAKI,GAAYxD,OAC1E,CAIA,OAFAsC,GAAc6B,MAAMf,GAEbM,CACR,CAEgB,SAAAU,GACfzB,EACAY,EACA1P,EACAgL,GAEA,MAAMwF,EAAW7B,GAAU3D,EAAY/I,eACjCwO,EAAY/B,GAAgB1D,EAAY/I,eACxCyO,EAAgB1Q,EAAU2Q,iBAE1BC,EADYlB,EAAKI,aACOY,EACxBtM,EAAqBwM,EAAYH,EAAUxM,kBAE3CsL,EAAMd,GAAcuB,QAAQ5L,GAClC0K,EAAQ+B,kCAAkCnB,EAAM1P,EAAWwQ,EAAUpM,EAAYmL,GACjF,MAAM3N,EAAoB,IAAI6O,EAAUhC,GAAcqC,QAAQjI,OAAQ0G,EAAKqB,GAAWzE,QAGtF,OAFAsC,GAAc6B,MAAMf,GAEb3N,CACR,CCzEY,IAAAlB,GAKPqQ,IALL,SAAYrQ,GACXA,EAAAA,EAAA,YAAA,GAAA,cACAA,EAAAA,EAAA,WAAA,GAAA,YACA,CAHD,CAAYA,KAAAA,GAGX,CAAA,IAED,SAAKqQ,GACJA,EAAA,SAAA,WACAA,EAAA,OAAA,SACAA,EAAA,MAAA,QACAA,EAAA,UAAA,YACAA,EAAA,QAAA,SACA,CAND,CAAKA,KAAAA,GAMJ,CAAA,IAED,MAAMC,GAA4B,CACjC,CAACD,GAAcE,UAAW,GAC1B,CAACF,GAAcG,QAAS,GACxB,CAACH,GAAcI,OAAQ,EACvB,CAACJ,GAAcK,WAAY,GAC3B,CAACL,GAAcM,SAAU,IAkBpB9K,GAA0C,CAC/C+K,YAAa,EACbC,YAAa,EACb/K,OAAQ9F,GAAc8Q,YACtBC,iBAAkBT,GAClBU,mBAAoB,iBAYLC,GAAeC,EAAiBC,EAA2BtL,IAC1E,MAAMqB,EAAOC,EAAA,CAAA,EAAQtB,GAA4BsL,GACjDjK,EAAQ6J,iBAAgB5J,EAAQmJ,CAAAA,EAAAA,GAA8Ba,EAASJ,kBAEvE,MAAMK,EAAU,IAAIlD,GAAcmD,YAC5BrC,EAAO,IAAId,GAAcQ,KAEzB9N,EAAU,IAAIsN,GAAcoD,cAActC,GAE1CuC,EAA0C,CAAE,EAC5CC,EAAc,IAAItD,GAAcuD,eAEhCC,EAAkBR,EAAKS,cAAc3P,OAAS,EACpD,IAAI4P,GAAsB,EAE1B,IAAK,MAAM9U,KAAYoU,EAAK5T,gBAAiB,CAC5C,MAAMgC,EAAY4R,EAAKrU,aAAaC,GAEpC,GAAIwC,EAAUiK,YAAa,CAC1BqI,GAAsB,EACtB,QACD,CAEA,MAAMC,EAAgBC,GAAiBhV,GACjCiV,EAAsBC,GAC3BZ,EACA9R,EAAUkC,mBACVwN,EACAd,GAAc2D,GACdvS,EAAU+C,WACV/C,EAAU+B,iBACV/B,EAAU6B,YAGX,IAAqB,IAAjB4Q,EAAoB,MAAU,IAAAnP,4BAA4B9F,iBAG9D,GADAyU,EAAazU,GAAYiV,EACU,SAA/B7K,EAAQ8J,oBAA8C,aAAblU,EAC5C8D,EAAQqR,yBAAyBF,EAAa7K,EAAQ6J,iBAAiBc,QACjE,IAA0C,iBAA/B3K,EAAQ8J,mBAezB,MAAM,IAAIpO,MAAM,sCAf0C,CAC1D,MAAMoO,mBAAEA,GAAuB9J,EACzBgL,EAAQC,KAAKpP,IAClBiO,EAAmBjO,IAAI,GAAKiO,EAAmBnO,IAAI,GACnDmO,EAAmBjO,IAAI,GAAKiO,EAAmBnO,IAAI,GACnDmO,EAAmBjO,IAAI,GAAKiO,EAAmBnO,IAAI,IAEpDjC,EAAQwR,iCACPL,EACA7K,EAAQ6J,iBAAiBc,GACzBvS,EAAU+B,iBACV2P,EAAmBnO,IACnBqP,EAEF,CAEA,CACD,CAEA,MAAM/C,EAAU+B,EAAKmB,aACrB,IAAKlD,EAAS,MAAU,IAAAmD,GAAc,gCAEtClB,EAAQmB,eAAevD,EAAMG,EAAQ9M,WAAa,EAAG8M,EAAQhO,YAE7DP,EAAQ4R,gBAAgBtL,EAAQ2J,YAAa3J,EAAQ0J,aACrDhQ,EAAQ6R,2BAA0B,GAKjC7R,EAAQ8R,kBADLxL,EAAQpB,SAAW9F,GAAc2S,YAAcjB,GAAmBE,EAC3C1D,GAAc0E,yBAEd1E,GAAc2E,2BAIzC,MAAMnP,EAAa9C,EAAQkS,sBAAsBpB,GAAmBE,GAAsBJ,GAC1F,GAAI9N,GAAc,EAAG,MAAM,IAAI4O,GAAc,qCAE7C,MAAMpF,EAAO,IAAIlF,WAAWtE,GAC5B,IAAK,IAAIzB,EAAI,EAAGA,EAAIyB,IAAczB,EACjCiL,EAAKjL,GAAKuP,EAAYuB,SAAS9Q,GAGhC,MAAM+Q,EAAcpS,EAAQqS,2BACtBhE,EAAiD,EAApCrO,EAAQsS,0BAO3B,OALAhF,GAAcY,QAAQ0C,GACtBtD,GAAcY,QAAQE,GACtBd,GAAcY,QAAQsC,GACtBlD,GAAcY,QAAQlO,GAEf,CAAEoS,cAAa/D,aAAY/B,OAAMqE,eACzC,CAEA,SAASO,GAAiBhV,GACzB,MAAiB,aAAbA,EACIuT,GAAcE,SACE,WAAbzT,EACHuT,GAAcG,OACX1T,EAASwI,WAAW,UACvB+K,GAAcI,MACX3T,EAASwI,WAAW,aACvB+K,GAAcK,UAEfL,GAAcM,OACtB,CAEA,SAASqB,GACRZ,EACA7P,EACAyN,EACA1P,EACAwI,EACAqL,EACAjS,GAEA,OAAQK,GACP,KAAKjB,EAASC,cAAc6S,cAC3B,OAAOhC,EAAQiC,kBAAkBrE,EAAM1P,EAAWwI,EAAOqL,EAAUjS,GACpE,KAAKZ,EAASC,cAAcJ,KAC3B,OAAOiR,EAAQkC,iBAAiBtE,EAAM1P,EAAWwI,EAAOqL,EAAUjS,GACnE,KAAKZ,EAASC,cAAcgT,eAC3B,OAAOnC,EAAQoC,mBAAmBxE,EAAM1P,EAAWwI,EAAOqL,EAAUjS,GACrE,KAAKZ,EAASC,cAAcH,MAC3B,OAAOgR,EAAQqC,kBAAkBzE,EAAM1P,EAAWwI,EAAOqL,EAAUjS,GACpE,KAAKZ,EAASC,cAAcmT,aAC3B,OAAOtC,EAAQuC,mBAAmB3E,EAAM1P,EAAWwI,EAAOqL,EAAUjS,GACrE,KAAKZ,EAASC,cAAcF,MAC3B,OAAO+Q,EAAQwC,kBAAkB5E,EAAM1P,EAAWwI,EAAOqL,EAAUjS,GACpE,QACC,MAAM,IAAI0B,qCAAqCrB,OAElD,CAEa,MAAA+Q,WAAsB1P,OCvKnC,MAAMnF,GAAO3C,EAkFA,MAAA+Y,WAAgClW,EAASC,WAAAA,IAAAC,GAAAA,SAAAA,QACrC1B,cAAgBsB,GAAIvB,KAEpB+J,aAAe,CAAC3J,EAAa6J,WAAUjK,KAEvC6B,cAAgB,CAACzB,EAAa0B,UAAS9B,KAEvCkK,iBAAmB,CAAC,mBAAkBlK,KAEtCmK,kBAAoB,CAAC,mBAAkBnK,KAU/C4X,eAAuC,KAAI5X,KAC3C6X,eAAuC,KAAI7X,KAC3CwK,gBAAkC,CAAA,CAAE,CAGrCK,OAAAA,CAAQ5B,EAAa6B,GAS3B,MARY,oBAAR7B,IACHjJ,KAAK4X,eAAiB9M,EFpDxB+G,GEqDoB7R,KAAK4X,eFnDzB9F,GAAkB,CACjB,CAAC1N,EAASC,cAAcF,OAAQ0B,aAChC,CAACzB,EAASC,cAAcmT,cAAejE,YACvC,CAACnP,EAASC,cAAcgT,gBAAiBlE,YACzC,CAAC/O,EAASC,cAAc6S,eAAgBpL,WACxC,CAAC1H,EAASC,cAAcH,OAAQ4T,WAChC,CAAC1T,EAASC,cAAcJ,MAAO8T,WAGhChG,GAAY,CACX,CAAC3N,EAASC,cAAcF,OAAQ0N,GAAcmG,WAC9C,CAAC5T,EAASC,cAAcmT,cAAe3F,GAAcoG,UACrD,CAAC7T,EAASC,cAAcgT,gBAAiBxF,GAAcqG,UACvD,CAAC9T,EAASC,cAAc6S,eAAgBrF,GAAcsG,SACtD,CAAC/T,EAASC,cAAcH,OAAQ2N,GAAcuG,SAC9C,CAAChU,EAASC,cAAcJ,MAAO4N,GAAcwG,UEsCjC,oBAARpP,IACHjJ,KAAK6X,eAAiB/M,EDvFxBkH,GCwFoBhS,KAAK6X,gBAGzB7X,IAAA,CAeO+K,iBAAAA,CAAkBC,GAExB,OADAhL,KAAKwK,gBAAkBQ,EAExBhL,IAAA,CAGOkL,OAAAA,CAAQ/I,GACd,IAAKnC,KAAK4X,eACT,MAAM,IAAIlR,UAAUnF,+DAGrB,MAAM+W,EAAStY,KAAKgC,SAASuW,YACvBnW,EAAUD,EAAQC,QAClBoW,EAA4C,IAAIlO,IAEtD,IACC,MAAMmO,EAAWrW,EAAQC,KAAKqW,QAAU,GACxC,IAAK,MAAMC,KAAWF,EACrB,IAAK,MAAMG,KAAWD,EAAQE,WAAY,CACzC,IAAKD,EAAQlW,aAAekW,EAAQlW,WAAWnB,IAAO,SAEtD,MAAMuX,EAAWF,EAAQlW,WAAWnB,IACpC,IAAK2Q,EAASK,GAAaiG,EAAY5U,IAAIkV,EAASlL,aAAe,GAEnE,IAAK2E,IAAcL,EAAS,CAC3B,MAAM6G,EAAgB3W,EAAQC,KAAKkJ,YAAauN,EAASlL,YACnD7B,EAAY3J,EAAQC,KAAK2J,QAAS+M,EAAc9M,QAQhD0C,EAAiBxH,EAAYgF,OANlBJ,EAAUK,IACxBhK,EAAQiK,UAAUN,EAAUK,KAC5BhK,EAAQiK,UAAUC,GAEFyM,EAAcpN,YAAc,EAC5BoN,EAAcvR,YAGjC0K,EAAU,IAAIlS,KAAK4X,eAAeoB,QAClCzG,EAAYN,GAAeC,EAASvD,GACpC6J,EAAY/L,IAAIqM,EAASlL,WAAY,CAACsE,EAASK,IAC/C+F,EAAOW,MAAU,IAAA1X,oBAAsBoN,EAAenH,oBACvD,CAGA,IAAK,MAAM5G,KAAYgY,EAAQlY,WAAY,CAC1C,MAAM0N,EAAcjM,EAAQC,QAAQC,KAAKQ,UAAW+V,EAAQlY,WAAWE,IACjEsY,EAAiBhH,EAAQiH,uBAAuB5G,EAAWuG,EAASpY,WAAWE,IAC/EwY,EAAiBzF,GAAgBzB,EAASK,EAAW2G,EAAgB9K,GAC3EjM,EAAQU,UAAU+V,EAAQlY,WAAWE,IAAWyY,SAASD,EAC1D,MAGwBlL,IAApB0K,EAAQ3F,SACX9Q,EAAQU,UAAU+V,EAAQ3F,SAASoG,SAASxG,GAAYX,EAASK,GAEnE,CAEF,CAAC,QACA,IAAK,MAAOL,EAASK,KAAc+G,MAAMC,KAAKf,EAAYgB,UACzDxZ,KAAK4X,eAAehF,QAAQV,GAC5BlS,KAAK4X,eAAehF,QAAQL,EAE9B,CAEA,OACDvS,IAAA,CAGOkC,IAAAA,CAAKwK,GACX,OACD1M,IAAA,CAGO+C,QAAAA,CAASZ,EAAwBsX,GACvC,IAAKzZ,KAAK6X,eACT,MAAM,IAAInR,UAAUnF,+DAGrB,MAAM+W,EAAStY,KAAKgC,SAASuW,YAC7BD,EAAOW,MAAU,IAAA1X,4BAA8BmY,KAAKC,UAAU3Z,KAAKwK,oBAEnE,MAAMoP,EA+GR,SAA6BtR,GAC5B,MAAMgQ,EAAShQ,EAAIiQ,YACbsB,EAAW,IAAIC,IACfC,EAAW,IAAID,IAGrB,IAAK,MAAMhH,KAAQxK,EAAI/E,UAAUyW,aAChC,IAAK,MAAMhF,KAAQlC,EAAKmH,iBAClBjF,EAAKmB,aAGCnB,EAAK/M,YAAcD,EAAUE,KAAKC,WAC5C4R,EAAS9W,IAAI+R,GACbsD,EAAO4B,SAAS3Y,+DAEhBsY,EAAS5W,IAAI+R,IANb+E,EAAS9W,IAAI+R,GACbsD,EAAO4B,SAAS3Y,6DAWnB,MAAMsB,EAAYyF,EAAI/E,UAAU6J,gBAC1B+M,EAAkB,IAAI7P,IAC5B,IAAK,IAAIvE,EAAI,EAAGA,EAAIlD,EAAUiD,OAAQC,IAAKoU,EAAgB1N,IAAI5J,EAAUkD,GAAIA,GAI7E,MAAMqU,EAAoB,IAAI9P,IACxB+P,EAAmB,IAAIP,IACvBQ,EAAgB,IAAIhQ,IAC1B,IAAK,MAAM0K,KAAQsE,MAAMC,KAAKM,GAAW,CACxC,IAAIU,EAAUC,GAAcxF,EAAMmF,GAGlC,GAAIE,EAAiBI,IAAIF,GACxBD,EAAc7N,IAAIuI,EAAMuF,OADzB,CASA,GAAIH,EAAkBK,IAAIzF,EAAKmB,cAAgB,CAC9C,MAAMlD,EAAU+B,EAAKmB,aACfuE,EAAazH,EAAQ0H,QAC3BR,EAAgB1N,IAAIiO,EAAYpS,EAAI/E,UAAU6J,gBAAgBtH,OAAS,GACvEkP,EAAKpI,KAAKqG,EAASyH,EACpB,CACA,IAAK,MAAMtX,KAAa4R,EAAK9T,iBAC5B,GAAIkZ,EAAkBK,IAAIrX,GAAY,CACrC,MAAMwX,EAAexX,EAAUuX,QAC/BR,EAAgB1N,IAAImO,EAActS,EAAI/E,UAAU6J,gBAAgBtH,OAAS,GACzEkP,EAAKpI,KAAKxJ,EAAWwX,EACtB,CAIDL,EAAUC,GAAcxF,EAAMmF,GAG9BE,EAAiBpX,IAAIsX,GACrBD,EAAc7N,IAAIuI,EAAMuF,GACxBH,EAAkB3N,IAAIuI,EAAKmB,aAAeoE,GAC1C,IAAK,MAAMnX,KAAa4R,EAAK9T,iBAC5BkZ,EAAkB3N,IAAIrJ,EAAWmX,EA5BlC,CA8BD,CAGA,IAAK,MAAMxZ,KAAYuY,MAAMC,KAAKa,EAAkBS,QAAS,CAC5D,MAAM1a,EAAc,IAAI2Z,IAAI/Y,EAAS8G,cAAcd,IAAK7D,GAASA,EAAKhD,eACtE,GAAyB,IAArBC,EAAY8Q,OAAe9Q,EAAYsa,IAAIra,EAAa6J,aAAe9J,EAAYsa,IAAIra,EAAa0a,MACvG,MAAU,IAAApU,UAAUnF,8EAEtB,CAGA,IAAK,MAAMyT,KAAQsE,MAAMC,KAAKM,GAAW,CACxC,MAAMU,EAAUD,EAAc1W,IAAIoR,GAC5B/B,EAAU+B,EAAKmB,aACrB,GACCiE,EAAkBxW,IAAIqP,KAAasH,GACnCvF,EAAK9T,iBAAiB4G,KAAMiT,GAASX,EAAkBxW,IAAImX,KAAUR,GAErE,MAAM,IAAI7T,UAAUnF,yDAEtB,CAGA,IAAK,MAAMyT,KAAQsE,MAAMC,KAAKQ,GAAW,CACxC,MAAM9G,EAAU+B,EAAKmB,aACrB,GAAIiE,EAAkBK,IAAIxH,IAAY+B,EAAK9T,iBAAiB4G,KAAMiT,GAASX,EAAkBK,IAAIM,IAChG,MAAU,IAAArU,UAAUnF,2EAEtB,CAEA,OAAO+Y,CACR,CAjN2BU,CAAoBhb,KAAKgC,UAC5CiZ,EAAuB,IAAI3Q,IAEjC,IAAIwK,EAAoC,OACQ,UAA5C9U,KAAKwK,gBAAgBsK,qBAC4B,IAAhD9U,KAAKgC,SAASuB,UAAU2X,aAAapV,OACxCwS,EAAO4B,SAAS3Y,2DAEhBuT,EAAqBqG,EAAUnb,KAAKgC,SAASuB,UAAU2X,aAAaE,QAItE,IAAK,MAAMpG,KAAQsE,MAAMC,KAAKK,EAAiBiB,QAAS,CACvD,MAAMQ,EAAWzB,EAAiBhW,IAAIoR,GACtC,IAAKqG,EAAU,MAAM,IAAI3U,MAAM,yBAG/B,GAAIuU,EAAqBR,IAAIY,GAAW,CACvCJ,EAAqBxO,IAAI4O,EAAUJ,EAAqBrX,IAAIyX,IAC5D,QACD,CAEA,MAAMpI,EAAU+B,EAAKmB,aACfmF,EAAenZ,EAAQC,QAAQC,KAAKQ,UAG1C,IAAI0Y,EACJ,IACCA,EAAcxG,GAAeC,EAAI/J,EAAA,CAAA,EAAOjL,KAAKwK,gBAAiBsK,CAAAA,uBAC/D,CAAE,MAAO0G,GACR,GAAIA,aAAapF,GAAe,CAC/BkC,EAAO4B,KAAS,IAAA3Y,QAAUia,EAAEC,2CAC5B,QACD,CACA,MAAMD,CACP,CAEAP,EAAqBxO,IAAI4O,EAAUE,GAGnC,MAAMG,EAAavZ,EAAQkM,kBAAkB4E,GAC7CyI,EAAW9P,MAAQ2P,EAAYxI,WAC/B5Q,EAAQ0B,iBAAiB4I,IAAIwG,EAASqI,EAAaxV,QACnDwV,EAAahN,KAAKoN,GAGlB,IAAK,MAAM9a,KAAYoU,EAAK5T,gBAAiB,CAC5C,MAAMgC,EAAY4R,EAAKrU,aAAaC,GACpC,QAA2CsN,IAAvCqN,EAAYlG,aAAazU,GAAyB,SAEtD,MAAM+a,EAAexZ,EAAQkM,kBAAkBjL,GAC/CuY,EAAa/P,MAAQ2P,EAAYzE,YACjC3U,EAAQ0B,iBAAiB4I,IAAIrJ,EAAWkY,EAAaxV,QACrDwV,EAAahN,KAAKqN,EACnB,CAGA,MAAM1P,EAAS+I,EAAKrU,aAAa,YAAa8M,aAAezN,KAAKgC,SAASuB,UAAU2J,cAAc,GAC9F/K,EAAQqM,iBAAiBiM,IAAIxO,IAAS9J,EAAQqM,iBAAiB/B,IAAIR,EAAQ,IAChF9J,EAAQqM,iBAAiB5K,IAAIqI,GAASqC,KAAKiN,EAAYvK,KACxD,CASA,OAPAsH,EAAOW,MAAU,IAAA1X,kBAAoBqY,EAAiB3I,oBAEtD9O,EAAQyZ,cAAcra,IAAQ,CAC7BqY,mBACAqB,wBAIFjb,IAAA,CAGOsD,KAAAA,CAAMnB,GACZ,MAAM0Z,EAAmC1Z,EAAQyZ,cAAcra,IAE/D,IAAK,MAAMuR,KAAY9S,KAACgC,SAASuB,UAAUyW,aAAc,CACxD,MAAMrB,EAAUxW,EAAQC,QAAQC,KAAKqW,OAAQvW,EAAQ2Z,aAAalY,IAAIkP,IACtE,IAAK,IAAI/M,EAAI,EAAGA,EAAI+M,EAAKmH,iBAAiBnU,OAAQC,IAAK,CACtD,MAAMiP,EAAOlC,EAAKmH,iBAAiBlU,GAC7B6S,EAAUD,EAAQE,WAAW9S,GAE7BsV,EAAWQ,EAAajC,iBAAiBhW,IAAIoR,GACnD,IAAKqG,EAAU,SAEf,MAAME,EAAcM,EAAaZ,qBAAqBrX,IAAIyX,GACrDE,IAEL3C,EAAQlW,WAAakW,EAAQlW,YAAc,CAAE,EAC7CkW,EAAQlW,WAAWnB,IAAQ,CAC1BqM,WAAYzL,EAAQ4M,yBAAyBnL,IAAI2X,EAAYvK,MAC7DtQ,WAAY6a,EAAYlG,cAE1B,CACD,CAGA,IAAKwG,EAAajC,iBAAiB3I,KAAM,CACxC,MAAM5O,EAAOF,EAAQC,QAAQC,KAC7BA,EAAK0Z,gBAAkB1Z,EAAK0Z,gBAAkB,IAAIlX,OAAQmX,GAASA,IAASza,IAC5Ec,EAAK4Z,oBAAsB5Z,EAAK4Z,oBAAsB,IAAIpX,OAAQmX,GAASA,IAASza,GACrF,CAEA,OACDvB,IAAA,EA2GD,SAASwa,GAAcxF,EAAiBkH,GACvC,MAAMC,EAAe,GACflJ,EAAU+B,EAAKmB,aAErBgG,EAAa7N,KAAK4N,EAAStY,IAAIqP,IAC/B,IAAK,MAAM7P,KAAa4R,EAAK9T,iBAC5Bib,EAAa7N,KAAK4N,EAAStY,IAAIR,IAGhC,OAAO+Y,EAAaC,OAAOzO,KAAK,IACjC,CA9VagK,GAWWrW,eAAiBC,GAX5BoW,GAiBW7T,cAAgBA,GC1G3B,MAAAuY,WAAcvc,EAoBhBC,IAAAA,GACTC,KAAKC,cAAgBpB,EACrBmB,KAAKE,aAAe,QACpBF,KAAKG,YAAc,CAACC,EAAaC,KAClC,CAEUC,WAAAA,GACT,OAAOC,OAAOC,OAAOC,MAAMH,cAA4B,CACtDgc,MAAO,CAAC,EAAG,EAAG,GACdC,UAAW,EACXxM,KAAMsM,GAAMG,KAAKC,MACjBzG,MAAO,KACP0G,eAAgB,EAChBC,eAAgB1G,KAAK2G,GAAK,GAE5B,CAOOC,QAAAA,GACN,OAAW7c,KAAC4D,IAAI,QACjB,CAGOkZ,QAAAA,CAASR,GACf,YAAY7P,IAAI,QAAS6P,EAC1B,CAMOS,WAAAA,GACN,OAAOC,EAAWC,YAAYjd,KAAK6c,WACpC,CAMOK,WAAAA,CAAYC,GAClB,MAAMb,EAAQtc,KAAK6c,WAAWtN,QAE9B,OADAyN,EAAWI,YAAYD,EAAKb,GACjBtc,KAAC8c,SAASR,EACtB,CAUOe,YAAAA,GACN,OAAOrd,KAAK4D,IAAI,YACjB,CAMO0Z,YAAAA,CAAaf,GACnB,OAAOvc,KAAKyM,IAAI,YAAa8P,EAC9B,CAOOgB,OAAAA,GACN,OAAOvd,KAAK4D,IAAI,OACjB,CAGO4Z,OAAAA,CAAQzN,GACd,OAAW/P,KAACyM,IAAI,OAAQsD,EACzB,CAWO0N,QAAAA,GACN,OAAWzd,KAAC4D,IAAI,QACjB,CAOO8Z,QAAAA,CAAS1H,GACf,OAAWhW,KAACyM,IAAI,QAASuJ,EAC1B,CAUO2H,iBAAAA,GACN,OAAW3d,KAAC4D,IAAI,iBACjB,CAMOga,iBAAAA,CAAkBC,GACxB,YAAYpR,IAAI,iBAAkBoR,EACnC,CAMOC,iBAAAA,GACN,YAAYla,IAAI,iBACjB,CAMOma,iBAAAA,CAAkBF,GACxB,OAAO7d,KAAKyM,IAAI,iBAAkBoR,EACnC,EA/JYxB,GACE/a,eAAiBzC,EADnBwd,GAUEG,KAA0C,CACvDC,MAAO,QACPuB,KAAM,OACNC,YAAa,eC3Bf,MAAM1c,GAAO1C,EAmDP,MAAOqf,WAA0Bzc,EAASC,WAAAA,IAAAC,GAAAlB,SAAAkB,GAC/B1B,KAAAA,cAAgBsB,EAAI,CAI7B4c,WAAAA,CAAYnC,EAAO,IACzB,OAAW,IAAAK,GAAMrc,KAAKgC,SAASC,WAAY+Z,EAC5C,CAGO9Z,IAAAA,CAAKC,GACX,MAAMC,EAAUD,EAAQC,QAExB,IAAKA,EAAQC,KAAKK,aAAeN,EAAQC,KAAKK,WAAWnB,IAAO,OAAWvB,KAE3E,MAEMoe,GAFUhc,EAAQC,KAAKK,WAAWnB,IACd6c,QAAW,IACZrX,IAAKsX,IAAY,IAAAC,EAAAC,EACzC,MAAMC,EAAQxe,KAAKme,cACjBM,QAAQJ,EAASrC,MAAQ,IACzBwB,QAAQa,EAAStO,MAanB,YAXuB7B,IAAnBmQ,EAAS/B,OAAqBkC,EAAM1B,SAASuB,EAAS/B,YAC/BpO,IAAvBmQ,EAAS9B,WAAyBiC,EAAMlB,aAAae,EAAS9B,gBAC3CrO,IAAnBmQ,EAASrI,OAAqBwI,EAAMd,SAASW,EAASrI,YAEpB9H,KAAlCoQ,OAAAA,EAAAD,EAASK,WAATJ,EAAAA,EAAe5B,iBAClB8B,EAAMZ,kBAAkBS,EAASK,KAAKhC,qBAEDxO,KAAlCqQ,OAAAA,EAAAF,EAASK,WAATH,EAAAA,EAAe5B,iBAClB6B,EAAMT,kBAAkBM,EAASK,KAAK/B,gBAGhC6B,IASR,OANApc,EAAQC,KAAKC,MAAOC,QAAQ,CAACC,EAASC,KAChCD,EAAQE,YAAeF,EAAQE,WAAWnB,KAE/CY,EAAQG,MAAMG,GAAWK,aAAavB,GAAM6c,EADvB5b,EAAQE,WAAWnB,IACwBid,cAIlE,CAGOlb,KAAAA,CAAMnB,GACZ,MAAMC,EAAUD,EAAQC,QAExB,GAA6B,IAAzBpC,KAAKmD,WAAW8N,KAAY,OAAWjR,KAE3C,MAAM2e,EAAY,GACZC,EAAgB,IAAItU,IAE1B,IAAK,MAAMuU,KAAgB7e,KAACmD,WAAY,CACvC,MAAMqb,EAAQK,EACRR,EAAW,CAAEtO,KAAMyO,EAAMjB,WAE1B/Y,EAAUsa,GAAGN,EAAM3B,WAAY,CAAC,EAAG,EAAG,MAAKwB,EAAS/B,MAAQkC,EAAM3B,YAC1C,IAAzB2B,EAAMnB,iBAAsBgB,EAAS9B,UAAYiC,EAAMnB,gBACnC,MAApBmB,EAAMf,aAAoBY,EAASrI,MAAQwI,EAAMf,YAEjDe,EAAM1V,YAAWuV,EAASrC,KAAOwC,EAAM1V,WAEvC0V,EAAMjB,YAAclB,GAAMG,KAAKwB,OAClCK,EAASK,KAAO,CACfhC,eAAgB8B,EAAMb,oBACtBhB,eAAgB6B,EAAMV,sBAIxBa,EAAUrQ,KAAK+P,GACfO,EAAcnS,IAAI+R,EAAOG,EAAU7Y,OAAS,EAC7C,CAkBA,OAhBA9F,KAAKgC,SACHuB,UACAC,YACAjB,QAASkB,IACT,MAAM+a,EAAQ/a,EAAKC,aAAoBnC,IACvC,GAAIid,EAAO,CACV,MAAM/b,EAAYN,EAAQwB,aAAaC,IAAIH,GACrCjB,EAAUJ,EAAQC,KAAKC,MAAOG,GACpCD,EAAQE,WAAaF,EAAQE,YAAc,CAAE,EAC7CF,EAAQE,WAAWnB,IAAQ,CAAEid,MAAOI,EAAchb,IAAI4a,GACvD,IAGFpc,EAAQC,KAAKK,WAAaN,EAAQC,KAAKK,YAAc,CAAE,EACvDN,EAAQC,KAAKK,WAAWnB,IAAQ,CAAE6c,OAAQO,OAG3C,EA5FYT,GAEW5c,eAAiBC,GCvCzC,MAAMwd,EAAEA,GAAGC,EAAAA,KAAGC,IAAMC,EAMP,MAAAC,WAAmBrf,EAMrBC,IAAAA,GACTC,KAAKC,cAAgBnB,EACrBkB,KAAKE,aAAe,aACpBF,KAAKG,YAAc,CAACC,EAAagf,SAClC,CAEU9e,WAAAA,GACT,OAAOC,OAAOC,OAAOC,MAAMH,cAA4B,CACtD+e,mBAAoB,EACpBC,mBAAoB,EACpBC,kBAAmB,KACnBC,sBAAuB,IAAIC,EAAYzf,KAAK0f,MAAO,0BAErD,CAOOC,qBAAAA,GACN,OAAO3f,KAAK4D,IAAI,qBACjB,CAGOgc,qBAAAA,CAAsBC,GAC5B,OAAW7f,KAACyM,IAAI,qBAAsBoT,EACvC,CAOOC,qBAAAA,GACN,OAAW9f,KAAC4D,IAAI,qBACjB,CAGOmc,qBAAAA,CAAsBC,GAC5B,OAAOhgB,KAAKyM,IAAI,qBAAsBuT,EACvC,CAYOC,oBAAAA,GACN,OAAOjgB,KAAKkgB,OAAO,oBACpB,CAMOC,wBAAAA,GACN,OAAOngB,KAAKkgB,OAAO,qBAAuBlgB,KAAKkgB,OAAO,yBAA2B,IAClF,CAGOE,oBAAAA,CAAqBxP,GAC3B,OAAW5Q,KAACqgB,OAAO,oBAAqBzP,EAAS,CAAE0P,SAAUvB,GAAIC,GAAIC,IACtE,EA1EYE,GACE7d,eAAiBxC,ECrBhC,MAAMyC,GAAOzC,EA0CA,MAAAyhB,WAA+B9e,EAASC,WAAAA,IAAAC,YAAAA,GAAA3B,KACpCC,cAAgBsB,EAAI,CAI7Bif,gBAAAA,GACN,OAAW,IAAArB,GAAWnf,KAAKgC,SAASC,WACrC,CAGOC,IAAAA,CAAKC,GACX,MAAMC,EAAUD,EAAQC,QAElBqe,EAAcre,EAAQC,KAAKoO,UAAY,GA4B7C,OA7BqBrO,EAAQC,KAAKqe,WAAa,IAElCne,QAAQ,CAACoe,EAAaC,KAClC,GAAID,EAAYje,YAAcie,EAAYje,WAAWnB,IAAO,CAC3D,MAAMsf,EAAa7gB,KAAKwgB,mBACxBre,EAAQue,UAAUE,GAAe9d,aAAavB,GAAMsf,GAEpD,MAAMC,EAAgBH,EAAYje,WAAWnB,IAa7C,QATyC2M,IAArC4S,EAAczB,oBACjBwB,EAAWjB,sBAAsBkB,EAAczB,yBAEPnR,IAArC4S,EAAcxB,oBACjBuB,EAAWd,sBAAsBe,EAAcxB,yBAKRpR,IAApC4S,EAAcvB,kBAAiC,CAClD,MAAMwB,EAAiBD,EAAcvB,kBAErCsB,EAAWT,qBADKje,EAAQsO,SAASgQ,EAAYM,EAAetV,OAAOS,SAEnE/J,EAAQ6e,eAAeH,EAAWV,2BAA6BY,EAChE,CACD,QAIF,CAGOzd,KAAAA,CAAMnB,GACZ,MAAMC,EAAUD,EAAQC,QAiCxB,OA/BApC,KAAKgC,SACHuB,UACA0d,gBACA1e,QAAS2e,IACT,MAAML,EAAaK,EAASxd,aAAyBnC,IACrD,GAAIsf,EAAY,CACf,MAAMD,EAAgBze,EAAQgf,iBAAiBvd,IAAIsd,GAC7CP,EAAcve,EAAQC,KAAKqe,UAAWE,GAC5CD,EAAYje,WAAaie,EAAYje,YAAc,GAInD,MAAMoe,EAAiBH,EAAYje,WAAWnB,IAAQ,GAWtD,GATIsf,EAAWlB,wBAA0B,IACxCmB,EAAczB,mBAAqBwB,EAAWlB,yBAEJ,IAAvCkB,EAAWf,0BACdgB,EAAcxB,mBAAqBuB,EAAWf,yBAK3Ce,EAAWZ,uBAAwB,CACtC,MAAMrP,EAAUiQ,EAAWZ,uBACrBmB,EAAcP,EAAWV,2BAC/BW,EAAcvB,kBAAoBpd,EAAQkf,qBAAqBzQ,EAASwQ,EACzE,CACD,IAIHphB,IAAA,EAhFYugB,GAEWjf,eAAiBC,GCvBzC,QAAQwd,GAACC,EAAEA,GAAGC,EAAAA,IAAMC,EAKd,MAAOoC,WAAkBxhB,EAMpBC,IAAAA,GACTC,KAAKC,cAAgBlB,EACrBiB,KAAKE,aAAe,YACpBF,KAAKG,YAAc,CAACC,EAAagf,SAClC,CAEU9e,WAAAA,GACT,OAAOC,OAAOC,OAAOC,MAAMH,cAA4B,CACtDihB,gBAAiB,EACjBC,iBAAkB,KAClBC,qBAAsB,IAAIhC,EAAYzf,KAAK0f,MAAO,wBAElDgC,yBAA0B,EAC1BC,0BAA2B,KAC3BC,8BAA+B,IAAInC,EAAYzf,KAAK0f,MAAO,iCAE3DmC,qBAAsB,EACtBC,uBAAwB,KACxBC,2BAA4B,IAAItC,EAAYzf,KAAK0f,MAAO,+BAE1D,CAOOsC,kBAAAA,GACN,YAAYpe,IAAI,kBACjB,CAGOqe,kBAAAA,CAAmBC,GACzB,OAAWliB,KAACyM,IAAI,kBAAmByV,EACpC,CAOOC,mBAAAA,GACN,OAAOniB,KAAKkgB,OAAO,mBACpB,CAMOkC,uBAAAA,GACN,OAAOpiB,KAAKkgB,OAAO,oBAAsBlgB,KAAKkgB,OAAO,wBAA0B,IAChF,CAGOmC,mBAAAA,CAAoBzR,GAC1B,OAAO5Q,KAAKqgB,OAAO,mBAAoBzP,EAAS,CAAE0P,SAAUvB,IAC7D,CAUOuD,2BAAAA,GACN,OAAWtiB,KAAC4D,IAAI,2BACjB,CAMO2e,2BAAAA,CAA4BL,GAClC,OAAOliB,KAAKyM,IAAI,2BAA4ByV,EAC7C,CAMOM,4BAAAA,GACN,YAAYtC,OAAO,4BACpB,CAMOuC,gCAAAA,GACN,OAAWziB,KAACkgB,OAAO,6BAA+BlgB,KAAKkgB,OAAO,iCAAmC,IAClG,CAMOwC,4BAAAA,CAA6B9R,GACnC,YAAYyP,OAAO,4BAA6BzP,EAAS,CAAE0P,SAAUtB,IACtE,CAOO2D,uBAAAA,GACN,OAAW3iB,KAAC4D,IAAI,uBACjB,CAGOgf,uBAAAA,CAAwBC,GAC9B,OAAW7iB,KAACyM,IAAI,uBAAwBoW,EACzC,CAKOC,yBAAAA,GACN,YAAY5C,OAAO,yBACpB,CAMO6C,6BAAAA,GACN,OAAO/iB,KAAKkgB,OAAO,0BAA4BlgB,KAAKkgB,OAAO,8BAAgC,IAC5F,CAGO8C,yBAAAA,CAA0BpS,GAChC,OAAO5Q,KAAKqgB,OAAO,yBAA0BzP,EAAS,CAAE0P,SAAUvB,GAAIC,GAAIC,IAC3E,EA5IYqC,GACEhgB,eAAiBvC,EC3BhC,MAAMwC,GAAOxC,EA0CA,MAAAkkB,WAA8BxhB,EAASC,WAAAA,IAAAC,GAAAA,SAAAA,GACnC1B,KAAAA,cAAgBsB,EAAI,CAI7B2hB,eAAAA,GACN,OAAW,IAAA5B,GAAUthB,KAAKgC,SAASC,WACpC,CAGOC,IAAAA,CAAKC,GACX,MAAMC,EAAUD,EAAQC,QAElBqe,EAAcre,EAAQC,KAAKoO,UAAY,GA2C7C,OA5CqBrO,EAAQC,KAAKqe,WAAa,IAElCne,QAAQ,CAACoe,EAAaC,KAClC,GAAID,EAAYje,YAAcie,EAAYje,WAAWnB,IAAO,CAC3D,MAAM4hB,EAAYnjB,KAAKkjB,kBACvB/gB,EAAQue,UAAUE,GAAe9d,aAAavB,GAAM4hB,GAEpD,MAAMC,EAAezC,EAAYje,WAAWnB,IAa5C,QATqC2M,IAAjCkV,EAAa7B,iBAChB4B,EAAUlB,mBAAmBmB,EAAa7B,sBAEGrT,IAA1CkV,EAAa1B,0BAChByB,EAAUZ,4BAA4Ba,EAAa1B,+BAKdxT,IAAlCkV,EAAa5B,iBAAgC,CAChD,MAAMT,EAAiBqC,EAAa5B,iBAEpC2B,EAAUd,oBADMlgB,EAAQsO,SAASgQ,EAAYM,EAAetV,OAAOS,SAEnE/J,EAAQ6e,eAAemC,EAAUf,0BAA4BrB,EAC9D,CACA,QAA+C7S,IAA3CkV,EAAazB,0BAAyC,CACzD,MAAMZ,EAAiBqC,EAAazB,0BAEpCwB,EAAUT,6BADMvgB,EAAQsO,SAASgQ,EAAYM,EAAetV,OAAOS,SAEnE/J,EAAQ6e,eAAemC,EAAUV,mCAAqC1B,EACvE,CACA,QAA4C7S,IAAxCkV,EAAatB,uBAAsC,CACtD,MAAMf,EAAiBqC,EAAatB,uBAEpCqB,EAAUH,0BADM7gB,EAAQsO,SAASgQ,EAAYM,EAAetV,OAAOS,SAEnE/J,EAAQ6e,eAAemC,EAAUJ,gCAAkChC,QACtC7S,IAAzB6S,EAAe8B,OAClBM,EAAUP,wBAAwB7B,EAAe8B,MAEnD,CACD,IAIF7iB,IAAA,CAGOsD,KAAAA,CAAMnB,GACZ,MAAMC,EAAUD,EAAQC,QA0CxB,OAxCApC,KAAKgC,SACHuB,UACA0d,gBACA1e,QAAS2e,IACT,MAAMiC,EAAYjC,EAASxd,aAAwBnC,IACnD,GAAI4hB,EAAW,CACd,MAAMvC,EAAgBze,EAAQgf,iBAAiBvd,IAAIsd,GAC7CP,EAAcve,EAAQC,KAAKqe,UAAWE,GAC5CD,EAAYje,WAAaie,EAAYje,YAAc,CAAA,EAInD,MAAM0gB,EAAgBzC,EAAYje,WAAWnB,IAAQ,CACpDggB,gBAAiB4B,EAAUnB,qBAC3BN,yBAA0ByB,EAAUb,+BAKrC,GAAIa,EAAUhB,sBAAuB,CACpC,MAAMvR,EAAUuS,EAAUhB,sBACpBf,EAAc+B,EAAUf,0BAC9BgB,EAAa5B,iBAAmBrf,EAAQkf,qBAAqBzQ,EAASwQ,EACvE,CACA,GAAI+B,EAAUX,+BAAgC,CAC7C,MAAM5R,EAAUuS,EAAUX,+BACpBpB,EAAc+B,EAAUV,mCAC9BW,EAAazB,0BAA4Bxf,EAAQkf,qBAAqBzQ,EAASwQ,EAChF,CACA,GAAI+B,EAAUL,4BAA6B,CAC1C,MAAMlS,EAAUuS,EAAUL,4BACpB1B,EAAc+B,EAAUJ,gCAC9BK,EAAatB,uBAAyB3f,EAAQkf,qBAAqBzQ,EAASwQ,GAChC,IAAxC+B,EAAUR,4BACbS,EAAatB,uBAAuBe,MAAQM,EAAUR,0BAExD,CACD,QAIH,EAxGYM,GAEW3hB,eAAiBC,GCrC5B,MAAA8hB,WAAyBvjB,EAM3BC,IAAAA,GACTC,KAAKC,cAAgBjB,EACrBgB,KAAKE,aAAe,mBACpBF,KAAKG,YAAc,CAACC,EAAagf,SAClC,CAEU9e,WAAAA,GACT,OAAOC,OAAOC,OAAOC,MAAMH,cAA4B,CAAEgjB,iBAAkB,GAC5E,CAOOC,mBAAAA,GACN,OAAOvjB,KAAK4D,IAAI,mBACjB,CAGO4f,mBAAAA,CAAoB3D,GAC1B,OAAO7f,KAAKyM,IAAI,mBAAoBoT,EACrC,EA5BYwD,GACE/hB,eAAiBtC,ECRhC,MAAMuC,GAAOvC,EA2CA,MAAAykB,WAAqChiB,EAASC,WAAAA,IAAAC,GAAAlB,SAAAkB,GAAA3B,KAC1CC,cAAgBsB,EAAI,CAI7BmiB,sBAAAA,GACN,OAAO,IAAIL,GAAiBrjB,KAAKgC,SAASC,WAC3C,CAGOC,IAAAA,CAAKC,GAkBX,OAjBgBA,EAAQC,QACKC,KAAKqe,WAAa,IAClCne,QAAQ,CAACoe,EAAaC,KAClC,GAAID,EAAYje,YAAcie,EAAYje,WAAWnB,IAAO,CAC3D,MAAM+hB,EAAmBtjB,KAAK0jB,yBAC9BvhB,EAAQue,UAAUE,GAAe9d,aAAavB,GAAM+hB,GAEpD,MAAMK,EAAsBhD,EAAYje,WAAWnB,SAIN2M,IAAzCyV,EAAoBL,kBACvBA,EAAiBE,oBAAoBG,EAAoBL,iBAE3D,IAIFtjB,IAAA,CAGOsD,KAAAA,CAAMnB,GACZ,MAAMC,EAAUD,EAAQC,QAoBxB,OAlBApC,KAAKgC,SACHuB,UACA0d,gBACA1e,QAAS2e,IACT,MAAMoC,EAAmBpC,EAASxd,aAA+BnC,IACjE,GAAI+hB,EAAkB,CACrB,MAAM1C,EAAgBze,EAAQgf,iBAAiBvd,IAAIsd,GAC7CP,EAAcve,EAAQC,KAAKqe,UAAWE,GAC5CD,EAAYje,WAAaie,EAAYje,YAAc,CAAA,EAInDie,EAAYje,WAAWnB,IAAQ,CAC9B+hB,iBAAkBA,EAAiBC,sBAErC,IAIHvjB,IAAA,EAtDYyjB,GAEWniB,eAAiBC,GCvC5B,MAAAqiB,WAAY9jB,EAMdC,IAAAA,GACTC,KAAKC,cAAgBhB,EACrBe,KAAKE,aAAe,MACpBF,KAAKG,YAAc,CAACC,EAAagf,SAClC,CAEU9e,WAAAA,GACT,OAAOC,OAAOC,OAAOC,MAAMH,cAA4B,CAAEujB,IAAK,KAC/D,CAOOC,MAAAA,GACN,OAAO9jB,KAAK4D,IAAI,MACjB,CAGOmgB,MAAAA,CAAOF,GACb,OAAO7jB,KAAKyM,IAAI,MAAOoX,EACxB,EA5BYD,GACEtiB,eAAiBrC,ECPhC,MAAMsC,GAAOtC,EAiCA,MAAA+kB,WAAwBviB,EAASC,WAAAA,IAAAC,GAAAlB,SAAAkB,GAAA3B,KAC7BC,cAAgBsB,EAAI,CAI7B0iB,SAAAA,GACN,OAAO,IAAIL,GAAI5jB,KAAKgC,SAASC,WAC9B,CAGOC,IAAAA,CAAKC,GAkBX,OAjBgBA,EAAQC,QACKC,KAAKqe,WAAa,IAClCne,QAAQ,CAACoe,EAAaC,KAClC,GAAID,EAAYje,YAAcie,EAAYje,WAAWnB,IAAO,CAC3D,MAAMsiB,EAAM7jB,KAAKikB,YACjB9hB,EAAQue,UAAUE,GAAe9d,aAAavB,GAAMsiB,GAEpD,MAAMK,EAASvD,EAAYje,WAAWnB,SAInB2M,IAAfgW,EAAOL,KACVA,EAAIE,OAAOG,EAAOL,IAEpB,IAIF7jB,IAAA,CAGOsD,KAAAA,CAAMnB,GACZ,MAAMC,EAAUD,EAAQC,QAoBxB,OAlBApC,KAAKgC,SACHuB,UACA0d,gBACA1e,QAAS2e,IACT,MAAM2C,EAAM3C,EAASxd,aAAkBnC,IACvC,GAAIsiB,EAAK,CACR,MAAMjD,EAAgBze,EAAQgf,iBAAiBvd,IAAIsd,GAC7CP,EAAcve,EAAQC,KAAKqe,UAAWE,GAC5CD,EAAYje,WAAaie,EAAYje,YAAc,CAAA,EAInDie,EAAYje,WAAWnB,IAAQ,CAC9BsiB,IAAKA,EAAIC,SAEX,IAIH9jB,IAAA,EAtDYgkB,GAEW1iB,eAAiBC,GCjBzC,MAAQwd,EAAAA,GAAGC,EAAAA,IAAME,QAKJiF,WAAoBrkB,EAMtBC,IAAAA,GACTC,KAAKC,cAAgBf,EACrBc,KAAKE,aAAe,cACpBF,KAAKG,YAAc,CAACC,EAAagf,SAClC,CAEU9e,WAAAA,GACT,OAAOC,OAAOC,OAAOC,MAAMH,cAA4B,CACtD8jB,kBAAmB,EACnBC,mBAAoB,KACpBC,uBAAwB,IAAI7E,EAAYzf,KAAK0f,MAAO,0BACpD6E,eAAgB,IAChBC,4BAA6B,IAC7BC,4BAA6B,IAC7BC,4BAA6B,KAC7BC,gCAAiC,IAAIlF,EAAYzf,KAAK0f,MAAO,oCAE/D,CAOOkF,oBAAAA,GACN,YAAYhhB,IAAI,oBACjB,CAGOihB,oBAAAA,CAAqB3C,GAC3B,OAAOliB,KAAKyM,IAAI,oBAAqByV,EACtC,CAQO4C,qBAAAA,GACN,OAAO9kB,KAAKkgB,OAAO,qBACpB,CAMO6E,yBAAAA,GACN,YAAY7E,OAAO,sBAAwBlgB,KAAKkgB,OAAO,0BAA4B,IACpF,CAGO8E,qBAAAA,CAAsBpU,GAC5B,YAAYyP,OAAO,qBAAsBzP,EAAS,CAAE0P,SAAUvB,IAC/D,CAOOkG,iBAAAA,GACN,OAAWjlB,KAAC4D,IAAI,iBACjB,CAGOshB,iBAAAA,CAAkBrB,GACxB,YAAYpX,IAAI,iBAAkBoX,EACnC,CAOOsB,8BAAAA,GACN,OAAWnlB,KAAC4D,IAAI,8BACjB,CAGOwhB,8BAAAA,CAA+BC,GACrC,YAAY5Y,IAAI,8BAA+B4Y,EAChD,CAGOC,8BAAAA,GACN,YAAY1hB,IAAI,8BACjB,CAGO2hB,8BAAAA,CAA+BF,GACrC,OAAOrlB,KAAKyM,IAAI,8BAA+B4Y,EAChD,CAMOG,8BAAAA,GACN,OAAOxlB,KAAKkgB,OAAO,8BACpB,CAMOuF,kCAAAA,GACN,OAAWzlB,KAACkgB,OAAO,+BAAiClgB,KAAKkgB,OAAO,mCAAqC,IACtG,CAMOwF,8BAAAA,CAA+B9U,GACrC,OAAW5Q,KAACqgB,OAAO,8BAA+BzP,EAAS,CAAE0P,SAAUtB,IACxE,EA1HYmF,GACE7iB,eAAiBpC,ECxBhC,MAAMqC,GAAOrC,EA8CA,MAAAymB,WAAgClkB,EAASC,WAAAA,IAAAC,GAAAA,SAAAA,QACrC1B,cAAgBsB,EAAI,CAI7BqkB,iBAAAA,GACN,OAAW,IAAAzB,GAAYnkB,KAAKgC,SAASC,WACtC,CAGOC,IAAAA,CAAKC,GACX,MAAMC,EAAUD,EAAQC,QAElBqe,EAAcre,EAAQC,KAAKoO,UAAY,GAwC7C,OAzCqBrO,EAAQC,KAAKqe,WAAa,IAElCne,QAAQ,CAACoe,EAAaC,KAClC,GAAID,EAAYje,YAAcie,EAAYje,WAAWnB,IAAO,CAC3D,MAAMskB,EAAc7lB,KAAK4lB,oBACzBzjB,EAAQue,UAAUE,GAAe9d,aAAavB,GAAMskB,GAEpD,MAAMC,EAAiBnF,EAAYje,WAAWnB,IAmB9C,QAfyC2M,IAArC4X,EAAe1B,mBAClByB,EAAYhB,qBAAqBiB,EAAe1B,wBAEXlW,IAAlC4X,EAAeC,gBAClBF,EAAYX,kBAAkBY,EAAeC,qBAEK7X,IAA/C4X,EAAetB,6BAClBqB,EAAYT,+BAA+BU,EAAetB,kCAERtW,IAA/C4X,EAAerB,6BAClBoB,EAAYN,+BAA+BO,EAAerB,kCAKjBvW,IAAtC4X,EAAezB,mBAAkC,CACpD,MAAMtD,EAAiB+E,EAAezB,mBAEtCwB,EAAYb,sBADI7iB,EAAQsO,SAASgQ,EAAYM,EAAetV,OAAOS,SAEnE/J,EAAQ6e,eAAe6E,EAAYd,4BAA8BhE,EAClE,CACA,QAAmD7S,IAA/C4X,EAAepB,4BAA2C,CAC7D,MAAM3D,EAAiB+E,EAAepB,4BAEtCmB,EAAYH,+BADIvjB,EAAQsO,SAASgQ,EAAYM,EAAetV,OAAOS,SAEnE/J,EAAQ6e,eAAe6E,EAAYJ,qCAAuC1E,EAC3E,CACD,QAIF,CAGOzd,KAAAA,CAAMnB,GACZ,MAAMC,EAAUD,EAAQC,QA4CxB,OA1CApC,KAAKgC,SACHuB,UACA0d,gBACA1e,QAAS2e,IACT,MAAM2E,EAAc3E,EAASxd,aAA0BnC,IACvD,GAAIskB,EAAa,CAChB,MAAMjF,EAAgBze,EAAQgf,iBAAiBvd,IAAIsd,GAC7CP,EAAcve,EAAQC,KAAKqe,UAAWE,GAC5CD,EAAYje,WAAaie,EAAYje,YAAc,CAAE,EAIrD,MAAMojB,EAAkBnF,EAAYje,WAAWnB,IAAQ,GAiBvD,GAfIskB,EAAYjB,uBAAyB,IACxCkB,EAAe1B,kBAAoByB,EAAYjB,wBAER,MAApCiB,EAAYZ,sBACfa,EAAeC,eAAiBF,EAAYZ,qBAEQ,MAAjDY,EAAYV,mCACfW,EAAetB,4BAA8BqB,EAAYV,kCAEL,MAAjDU,EAAYP,mCACfQ,EAAerB,4BAA8BoB,EAAYP,kCAKtDO,EAAYf,wBAAyB,CACxC,MAAMlU,EAAUiV,EAAYf,wBACtB1D,EAAcyE,EAAYd,4BAChCe,EAAezB,mBAAqBliB,EAAQkf,qBAAqBzQ,EAASwQ,EAC3E,CACA,GAAIyE,EAAYL,iCAAkC,CACjD,MAAM5U,EAAUiV,EAAYL,iCACtBpE,EAAcyE,EAAYJ,qCAChCK,EAAepB,4BAA8BviB,EAAQkf,qBAAqBzQ,EAASwQ,EACpF,CACD,IAGKphB,IACR,EAvGY2lB,GAEWrkB,eAAiBC,GC5BzC,QAAQwd,GAACC,EAAEA,GAAGC,EAAAA,KAAG+G,IAAM9G,EAKjB,MAAO+G,WAA8BnmB,EAMhCC,IAAAA,GACTC,KAAKC,cAAgBd,EACrBa,KAAKE,aAAe,wBACpBF,KAAKG,YAAc,CAACC,EAAagf,SAClC,CAEU9e,WAAAA,GACT,OAAOC,OAAOC,OAAOC,MAAMH,cAA4B,CACtD4lB,cAAe,CAAC,EAAK,EAAK,EAAK,GAC/BC,eAAgB,KAChBC,mBAAoB,IAAI3G,EAAYzf,KAAK0f,MAAO,sBAChD2G,eAAgB,CAAC,EAAK,EAAK,GAC3BC,iBAAkB,EAClBC,0BAA2B,KAC3BC,8BAA+B,IAAI/G,EAAYzf,KAAK0f,MAAO,kCAE7D,CAOO+G,gBAAAA,GACN,OAAOzmB,KAAK4D,IAAI,gBACjB,CAGO8iB,gBAAAA,CAAiBxE,GACvB,OAAWliB,KAACyM,IAAI,gBAAiByV,EAClC,CAMOyE,aAAAA,GACN,OAAO3J,EAAWC,YAAYjd,KAAKymB,mBACpC,CAMOG,aAAAA,CAAczJ,GACpB,MAAM+E,EAASliB,KAAKymB,mBAAmBlX,QACvC,OAAOvP,KAAK0mB,iBAAiB1J,EAAWI,YAAYD,EAAK+E,GAC1D,CAMO2E,iBAAAA,GACN,OAAO7mB,KAAKkgB,OAAO,iBACpB,CAMO4G,qBAAAA,GACN,OAAW9mB,KAACkgB,OAAO,kBAAoBlgB,KAAKkgB,OAAO,sBAAwB,IAC5E,CAGO6G,iBAAAA,CAAkBnW,GACxB,OAAW5Q,KAACqgB,OAAO,iBAAkBzP,EAAS,CAAE0P,SAAUvB,GAAIC,GAAIC,GAAI+G,GAAGgB,SAAS,GACnF,CAOOC,iBAAAA,GACN,OAAOjnB,KAAK4D,IAAI,iBACjB,CAGOsjB,iBAAAA,CAAkBhF,GACxB,OAAOliB,KAAKyM,IAAI,iBAAkByV,EACnC,CAOOiF,mBAAAA,GACN,OAAWnnB,KAAC4D,IAAI,mBACjB,CAGOwjB,mBAAAA,CAAoBlF,GAC1B,OAAWliB,KAACyM,IAAI,mBAAoByV,EACrC,CAOOmF,4BAAAA,GACN,OAAOrnB,KAAKkgB,OAAO,4BACpB,CAMOoH,gCAAAA,GACN,OAAWtnB,KAACkgB,OAAO,6BAA+BlgB,KAAKkgB,OAAO,iCAAmC,IAClG,CAGOqH,4BAAAA,CAA6B3W,GACnC,OAAW5Q,KAACqgB,OAAO,4BAA6BzP,EAAS,CAAE0P,SAAUvB,GAAIC,GAAIC,GAAI+G,IAClF,EA5HYC,GACE3kB,eAAiBnC,EC1BhC,MAAMoC,GAAOpC,EA0CP,MAAOqoB,WAA0C/lB,EAASC,WAAAA,IAAAC,GAAAA,SAAAA,GAC/C1B,KAAAA,cAAgBsB,EAAI,CAI7BkmB,2BAAAA,GACN,OAAW,IAAAxB,GAAsBjmB,KAAKgC,SAASC,WAChD,CAGOC,IAAAA,CAAKC,GACX,MAAMC,EAAUD,EAAQC,QAElBqe,EAAcre,EAAQC,KAAKoO,UAAY,GAqC7C,OAtCqBrO,EAAQC,KAAKqe,WAAa,IAElCne,QAAQ,CAACoe,EAAaC,KAClC,GAAID,EAAYje,YAAcie,EAAYje,WAAWnB,IAAO,CAC3D,MAAMmmB,EAAY1nB,KAAKynB,8BACvBtlB,EAAQue,UAAUE,GAAe9d,aAAavB,GAAMmmB,GAEpD,MAAMC,EAAehH,EAAYje,WAAWnB,IAgB5C,QAZmC2M,IAA/ByZ,EAAazB,eAChBwB,EAAUhB,iBAAiBiB,EAAazB,oBAELhY,IAAhCyZ,EAAatB,gBAChBqB,EAAUR,kBAAkBS,EAAatB,qBAEJnY,IAAlCyZ,EAAarB,kBAChBoB,EAAUN,oBAAoBO,EAAarB,uBAKRpY,IAAhCyZ,EAAaxB,eAA8B,CAC9C,MAAMpF,EAAiB4G,EAAaxB,eAEpCuB,EAAUX,kBADM5kB,EAAQsO,SAASgQ,EAAYM,EAAetV,OAAOS,SAEnE/J,EAAQ6e,eAAe0G,EAAUZ,wBAA0B/F,EAC5D,CACA,QAA+C7S,IAA3CyZ,EAAapB,0BAAyC,CACzD,MAAMxF,EAAiB4G,EAAapB,0BAEpCmB,EAAUH,6BADMplB,EAAQsO,SAASgQ,EAAYM,EAAetV,OAAOS,SAEnE/J,EAAQ6e,eAAe0G,EAAUJ,mCAAqCvG,EACvE,CACD,IAGM/gB,IACR,CAGOsD,KAAAA,CAAMnB,GACZ,MAAMC,EAAUD,EAAQC,QAmCxB,OAjCApC,KAAKgC,SACHuB,UACA0d,gBACA1e,QAAS2e,IACT,MAAMwG,EAAYxG,EAASxd,aAAoCnC,IAC/D,GAAImmB,EAAW,CACd,MAAM9G,EAAgBze,EAAQgf,iBAAiBvd,IAAIsd,GAC7CP,EAAcve,EAAQC,KAAKqe,UAAWE,GAC5CD,EAAYje,WAAaie,EAAYje,YAAc,CAAE,EAIrD,MAAMilB,EAAgBhH,EAAYje,WAAWnB,IAAQ,CACpD2kB,cAAewB,EAAUjB,mBACzBJ,eAAgBqB,EAAUT,oBAC1BX,iBAAkBoB,EAAUP,uBAK7B,GAAIO,EAAUb,oBAAqB,CAClC,MAAMjW,EAAU8W,EAAUb,oBACpBzF,EAAcsG,EAAUZ,wBAC9Ba,EAAaxB,eAAiBhkB,EAAQkf,qBAAqBzQ,EAASwQ,EACrE,CACA,GAAIsG,EAAUL,+BAAgC,CAC7C,MAAMzW,EAAU8W,EAAUL,+BACpBjG,EAAcsG,EAAUJ,mCAC9BK,EAAapB,0BAA4BpkB,EAAQkf,qBAAqBzQ,EAASwQ,EAChF,CACD,IAIHphB,IAAA,EA3FYwnB,GAEWlmB,eAAiBC,GC1BzC,QAAQwd,GAACC,EAAEA,GAACC,EAAEA,GAAG+G,EAAAA,IAAM9G,QAKV0I,WAAc9nB,EAMhBC,IAAAA,GACTC,KAAKC,cAAgBb,EACrBY,KAAKE,aAAe,QACpBF,KAAKG,YAAc,CAACC,EAAagf,SAClC,CAEU9e,WAAAA,GACT,OAAOC,OAAOC,OAAOC,MAAMH,cAA4B,CACtDunB,iBAAkB,CAAC,EAAK,EAAK,GAC7BC,kBAAmB,KACnBC,sBAAuB,IAAItI,EAAYzf,KAAK0f,MAAO,yBACnDsI,qBAAsB,EACtBC,sBAAuB,KACvBC,0BAA2B,IAAIzI,EAAYzf,KAAK0f,MAAO,8BAEzD,CAOOyI,mBAAAA,GACN,OAAWnoB,KAAC4D,IAAI,mBACjB,CAMOwkB,gBAAAA,GACN,OAAOpL,EAAWC,YAAYjd,KAAKmoB,sBACpC,CAGOE,mBAAAA,CAAoBnG,GAC1B,OAAOliB,KAAKyM,IAAI,mBAAoByV,EACrC,CAMOoG,gBAAAA,CAAiBnL,GACvB,MAAM+E,EAASliB,KAAKmoB,sBAAsB5Y,QAC1C,YAAY9C,IAAI,mBAAoBuQ,EAAWI,YAAYD,EAAK+E,GACjE,CAKOqG,oBAAAA,GACN,OAAWvoB,KAACkgB,OAAO,oBACpB,CAMOsI,wBAAAA,GACN,OAAOxoB,KAAKkgB,OAAO,qBAAuBlgB,KAAKkgB,OAAO,yBAA2B,IAClF,CAGOuI,oBAAAA,CAAqB7X,GAC3B,OAAW5Q,KAACqgB,OAAO,oBAAqBzP,EAAS,CAAE0P,SAAUvB,GAAIC,GAAIC,GAAG+H,SAAS,GAClF,CAOO0B,uBAAAA,GACN,YAAY9kB,IAAI,uBACjB,CAGO+kB,uBAAAA,CAAwBzG,GAC9B,OAAOliB,KAAKyM,IAAI,uBAAwByV,EACzC,CAMO0G,wBAAAA,GACN,OAAO5oB,KAAKkgB,OAAO,wBACpB,CAMO2I,4BAAAA,GACN,YAAY3I,OAAO,yBAA2BlgB,KAAKkgB,OAAO,6BAA+B,IAC1F,CAMO4I,wBAAAA,CAAyBlY,GAC/B,OAAO5Q,KAAKqgB,OAAO,wBAAyBzP,EAAS,CAAE0P,SAAU0F,IAClE,EA9GY4B,GACEtmB,eAAiBlC,ECxBhC,MAAMmC,GAAOnC,EA4CA,MAAA2pB,WAA0BtnB,EAASC,WAAAA,IAAAC,GAAAA,SAAAA,GAC/B1B,KAAAA,cAAgBsB,EAAI,CAI7BynB,WAAAA,GACN,OAAW,IAAApB,GAAM5nB,KAAKgC,SAASC,WAChC,CAGOC,IAAAA,CAAKC,GACX,MAAMC,EAAUD,EAAQC,QAElBqe,EAAcre,EAAQC,KAAKoO,UAAY,GAkC7C,OAnCqBrO,EAAQC,KAAKqe,WAAa,IAElCne,QAAQ,CAACoe,EAAaC,KAClC,GAAID,EAAYje,YAAcie,EAAYje,WAAWnB,IAAO,CAC3D,MAAM0nB,EAAQjpB,KAAKgpB,cACnB7mB,EAAQue,UAAUE,GAAe9d,aAAavB,GAAM0nB,GAEpD,MAAMC,EAAWvI,EAAYje,WAAWnB,IAaxC,QATkC2M,IAA9Bgb,EAASrB,kBACZoB,EAAMZ,oBAAoBa,EAASrB,uBAEE3Z,IAAlCgb,EAASlB,sBACZiB,EAAMN,wBAAwBO,EAASlB,2BAKL9Z,IAA/Bgb,EAASpB,kBAAiC,CAC7C,MAAM/G,EAAiBmI,EAASpB,kBAEhCmB,EAAMR,qBADUtmB,EAAQsO,SAASgQ,EAAYM,EAAetV,OAAOS,SAEnE/J,EAAQ6e,eAAeiI,EAAMT,2BAA6BzH,EAC3D,CACA,QAAuC7S,IAAnCgb,EAASjB,sBAAqC,CACjD,MAAMlH,EAAiBmI,EAASjB,sBAEhCgB,EAAMH,yBADU3mB,EAAQsO,SAASgQ,EAAYM,EAAetV,OAAOS,SAEnE/J,EAAQ6e,eAAeiI,EAAMJ,+BAAiC9H,EAC/D,CACD,IAGM/gB,IACR,CAGOsD,KAAAA,CAAMnB,GACZ,MAAMC,EAAUD,EAAQC,QAkCxB,OAhCApC,KAAKgC,SACHuB,UACA0d,gBACA1e,QAAS2e,IACT,MAAM+H,EAAQ/H,EAASxd,aAAoBnC,IAC3C,GAAI0nB,EAAO,CACV,MAAMrI,EAAgBze,EAAQgf,iBAAiBvd,IAAIsd,GAC7CP,EAAcve,EAAQC,KAAKqe,UAAWE,GAC5CD,EAAYje,WAAaie,EAAYje,YAAc,CAAA,EAInD,MAAMwmB,EAAYvI,EAAYje,WAAWnB,IAAQ,CAChDsmB,iBAAkBoB,EAAMd,sBACxBH,qBAAsBiB,EAAMP,2BAK7B,GAAIO,EAAMV,uBAAwB,CACjC,MAAM3X,EAAUqY,EAAMV,uBAChBnH,EAAc6H,EAAMT,2BAC1BU,EAASpB,kBAAoB3lB,EAAQkf,qBAAqBzQ,EAASwQ,EACpE,CACA,GAAI6H,EAAML,2BAA4B,CACrC,MAAMhY,EAAUqY,EAAML,2BAChBxH,EAAc6H,EAAMJ,+BAC1BK,EAASjB,sBAAwB9lB,EAAQkf,qBAAqBzQ,EAASwQ,EACxE,CACD,IAGKphB,IACR,EAvFY+oB,GAEWznB,eAAiBC,GC5BzC,QAAQwd,GAACC,EAAEA,GAACC,EAAEA,GAAC+G,EAAEA,IAAM9G,QAKViK,WAAiBrpB,EAMnBC,IAAAA,GACTC,KAAKC,cAAgBZ,EACrBW,KAAKE,aAAe,WACpBF,KAAKG,YAAc,CAACC,EAAagf,SAClC,CAEU9e,WAAAA,GACT,OAAOC,OAAOC,OAAOC,MAAMH,cAA4B,CACtD+lB,eAAgB,EAChB+C,gBAAiB,KACjBC,oBAAqB,IAAI5J,EAAYzf,KAAK0f,MAAO,uBACjD4J,oBAAqB,CAAC,EAAK,EAAK,GAChCC,qBAAsB,KACtBC,yBAA0B,IAAI/J,EAAYzf,KAAK0f,MAAO,6BAExD,CAOOuH,iBAAAA,GACN,OAAWjnB,KAAC4D,IAAI,iBACjB,CAGOsjB,iBAAAA,CAAkBhF,GACxB,OAAOliB,KAAKyM,IAAI,iBAAkByV,EACnC,CAGOuH,sBAAAA,GACN,OAAOzpB,KAAK4D,IAAI,sBACjB,CAGO8lB,sBAAAA,CAAuBxH,GAC7B,YAAYzV,IAAI,sBAAuByV,EACxC,CAMOyH,mBAAAA,GACN,OAAO3M,EAAWC,YAAYjd,KAAKypB,yBACpC,CAMOG,mBAAAA,CAAoBzM,GAC1B,MAAM+E,EAASliB,KAAKypB,yBAAyBla,QAC7C,OAAWvP,KAACyM,IAAI,sBAAuBuQ,EAAWI,YAAYD,EAAK+E,GACpE,CAUO2H,kBAAAA,GACN,OAAO7pB,KAAKkgB,OAAO,kBACpB,CAMO4J,sBAAAA,GACN,YAAY5J,OAAO,mBAAqBlgB,KAAKkgB,OAAO,uBAAyB,IAC9E,CAGO6J,kBAAAA,CAAmBnZ,GACzB,OAAO5Q,KAAKqgB,OAAO,kBAAmBzP,EAAS,CAAE0P,SAAU0F,IAC5D,CASOgE,uBAAAA,GACN,YAAY9J,OAAO,uBACpB,CAMO+J,2BAAAA,GACN,YAAY/J,OAAO,wBAA0BlgB,KAAKkgB,OAAO,4BAA8B,IACxF,CAGOgK,uBAAAA,CAAwBtZ,GAC9B,OAAO5Q,KAAKqgB,OAAO,uBAAwBzP,EAAS,CAAE0P,SAAUvB,GAAIC,GAAIC,GAAG+H,SAAS,GACrF,EA/GYmC,GACE7nB,eAAiBjC,ECxBhC,MAAMkC,GAAOlC,EAwCA,MAAA8qB,WAA6B1oB,EAASC,WAAAA,IAAAC,GAAAlB,SAAAkB,GAAA3B,KAClCC,cAAgBsB,EAAI,CAI7B6oB,cAAAA,GACN,OAAO,IAAIjB,GAASnpB,KAAKgC,SAASC,WACnC,CAGOC,IAAAA,CAAKC,GACX,MAAMC,EAAUD,EAAQC,QAElBqe,EAAcre,EAAQC,KAAKoO,UAAY,GAkC7C,OAnCqBrO,EAAQC,KAAKqe,WAAa,IAElCne,QAAQ,CAACoe,EAAaC,KAClC,GAAID,EAAYje,YAAcie,EAAYje,WAAWnB,IAAO,CAC3D,MAAM8oB,EAAWrqB,KAAKoqB,iBACtBjoB,EAAQue,UAAUE,GAAe9d,aAAavB,GAAM8oB,GAEpD,MAAMC,EAAc3J,EAAYje,WAAWnB,IAa3C,QATmC2M,IAA/Boc,EAAYjE,gBACfgE,EAASnD,kBAAkBoD,EAAYjE,qBAEAnY,IAApCoc,EAAYhB,qBACfe,EAASX,uBAAuBY,EAAYhB,0BAKTpb,IAAhCoc,EAAYlB,gBAA+B,CAC9C,MAAMrI,EAAiBuJ,EAAYlB,gBAEnCiB,EAASN,mBADO5nB,EAAQsO,SAASgQ,EAAYM,EAAetV,OAAOS,SAEnE/J,EAAQ6e,eAAeqJ,EAASP,yBAA2B/I,EAC5D,CACA,QAAyC7S,IAArCoc,EAAYf,qBAAoC,CACnD,MAAMxI,EAAiBuJ,EAAYf,qBAEnCc,EAASH,wBADO/nB,EAAQsO,SAASgQ,EAAYM,EAAetV,OAAOS,SAEnE/J,EAAQ6e,eAAeqJ,EAASJ,8BAAgClJ,EACjE,CACD,IAGM/gB,IACR,CAGOsD,KAAAA,CAAMnB,GACZ,MAAMC,EAAUD,EAAQC,QAsCxB,OApCApC,KAAKgC,SACHuB,UACA0d,gBACA1e,QAAS2e,IACT,MAAMmJ,EAAWnJ,EAASxd,aAAuBnC,IACjD,GAAI8oB,EAAU,CACb,MAAMzJ,EAAgBze,EAAQgf,iBAAiBvd,IAAIsd,GAC7CP,EAAcve,EAAQC,KAAKqe,UAAWE,GAC5CD,EAAYje,WAAaie,EAAYje,YAAc,CAAA,EAInD,MAAM4nB,EAAe3J,EAAYje,WAAWnB,IAAQ,CAAA,EAWpD,GATqC,IAAjC8oB,EAASpD,sBACZqD,EAAYjE,eAAiBgE,EAASpD,qBAElCziB,EAAUsa,GAAGuL,EAASZ,yBAA0B,CAAC,EAAG,EAAG,MAC3Da,EAAYhB,oBAAsBe,EAASZ,0BAKxCY,EAASR,qBAAsB,CAClC,MAAMjZ,EAAUyZ,EAASR,qBACnBzI,EAAciJ,EAASP,yBAC7BQ,EAAYlB,gBAAkBjnB,EAAQkf,qBAAqBzQ,EAASwQ,EACrE,CACA,GAAIiJ,EAASL,0BAA2B,CACvC,MAAMpZ,EAAUyZ,EAASL,0BACnB5I,EAAciJ,EAASJ,8BAC7BK,EAAYf,qBAAuBpnB,EAAQkf,qBAAqBzQ,EAASwQ,EAC1E,CACD,IAIHphB,IAAA,EA3FYmqB,GAEW7oB,eAAiBC,GC7BzC,MAAMwd,EAAEA,IAAMG,QAKDqL,WAAqBzqB,EAMvBC,IAAAA,GACTC,KAAKC,cAAgBX,EACrBU,KAAKE,aAAe,eACpBF,KAAKG,YAAc,CAACC,EAAagf,SAClC,CAEU9e,WAAAA,GACT,OAAOC,OAAOC,OAAOC,MAAMH,cAA4B,CACtDkqB,mBAAoB,EACpBC,oBAAqB,KACrBC,wBAAyB,IAAIjL,EAAYzf,KAAK0f,MAAO,4BAEvD,CAOOiL,qBAAAA,GACN,OAAO3qB,KAAK4D,IAAI,qBACjB,CAGOgnB,qBAAAA,CAAsB1I,GAC5B,OAAWliB,KAACyM,IAAI,qBAAsByV,EACvC,CAQO2I,sBAAAA,GACN,YAAY3K,OAAO,sBACpB,CAMO4K,0BAAAA,GACN,OAAW9qB,KAACkgB,OAAO,uBAAyBlgB,KAAKkgB,OAAO,2BAA6B,IACtF,CAGO6K,sBAAAA,CAAuBna,GAC7B,OAAO5Q,KAAKqgB,OAAO,sBAAuBzP,EAAS,CAAE0P,SAAUvB,IAChE,EAvDYwL,GACEjpB,eAAiBhC,ECnBhC,MAAMiC,GAAOjC,EAuCP,MAAO0rB,WAAiCvpB,EAASC,WAAAA,IAAAC,YAAAA,GAAA3B,KACtCC,cAAgBsB,EAAI,CAI7B0pB,kBAAAA,GACN,WAAWV,GAAavqB,KAAKgC,SAASC,WACvC,CAGOC,IAAAA,CAAKC,GACX,MAAMC,EAAUD,EAAQC,QAElBqe,EAAcre,EAAQC,KAAKoO,UAAY,GAyB7C,OA1BqBrO,EAAQC,KAAKqe,WAAa,IAElCne,QAAQ,CAACoe,EAAaC,KAClC,GAAID,EAAYje,YAAcie,EAAYje,WAAWnB,IAAO,CAC3D,MAAM2pB,EAAelrB,KAAKirB,qBAC1B9oB,EAAQue,UAAUE,GAAe9d,aAAavB,GAAM2pB,GAEpD,MAAMC,EAAkBxK,EAAYje,WAAWnB,IAU/C,QAN2C2M,IAAvCid,EAAgBX,oBACnBU,EAAaN,sBAAsBO,EAAgBX,yBAKRtc,IAAxCid,EAAgBV,oBAAmC,CACtD,MAAM1J,EAAiBoK,EAAgBV,oBAEvCS,EAAaH,uBADG5oB,EAAQsO,SAASgQ,EAAYM,EAAetV,OAAOS,SAEnE/J,EAAQ6e,eAAekK,EAAaJ,6BAA+B/J,EACpE,CACD,IAGM/gB,IACR,CAGOsD,KAAAA,CAAMnB,GACZ,MAAMC,EAAUD,EAAQC,QA4BxB,OA1BApC,KAAKgC,SACHuB,UACA0d,gBACA1e,QAAS2e,IACT,MAAMgK,EAAehK,EAASxd,aAA2BnC,IACzD,GAAI2pB,EAAc,CACjB,MAAMtK,EAAgBze,EAAQgf,iBAAiBvd,IAAIsd,GAC7CP,EAAcve,EAAQC,KAAKqe,UAAWE,GAC5CD,EAAYje,WAAaie,EAAYje,YAAc,CAAE,EAIrD,MAAMyoB,EAAmBxK,EAAYje,WAAWnB,IAAQ,CACvDipB,mBAAoBU,EAAaP,yBAKlC,GAAIO,EAAaL,yBAA0B,CAC1C,MAAMja,EAAUsa,EAAaL,yBACvBzJ,EAAc8J,EAAaJ,6BACjCK,EAAgBV,oBAAsBtoB,EAAQkf,qBAAqBzQ,EAASwQ,EAC7E,CACD,IAIHphB,IAAA,EAxEYgrB,GAEW1pB,eAAiBC,GCtC5B,MAAA6pB,WAActrB,EAMhBC,IAAAA,GACTC,KAAKC,cAAgBV,EACrBS,KAAKE,aAAe,QACpBF,KAAKG,YAAc,CAACC,EAAagf,SAClC,EAVYgM,GACE9pB,eAAiB/B,ECJhC,MAAMgC,GAAOhC,EAsCA,MAAA8rB,WAA0B5pB,EAASC,WAAAA,IAAAC,GAAAlB,SAAAkB,GAC/B1B,KAAAA,cAAgBsB,EAAI,CAI7B+pB,WAAAA,GACN,OAAO,IAAIF,GAAMprB,KAAKgC,SAASC,WAChC,CAGOC,IAAAA,CAAKC,GAQX,OAPqBA,EAAQC,QAAQC,KAAKqe,WAAa,IAC1Cne,QAAQ,CAACoe,EAAaC,KAC9BD,EAAYje,YAAcie,EAAYje,WAAWnB,KACpDY,EAAQue,UAAUE,GAAe9d,aAAavB,GAAMvB,KAAKsrB,cAC1D,GAGMtrB,IACR,CAGOsD,KAAAA,CAAMnB,GACZ,MAAMC,EAAUD,EAAQC,QAcxB,OAZApC,KAAKgC,SACHuB,UACA0d,gBACA1e,QAAS2e,IACT,GAAIA,EAASxd,aAAoBnC,IAAO,CACvC,MAAMqf,EAAgBze,EAAQgf,iBAAiBvd,IAAIsd,GAC7CP,EAAcve,EAAQC,KAAKqe,UAAWE,GAC5CD,EAAYje,WAAaie,EAAYje,YAAc,CAAE,EACrDie,EAAYje,WAAWnB,IAAQ,CAChC,CAAA,IAIHvB,IAAA,EAtCYqrB,GAEW/pB,eAAiBC,GChCnC,MAAOgqB,WAAgBzrB,EAMlBC,IAAAA,GACTC,KAAKC,cAAgBR,EACrBO,KAAKE,aAAe,UACpBF,KAAKG,YAAc,CAAC,cACrB,CAEUG,WAAAA,GACT,OAAOC,OAAOC,OAAOC,MAAMH,cAA4B,CAAE4gB,SAAU,KAAMsK,SAAU,IACpF,CAGOC,WAAAA,GACN,OAAWzrB,KAACkgB,OAAO,WACpB,CAGOwL,WAAAA,CAAYxK,GAClB,YAAYb,OAAO,WAAYa,EAChC,CAGOyK,UAAAA,CAAWC,GACjB,OAAO5rB,KAAK6rB,OAAO,WAAYD,EAChC,CAGOE,aAAAA,CAAcF,GACpB,OAAW5rB,KAAC+rB,UAAU,WAAYH,EACnC,CAGOI,YAAAA,GACN,OAAOhsB,KAAKisB,SAAS,WACtB,EAvCYV,GACEjqB,eAAiB7B,QCFnBysB,WAAoBpsB,EAMtBC,IAAAA,GACTC,KAAKC,cAAgBR,EACrBO,KAAKE,aAAe,cACpBF,KAAKG,YAAc,CAACC,EAAa6J,UAClC,CAEU3J,WAAAA,GACT,OAAOC,OAAOC,OAAOC,MAAMH,cAA4B,CAAE6rB,SAAU,IACpE,CAGOC,UAAAA,CAAWC,GACjB,OAAOrsB,KAAK6rB,OAAO,WAAYQ,EAChC,CAGOC,aAAAA,CAAcD,GACpB,OAAOrsB,KAAK+rB,UAAU,WAAYM,EACnC,CAGOE,YAAAA,GACN,OAAWvsB,KAACisB,SAAS,WACtB,EA7BYC,GACE5qB,eAAiB7B,QCNnB+sB,WAAgB1sB,EAMlBC,IAAAA,GACTC,KAAKC,cAAgBR,EACrBO,KAAKE,aAAe,UACpBF,KAAKG,YAAc,CAAC,cACrB,EAVYqsB,GACElrB,eAAiB7B,ECDhC,MAAM8B,GAAO9B,EAmFA,MAAAgtB,WAA6BhrB,EAASC,WAAAA,IAAAC,GAAAlB,SAAAkB,GAAA3B,KAClCC,cAAgBsB,EAAI,CAI7BmrB,iBAAAA,GACN,OAAW,IAAAR,GAAYlsB,KAAKgC,SAASC,WACtC,CAGO0qB,aAAAA,CAAc3Q,EAAO,IAC3B,OAAO,IAAIwQ,GAAQxsB,KAAKgC,SAASC,WAAY+Z,EAC9C,CAGO4Q,aAAAA,GACN,WAAWrB,GAAQvrB,KAAKgC,SAASC,WAClC,CAGO+pB,YAAAA,GACN,OAAO1S,MAAMC,KAAKvZ,KAAKmD,YAAY0B,OAAQ3B,GAASA,aAAgBspB,GACrE,CAGOtqB,IAAAA,CAAKC,GACX,MAAMC,EAAUD,EAAQC,QAExB,IAAKA,EAAQC,KAAKK,aAAeN,EAAQC,KAAKK,WAAWnB,IAAO,OAAWvB,KAG3E,MAEMwrB,GAFkBppB,EAAQC,KAAKK,WAAWnB,IACZiqB,UAAY,IACnBzkB,IAAK8lB,GAAe7sB,KAAK2sB,gBAAgBlO,QAAQoO,EAAW7Q,MAAQ,KAkCjG,OA/BiB5Z,EAAQC,KAAKqW,QAAU,IAC/BnW,QAAQ,CAACoW,EAASmU,KAC1B,MAAMha,EAAO3Q,EAAQuW,OAAOoU,IACXnU,EAAQE,YAAc,IAE9BtW,QAAQ,CAACqW,EAASmU,KAC1B,IAAKnU,EAAQlW,aAAekW,EAAQlW,WAAWnB,IAC9C,OAGD,MAAMyrB,EAAchtB,KAAK0sB,oBAEnBO,EAAiBrU,EAAQlW,WAAWnB,IAC1C,IAAK,MAAM2rB,KAAcD,EAAed,SAAU,CACjD,MAAME,EAAUrsB,KAAK4sB,qBAEO1e,IAAxBgf,EAAWhM,UACdmL,EAAQX,YAAYvpB,EAAQue,UAAUwM,EAAWhM,WAGlD,IAAK,MAAMiM,KAAgBD,EAAW1B,UAAY,GACjDa,EAAQV,WAAWH,EAAS2B,IAG7BH,EAAYZ,WAAWC,EACxB,CAEAvZ,EAAKmH,iBAAiB8S,GAAWjqB,aAAavB,GAAMyrB,EACrD,EACD,GAGDhtB,IAAA,CAGOsD,KAAAA,CAAMnB,GACZ,MAAMC,EAAUD,EAAQC,QAElBopB,EAAWxrB,KAAKgsB,eACtB,IAAKR,EAAS1lB,OAAQ,YAGtB,MAAMsnB,EAAc,GACdC,EAAkB,IAAI/iB,IAC5B,IAAK,MAAMshB,KAAWJ,EACrB6B,EAAgB5gB,IAAImf,EAASwB,EAAYtnB,QACzCsnB,EAAY9e,KAAKnM,EAAQmrB,kBAAkB1B,IAI5C,IAAK,MAAM9Y,KAAY9S,KAACgC,SAASuB,UAAUyW,aAAc,CACxD,MAAM8S,EAAY3qB,EAAQ2Z,aAAalY,IAAIkP,GAE3CA,EAAKmH,iBAAiB1X,QAAQ,CAACyS,EAAM+X,KACpC,MAAMC,EAAchY,EAAKtR,aAA0BnC,IACnD,IAAKyrB,EAAa,OAElB,MAAMpU,EAAUzW,EAAQC,QAAQC,KAAKqW,OAAQoU,GAAWjU,WAAWkU,GAE7DQ,EAAcP,EAAYT,eAAexlB,IAAKslB,IACnD,MAAMa,EAAa/qB,EAAQmrB,kBAAkBjB,GAEvCnL,EAAWmL,EAAQZ,cAOzB,OANIvK,IACHgM,EAAWhM,SAAW/e,EAAQgf,iBAAiBvd,IAAIsd,IAGpDgM,EAAW1B,SAAWa,EAAQL,eAAejlB,IAAK6kB,GAAYyB,EAAgBzpB,IAAIgoB,IAE3EsB,IAGRtU,EAAQlW,WAAakW,EAAQlW,YAAc,CAAA,EAC3CkW,EAAQlW,WAAWnB,IAAQ,CAAE4qB,SAAUoB,IAEzC,CAKA,OAHAnrB,EAAQC,KAAKK,WAAaN,EAAQC,KAAKK,YAAc,CAAE,EACvDN,EAAQC,KAAKK,WAAWnB,IAAQ,CAAEiqB,SAAU4B,OAG7C,EArHYX,GAEWnrB,eAAiBC,GCtEzC,MAAMyd,EAAEA,IAAME,EAKR,MAAOsO,WAAe1tB,EAMjBC,IAAAA,GACTC,KAAKC,cAAgBT,EACrBQ,KAAKE,aAAe,SACpBF,KAAKG,YAAc,CAACC,EAAagf,SAClC,CAEU9e,WAAAA,GACT,OAAOC,OAAOC,OAAOC,MAAMH,cAA4B,CACtDmtB,gBAAiB,EACjBC,iBAAkB,KAClBC,qBAAsB,IAAIlO,EAAYzf,KAAK0f,MAAO,oBAClDkO,oBAAqBC,SACrBC,iBAAkB,CAAC,EAAK,EAAK,IAE/B,CAWOC,kBAAAA,GACN,OAAW/tB,KAAC4D,IAAI,kBACjB,CAOOoqB,kBAAAA,CAAmB9L,GACzB,OAAWliB,KAACyM,IAAI,kBAAmByV,EACpC,CAMO+L,mBAAAA,GACN,YAAY/N,OAAO,mBACpB,CAMOgO,uBAAAA,GACN,OAAWluB,KAACkgB,OAAO,oBAAsBlgB,KAAKkgB,OAAO,wBAA0B,IAChF,CAMOiO,mBAAAA,CAAoBvd,GAC1B,OAAW5Q,KAACqgB,OAAO,mBAAoBzP,EAAS,CAAE0P,SAAUtB,IAC7D,CAUOoP,sBAAAA,GACN,OAAOpuB,KAAK4D,IAAI,sBACjB,CAMOyqB,sBAAAA,CAAuBC,GAC7B,YAAY7hB,IAAI,sBAAuB6hB,EACxC,CAMOC,mBAAAA,GACN,OAAOvuB,KAAK4D,IAAI,mBACjB,CAMO4qB,mBAAAA,CAAoBlS,GAC1B,OAAWtc,KAACyM,IAAI,mBAAoB6P,EACrC,CAOOmS,sBAAAA,GACN,OAAOzR,EAAWC,YAAYjd,KAAKuuB,sBACpC,CAOOG,sBAAAA,CAAuBvR,GAC7B,MAAM+E,EAASliB,KAAKuuB,sBAAsBhf,QAC1C,YAAY9C,IAAI,mBAAoBuQ,EAAWI,YAAYD,EAAK+E,GACjE,EAzHYsL,GACElsB,eAAiB9B,ECvBhC,MAAM+B,GAAO/B,EA6DP,MAAOmvB,WAA2BltB,EAASC,WAAAA,IAAAC,GAAAA,SAAAA,GAChC1B,KAAAA,cAAgBsB,EAAI,CAI7BqtB,YAAAA,GACN,OAAW,IAAApB,GAAOxtB,KAAKgC,SAASC,WACjC,CAGOC,IAAAA,CAAKC,GACX,MAAMC,EAAUD,EAAQC,QAElBqe,EAAcre,EAAQC,KAAKoO,UAAY,GA+B7C,OAhCqBrO,EAAQC,KAAKqe,WAAa,IAElCne,QAAQ,CAACoe,EAAaC,KAClC,GAAID,EAAYje,YAAcie,EAAYje,WAAWnB,IAAO,CAC3D,MAAMstB,EAAS7uB,KAAK4uB,eACpBzsB,EAAQue,UAAUE,GAAe9d,aAAavB,GAAMstB,GAEpD,MAAMC,EAAYnO,EAAYje,WAAWnB,IAgBzC,QAZkC2M,IAA9B4gB,EAAUrB,iBACboB,EAAOb,mBAAmBc,EAAUrB,sBAECvf,IAAlC4gB,EAAUlB,qBACbiB,EAAOR,uBAAuBS,EAAUlB,0BAEN1f,IAA/B4gB,EAAUhB,kBACbe,EAAOL,oBAAoBM,EAAUhB,uBAKH5f,IAA/B4gB,EAAUpB,iBAAgC,CAC7C,MAAM3M,EAAiB+N,EAAUpB,iBAEjCmB,EAAOV,oBADShsB,EAAQsO,SAASgQ,EAAYM,EAAetV,OAAOS,SAEnE/J,EAAQ6e,eAAe6N,EAAOX,0BAA4BnN,EAC3D,CACD,IAGM/gB,IACR,CAGOsD,KAAAA,CAAMnB,GACZ,MAAMC,EAAUD,EAAQC,QAoCxB,OAlCApC,KAAKgC,SACHuB,UACA0d,gBACA1e,QAAS2e,IACT,MAAM2N,EAAS3N,EAASxd,aAAqBnC,IAC7C,GAAIstB,EAAQ,CACX,MAAMjO,EAAgBze,EAAQgf,iBAAiBvd,IAAIsd,GAC7CP,EAAcve,EAAQC,KAAKqe,UAAWE,GAC5CD,EAAYje,WAAaie,EAAYje,YAAc,GAInD,MAAMosB,EAAanO,EAAYje,WAAWnB,IAAQ,CAAgB,EAclE,GAZIstB,EAAOd,qBAAuB,IACjCe,EAAUrB,gBAAkBoB,EAAOd,sBAEhCgB,OAAOC,SAASH,EAAOT,4BAC1BU,EAAUlB,oBAAsBiB,EAAOT,0BAEnC5pB,EAAUsa,GAAG+P,EAAON,sBAAuB,CAAC,EAAG,EAAG,MACtDO,EAAUhB,iBAAmBe,EAAON,uBAKjCM,EAAOZ,sBAAuB,CACjC,MAAMrd,EAAUie,EAAOZ,sBACjB7M,EAAcyN,EAAOX,0BAC3BY,EAAUpB,iBAAmBvrB,EAAQkf,qBAAqBzQ,EAASwQ,EACpE,CACD,IAGKphB,IACR,EAtFY2uB,GAEWrtB,eAAiBC,GChEzC,MAAMA,GxCe+B,wBwC0B/B,MAAO0tB,WAA4BxtB,EAASC,WAAAA,IAAAC,GAAAlB,SAAAkB,GACjC1B,KAAAA,cAAgBsB,EAAI,CAIpCW,IAAAA,CAAKgtB,GACJ,OACDlvB,IAAA,CAGAsD,KAAAA,CAAM4rB,GACL,OAAOlvB,IACR,EAZYivB,GAEW3tB,eAAiBC,GClCzC,MAAMA,GzCO4B,qByCDlC,MAAM4tB,GACL9f,KAAAA,CAAMrK,GACL,OACc,MAAbA,EAAM,IACO,KAAbA,EAAM,IACO,KAAbA,EAAM,IACO,KAAbA,EAAM,IACO,KAAbA,EAAM,IACO,KAAbA,EAAM,IACO,KAAbA,EAAM,IACO,MAAbA,EAAM,IACO,KAAbA,EAAM,IACO,KAAbA,EAAM,IACQ,KAAdA,EAAM,KACQ,KAAdA,EAAM,GAER,CACAwK,OAAAA,CAAQxK,GACP,MAAMoqB,EAAYC,EAAQrqB,GAC1B,MAAO,CAACoqB,EAAUE,WAAYF,EAAUG,YACzC,CACArf,WAAAA,CAAYlL,GACX,MACMwqB,EADYH,EAAQrqB,GACJyqB,qBAAqB,GAC3C,GAAID,EAAIE,aAAeC,EACtB,OAA8B,IAAvBH,EAAII,QAAQ9pB,QAAuD,KAAT,GAA7B0pB,EAAII,QAAQ,GAAGC,aAA4B,EAAI,EAC7E,GAAIL,EAAIE,aAAeI,EAC7B,OAA8C,IAAT,GAA7BN,EAAII,QAAQ,GAAGC,aAA2B,EAAI,EAEvD,UAAUnpB,MAAM,gCAAgC8oB,EAAIE,eACrD,CACAK,iBAAAA,CAAkB/qB,GACjB,MAAMoqB,EAAYC,EAAQrqB,GACpBgrB,EAAWhwB,KAAKkQ,YAAYlL,GAAS,EAE3C,IAAIirB,EAAoB,EACxB,IAAK,IAAIlqB,EAAI,EAAGA,EAAIqpB,EAAUc,OAAOpqB,OAAQC,IAAK,CACjD,MAAMoqB,EAAQf,EAAUc,OAAOnqB,GAI9BkqB,GADGE,EAAMC,uBACYD,EAAMC,uBAERna,KAAKpP,IAAI,EAAGoP,KAAKoa,MAAMjB,EAAUE,WAAarZ,KAAKqa,IAAI,EAAGvqB,KAG1C,GAFfkQ,KAAKpP,IAAI,EAAGoP,KAAKoa,MAAMjB,EAAUG,YAActZ,KAAKqa,IAAI,EAAGvqB,KAExB,IADrCiqB,EAAW,GAAK,EAGpC,CAEA,OAAOC,CACR,QAsDYM,WAAyB9uB,EAASC,WAAAA,IAAAC,YAAAA,GAAA3B,KAC9BC,cAAgBsB,GAEhBwI,KAAAA,aAAe,CAAC3J,EAAaiQ,QAAQ,CAI9C,eAAOC,GACbC,EAAWC,eAAe,aAAc,IAAI2e,GAC7C,CAGOjkB,OAAAA,CAAQ/I,GAOd,OANAA,EAAQC,QAAQC,KAAKoO,SAAUlO,QAASmO,IACnCA,EAAWhO,YAAcgO,EAAWhO,WAAWnB,MAElDmP,EAAWxE,OADOwE,EAAWhO,WAAWnB,IACV2K,OAC/B,OAGF,CAIOhK,IAAAA,CAAKC,GACX,OACDnC,IAAA,CAGOsD,KAAAA,CAAMnB,GACZ,MAAMC,EAAUD,EAAQC,QAkBxB,OAhBApC,KAAKgC,SACHuB,UACAoN,eACApO,QAASqO,IACT,GAA8B,eAA1BA,EAAQC,cAAgC,CAC3C,MAAMC,EAAa3O,EAAQ4O,cAAcnN,IAAIgN,GAC7CxO,EAAQC,KAAKoO,SAAUlO,QAASmO,IAC3BA,EAAWxE,SAAW4E,IACzBJ,EAAWhO,WAAagO,EAAWhO,YAAc,CAAE,EACnDgO,EAAWhO,WAAWnB,IAAQ,CAAE2K,OAAQwE,EAAWxE,eAC5CwE,EAAWxE,OACnB,EAEF,QAIH,EAjDYqkB,GAIWjvB,eAAiBC,GCjH5B,MAAAivB,WAAkB1wB,EAMpBC,IAAAA,GACTC,KAAKC,cAAgBP,EACrBM,KAAKE,aAAe,YACpBF,KAAKG,YAAc,CAACC,EAAaqwB,aAClC,CAEUnwB,WAAAA,GACT,OAAOC,OAAOC,OAAOC,MAAMH,cAA4B,CACtDuP,OAAQ,CAAC,EAAK,GACdmQ,SAAU,EACV6C,MAAO,CAAC,EAAK,GACb6N,SAAU,MAEZ,CAEOC,SAAAA,GACN,OAAW3wB,KAAC4D,IAAI,SACjB,CACOgtB,SAAAA,CAAU/gB,GAChB,OAAW7P,KAACyM,IAAI,SAAUoD,EAC3B,CAEOghB,WAAAA,GACN,OAAO7wB,KAAK4D,IAAI,WACjB,CACOktB,WAAAA,CAAY9Q,GAClB,OAAOhgB,KAAKyM,IAAI,WAAYuT,EAC7B,CAEO+Q,QAAAA,GACN,OAAW/wB,KAAC4D,IAAI,QACjB,CACOotB,QAAAA,CAASnO,GACf,OAAW7iB,KAACyM,IAAI,QAASoW,EAC1B,CAEOoO,WAAAA,GACN,OAAOjxB,KAAK4D,IAAI,WACjB,CACOstB,WAAAA,CAAYR,GAClB,OAAO1wB,KAAKyM,IAAI,WAAYikB,EAC7B,EA/CYF,GACElvB,eAAiB5B,ECXhC,MAAM6B,GAAO7B,EA2CA,MAAAyxB,WAA4B1vB,EAASC,WAAAA,IAAAC,GAAAlB,SAAAkB,GACjC1B,KAAAA,cAAgBsB,EAAI,CAI7B6vB,eAAAA,GACN,OAAO,IAAIZ,GAAUxwB,KAAKgC,SAASC,WACpC,CAGOC,IAAAA,CAAKC,GACX,IAAK,MAAOif,EAAaL,KAAmBzH,MAAMC,KAAKpX,EAAQkvB,aAAaC,WAAY,CACvF,IAAKvQ,EAAere,aAAeqe,EAAere,WAAWnB,IAAO,SAEpE,MAAMgwB,EAAYvxB,KAAKoxB,kBACjBI,EAAezQ,EAAere,WAAWnB,SAEnB2M,IAAxBsjB,EAAa3hB,QAAsB0hB,EAAUX,UAAUY,EAAa3hB,aAC1C3B,IAA1BsjB,EAAaxR,UAAwBuR,EAAUT,YAAYU,EAAaxR,eACjD9R,IAAvBsjB,EAAa3O,OAAqB0O,EAAUP,SAASQ,EAAa3O,YACxC3U,IAA1BsjB,EAAad,UAAwBa,EAAUL,YAAYM,EAAad,UAE5EtP,EAAYte,aAAavB,GAAMgwB,EAChC,CACA,OAAOvxB,IACR,CAGOsD,KAAAA,CAAMnB,GACZ,MAAMsvB,EAAqBnY,MAAMC,KAAKpX,EAAQuvB,kBAAkBJ,WAChE,IAAK,MAAOlQ,EAAaL,KAAmB0Q,EAAoB,CAC/D,MAAMF,EAAYnQ,EAAY1d,aAAwBnC,IACtD,IAAKgwB,EAAW,SAEhBxQ,EAAere,WAAaqe,EAAere,YAAc,CAAA,EACzD,MAAM8uB,EAAe,CAAkB,EAEjC1S,EAAKta,EAAUsa,GAChBA,EAAGyS,EAAUZ,YAAa,CAAC,EAAG,MAAKa,EAAa3hB,OAAS0hB,EAAUZ,aACxC,IAA5BY,EAAUV,gBAAqBW,EAAaxR,SAAWuR,EAAUV,eAChE/R,EAAGyS,EAAUR,WAAY,CAAC,EAAG,MAAKS,EAAa3O,MAAQ0O,EAAUR,YACvC,MAA3BQ,EAAUN,gBAAuBO,EAAad,SAAWa,EAAUN,eAEvElQ,EAAere,WAAWnB,IAAQiwB,CACnC,CACA,OACDxxB,IAAA,EA9CYmxB,GAEW7vB,eAAiBC,GCzCzC,MAAMowB,GAAe,CACpBvxB,EAAa0a,KACb1a,EAAawxB,MACbxxB,EAAaC,KACbD,EAAayxB,KACbzxB,EAAagf,SACbhf,EAAaiQ,QACbjQ,EAAa0xB,WAYD,MAAAC,WAAejyB,EAMjBC,IAAAA,GACTC,KAAKC,cAAgBN,EACrBK,KAAKE,aAAe,SACpBF,KAAKG,YAAcwxB,EACpB,CAEUrxB,WAAAA,GACT,OAAOC,OAAOC,OAAOC,MAAMH,cAAe,CAAE6B,QAAS,GAAIgB,WAAY,CAAE,GACxE,CAWO6uB,UAAAA,GACN,OAAWhyB,KAAC4D,IAAI,UACjB,CAkBOquB,UAAAA,CAAW9vB,GACjB,OAAWnC,KAACyM,IAAI,UAASxB,EAAA,CAAA,EAAO9I,GACjC,CAeO+vB,cAAAA,GACN,OAAO3xB,OAAOsa,KAAK7a,KAAK4D,IAAI,cAC7B,CAaOuuB,WAAAA,CAAYnW,GAClB,MAAM7Y,EAAanD,KAAK4D,IAAI,cAC5B,OAAOoY,KAAQ7Y,EAAaA,EAAW6Y,GAAQ,IAChD,CAgBOoW,WAAAA,CAAYpW,EAAcqW,GAChCryB,KAAKsyB,eAAetW,GAEpB,MAAM7Y,EAAU8H,KAAQjL,KAAK4D,IAAI,eAMjC,OALIyuB,EACHlvB,EAAW6Y,GAAQqW,SAEZlvB,EAAW6Y,GAEZhc,KAAKyM,IAAI,aAActJ,EAC/B,CASOovB,QAAAA,GAGN,OAAAtnB,EAAA,CAAS,WAFOunB,GAASxyB,KAAK4D,IAAI,aACf4uB,GAASxyB,KAAK4D,IAAI,eAEtC,CAMO6uB,UAAAA,CAAWC,GAIjB,MAAMvwB,GAHNuwB,EAASF,GAASE,IAGK,YAKvB,OAJIvwB,GAASnC,KAAKyM,IAAI,UAAWtK,UAC1BuwB,EAAO,YAGP1yB,KAAKyM,IAAI,aAAcimB,EAC/B,CAOQJ,cAAAA,CAAetW,GAEtB,KADeA,EAAK2W,MAAM,KAAK,KACX3yB,KAAC4D,IAAI,YACxB,MAAM,IAAI8C,MAAM,GAAG/G,iCAA+Cqc,MAEpE,EAGD,SAASwW,GAAYI,GACpB,OAAOlZ,KAAKmZ,MAAMnZ,KAAKC,UAAUiZ,GAClC,CAxJab,GAIEzwB,eAAiB3B,ECfhC,MAAM4B,GAAO5B,EAoFA,MAAAmzB,WAAerxB,EAASC,WAAAA,IAAAC,YAAAA,GAAA3B,KACpBC,cAAgBsB,EAAI,CAI7BwxB,YAAAA,GACN,OAAO,IAAIhB,GAAO/xB,KAAKgC,SAASC,WACjC,CAGO+wB,WAAAA,GACN,OAAO1Z,MAAMC,KAAKvZ,KAAKmD,WACxB,CAGOjB,IAAAA,CAAKC,OAAsB8wB,EACjC,MAAMC,EAAeD,OAAHA,EAAG9wB,EAAQC,QAAQC,KAAKK,iBAArBuwB,EAAAA,EAAkC1xB,IACvD,IAAK2xB,IAAiBA,EAAaC,QAAS,OAAOnzB,KAGnD,MAAMqC,EAAOF,EAAQC,QAAQC,KACvB+wB,EAAOpzB,KAAKgC,SAASuB,UACrB4vB,EAAUD,EAAaC,QAAQpsB,IAAKssB,GAAcrzB,KAAK+yB,eAAeN,WAAWY,IAEjFC,EAAW,CAChB,CAACjxB,EAAKkxB,OACNlxB,EAAKmxB,OACLnxB,EAAKC,MACLD,EAAKqW,OACLrW,EAAKqe,UACLre,EAAKoxB,OACLpxB,EAAKqxB,YAGAC,EAAgB,CACrB,CAACP,GACDA,EAAKlY,aACLkY,EAAK5vB,YACL4vB,EAAKpZ,aACLoZ,EAAKnS,gBACLmS,EAAKziB,eACLyiB,EAAKQ,kBAIN,IAAK,IAAI7tB,EAAI,EAAGA,EAAIutB,EAASxtB,OAAQC,IAAK,CACzC,MAAM8tB,EAAOP,EAASvtB,IAAM,GAC5B,IAAK,IAAIuB,EAAI,EAAGA,EAAIusB,EAAK/tB,OAAQwB,IAAK,CACrC,MAAMwsB,EAAMD,EAAKvsB,GACbwsB,EAAIpxB,YAAcoxB,EAAIpxB,WAAWnB,KAEpCoyB,EAAc5tB,GAAGuB,GAAGxE,aAAavB,GAAM4xB,EADxBW,EAAIpxB,WAAWnB,IACwBwyB,QAExD,CACD,CAEA,WACD,CAGOzwB,KAAAA,CAAMnB,GACZ,MAAME,KAAEA,GAASF,EAAQC,QAEnB4xB,EAAa,GAEnB,IAAK,MAAMD,KAAc/zB,KAACmD,WAA2B,CAEpD6wB,EAAW1lB,KAAKylB,EAAOxB,YAIvB,IAAK,MAAMxqB,KAAUgsB,EAAOlsB,cAAe,CAC1C,IAAIosB,EAEJ,OAAQlsB,EAAO7H,cACd,KAAKE,EAAa0a,KACjBmZ,EAAY5xB,EAAKkxB,MACjB,MACD,KAAKnzB,EAAawxB,MACjBqC,EAAY5xB,EAAKmxB,OAAQrxB,EAAQ+xB,cAActwB,IAAImE,IACnD,MACD,KAAK3H,EAAaC,KACjB4zB,EAAY5xB,EAAKC,MAAOH,EAAQwB,aAAaC,IAAImE,IACjD,MACD,KAAK3H,EAAayxB,KACjBoC,EAAY5xB,EAAKqW,OAAQvW,EAAQ2Z,aAAalY,IAAImE,IAClD,MACD,KAAK3H,EAAagf,SACjB6U,EAAY5xB,EAAKqe,UAAWve,EAAQgf,iBAAiBvd,IAAImE,IACzD,MACD,KAAK3H,EAAaiQ,QACjB4jB,EAAY5xB,EAAKoxB,OAAQtxB,EAAQ4O,cAAcnN,IAAImE,IACnD,MACD,KAAK3H,EAAa0xB,UACjBmC,EAAY5xB,EAAKqxB,WAAYvxB,EAAQgyB,kBAAkBvwB,IAAImE,IAC3D,MACD,QACCksB,EAAY,KACZj0B,KAAKgC,SACHuW,YACA2B,SAAS3Y,sCAAwCwG,EAAO7H,iBAIvD+zB,IAELA,EAAUvxB,WAAauxB,EAAUvxB,YAAc,CAAE,EACjDuxB,EAAUvxB,WAAWnB,IAAQ,CAAEwyB,OAAQC,EAAWluB,OAAS,GAC5D,CACD,CAOA,OALIkuB,EAAWluB,OAAS,IACvBzD,EAAKK,WAAaL,EAAKK,YAAc,CAAE,EACvCL,EAAKK,WAAWnB,IAAQ,CAAE4xB,QAASa,QAIrC,EArHYlB,GAEWxxB,eAAiBC,GC/E5B,MAAA6yB,GAAqB,CACjCzc,GACAuG,GACAqC,GACA0C,GACAQ,GACAO,GACA2B,GACA6B,GACA2C,GACApB,GACAiC,GACAK,GACAoB,GACAkC,GACAM,GACAsB,GACAY,GACA2B,IAGYuB,GAAiB,CAC7B7yB,EACAsI,GACAsG,GACAwB,MACGwiB"}